
ExUppgift2014.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004268  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084268  00084268  0000c268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00084270  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000025c  200709a8  00084c18  000109a4  2**3
                  ALLOC
  4 .stack        00002004  20070c04  00084e74  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012b03  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000030f4  00000000  00000000  0002352b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006872  00000000  00000000  0002661f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ea8  00000000  00000000  0002ce91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d40  00000000  00000000  0002dd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b230  00000000  00000000  0002ea79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000140af  00000000  00000000  00049ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006978d  00000000  00000000  0005dd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002ca0  00000000  00000000  000c74e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072c08 	.word	0x20072c08
   80004:	00080fd5 	.word	0x00080fd5
   80008:	00080fd1 	.word	0x00080fd1
   8000c:	00080fd1 	.word	0x00080fd1
   80010:	00080fd1 	.word	0x00080fd1
   80014:	00080fd1 	.word	0x00080fd1
   80018:	00080fd1 	.word	0x00080fd1
	...
   8002c:	00080379 	.word	0x00080379
   80030:	00080fd1 	.word	0x00080fd1
   80034:	00000000 	.word	0x00000000
   80038:	000803b1 	.word	0x000803b1
   8003c:	000803ed 	.word	0x000803ed
   80040:	00080fd1 	.word	0x00080fd1
   80044:	00080fd1 	.word	0x00080fd1
   80048:	00080fd1 	.word	0x00080fd1
   8004c:	00080fd1 	.word	0x00080fd1
   80050:	00080fd1 	.word	0x00080fd1
   80054:	00080fd1 	.word	0x00080fd1
   80058:	00080fd1 	.word	0x00080fd1
   8005c:	00080fd1 	.word	0x00080fd1
   80060:	00080fd1 	.word	0x00080fd1
   80064:	00080fd1 	.word	0x00080fd1
   80068:	00000000 	.word	0x00000000
   8006c:	00080e41 	.word	0x00080e41
   80070:	00080e55 	.word	0x00080e55
   80074:	00080e69 	.word	0x00080e69
   80078:	00080e7d 	.word	0x00080e7d
	...
   80084:	00080fd1 	.word	0x00080fd1
   80088:	00080fd1 	.word	0x00080fd1
   8008c:	00080fd1 	.word	0x00080fd1
   80090:	00080fd1 	.word	0x00080fd1
   80094:	00080fd1 	.word	0x00080fd1
   80098:	00080fd1 	.word	0x00080fd1
   8009c:	00080fd1 	.word	0x00080fd1
   800a0:	00080fd1 	.word	0x00080fd1
   800a4:	00000000 	.word	0x00000000
   800a8:	00080fd1 	.word	0x00080fd1
   800ac:	00080fd1 	.word	0x00080fd1
   800b0:	00080fd1 	.word	0x00080fd1
   800b4:	00080fd1 	.word	0x00080fd1
   800b8:	00080fd1 	.word	0x00080fd1
   800bc:	00080fd1 	.word	0x00080fd1
   800c0:	00080fd1 	.word	0x00080fd1
   800c4:	00080fd1 	.word	0x00080fd1
   800c8:	00080fd1 	.word	0x00080fd1
   800cc:	00080fd1 	.word	0x00080fd1
   800d0:	00080fd1 	.word	0x00080fd1
   800d4:	00080fd1 	.word	0x00080fd1
   800d8:	00080fd1 	.word	0x00080fd1
   800dc:	00080fd1 	.word	0x00080fd1
   800e0:	00080fd1 	.word	0x00080fd1
   800e4:	00080fd1 	.word	0x00080fd1
   800e8:	00080fd1 	.word	0x00080fd1
   800ec:	00080fd1 	.word	0x00080fd1
   800f0:	00080fd1 	.word	0x00080fd1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	00084270 	.word	0x00084270

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00084270 	.word	0x00084270
   80144:	200709ac 	.word	0x200709ac
   80148:	00084270 	.word	0x00084270
   8014c:	00000000 	.word	0x00000000

00080150 <ADCSetup>:
 */ 
#include <asf.h>
#include "ADCCustom.h"

void ADCSetup()
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <ADCSetup+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 84000000, 0);		// Configure for maximum frequency @ 84 MHz
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <ADCSetup+0x44>)
   8015a:	4620      	mov	r0, r4
   8015c:	490e      	ldr	r1, [pc, #56]	; (80198 <ADCSetup+0x48>)
   8015e:	4a0f      	ldr	r2, [pc, #60]	; (8019c <ADCSetup+0x4c>)
   80160:	2300      	movs	r3, #0
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <ADCSetup+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	4620      	mov	r0, r4
   80168:	2100      	movs	r1, #0
   8016a:	460a      	mov	r2, r1
   8016c:	460b      	mov	r3, r1
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <ADCSetup+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// 0-4095
   80172:	4620      	mov	r0, r4
   80174:	2100      	movs	r1, #0
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <ADCSetup+0x58>)
   80178:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// trig just by software
   8017a:	4620      	mov	r0, r4
   8017c:	2100      	movs	r1, #0
   8017e:	460a      	mov	r2, r1
   80180:	4b0a      	ldr	r3, [pc, #40]	; (801ac <ADCSetup+0x5c>)
   80182:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// PB17 - AD8 for Arduino Due
   80184:	4620      	mov	r0, r4
   80186:	210a      	movs	r1, #10
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <ADCSetup+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	00080f7d 	.word	0x00080f7d
   80194:	400c0000 	.word	0x400c0000
   80198:	0a037a00 	.word	0x0a037a00
   8019c:	0501bd00 	.word	0x0501bd00
   801a0:	0008029d 	.word	0x0008029d
   801a4:	000802f1 	.word	0x000802f1
   801a8:	000802d1 	.word	0x000802d1
   801ac:	000802e1 	.word	0x000802e1
   801b0:	00080319 	.word	0x00080319

000801b4 <ADCReadSensor>:
}

// Read value from sensor
uint32_t ADCReadSensor(){
   801b4:	b538      	push	{r3, r4, r5, lr}
	adc_start(ADC);
   801b6:	4807      	ldr	r0, [pc, #28]	; (801d4 <ADCReadSensor+0x20>)
   801b8:	4b07      	ldr	r3, [pc, #28]	; (801d8 <ADCReadSensor+0x24>)
   801ba:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  // Wait until DRDY(Data Ready) is HIGH
   801bc:	4d05      	ldr	r5, [pc, #20]	; (801d4 <ADCReadSensor+0x20>)
   801be:	4c07      	ldr	r4, [pc, #28]	; (801dc <ADCReadSensor+0x28>)
   801c0:	4628      	mov	r0, r5
   801c2:	47a0      	blx	r4
   801c4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   801c8:	d0fa      	beq.n	801c0 <ADCReadSensor+0xc>
	return (adc_get_channel_value(ADC, ADC_CHANNEL_10));
   801ca:	4802      	ldr	r0, [pc, #8]	; (801d4 <ADCReadSensor+0x20>)
   801cc:	210a      	movs	r1, #10
   801ce:	4b04      	ldr	r3, [pc, #16]	; (801e0 <ADCReadSensor+0x2c>)
   801d0:	4798      	blx	r3
   801d2:	bd38      	pop	{r3, r4, r5, pc}
   801d4:	400c0000 	.word	0x400c0000
   801d8:	00080311 	.word	0x00080311
   801dc:	00080331 	.word	0x00080331
   801e0:	00080321 	.word	0x00080321

000801e4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801e4:	b9a8      	cbnz	r0, 80212 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ea:	460c      	mov	r4, r1
   801ec:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801ee:	2a00      	cmp	r2, #0
   801f0:	dd0a      	ble.n	80208 <_read+0x24>
   801f2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801f4:	4e08      	ldr	r6, [pc, #32]	; (80218 <_read+0x34>)
   801f6:	4d09      	ldr	r5, [pc, #36]	; (8021c <_read+0x38>)
   801f8:	6830      	ldr	r0, [r6, #0]
   801fa:	4621      	mov	r1, r4
   801fc:	682b      	ldr	r3, [r5, #0]
   801fe:	4798      	blx	r3
		ptr++;
   80200:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80202:	42bc      	cmp	r4, r7
   80204:	d1f8      	bne.n	801f8 <_read+0x14>
   80206:	e001      	b.n	8020c <_read+0x28>
   80208:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   8020c:	4640      	mov	r0, r8
   8020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80212:	f04f 30ff 	mov.w	r0, #4294967295
   80216:	4770      	bx	lr
   80218:	20070b60 	.word	0x20070b60
   8021c:	20070b58 	.word	0x20070b58

00080220 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80220:	6943      	ldr	r3, [r0, #20]
   80222:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80226:	bf1d      	ittte	ne
   80228:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8022c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8022e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80230:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80232:	4770      	bx	lr

00080234 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80234:	6943      	ldr	r3, [r0, #20]
   80236:	f013 0f01 	tst.w	r3, #1
   8023a:	d005      	beq.n	80248 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8023c:	6983      	ldr	r3, [r0, #24]
   8023e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80242:	600b      	str	r3, [r1, #0]

	return 0;
   80244:	2000      	movs	r0, #0
   80246:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80248:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8024a:	4770      	bx	lr

0008024c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8024c:	3801      	subs	r0, #1
   8024e:	2802      	cmp	r0, #2
   80250:	d818      	bhi.n	80284 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80256:	460e      	mov	r6, r1
   80258:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8025a:	b182      	cbz	r2, 8027e <_write+0x32>
   8025c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8025e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80298 <_write+0x4c>
   80262:	4f0c      	ldr	r7, [pc, #48]	; (80294 <_write+0x48>)
   80264:	f8d8 0000 	ldr.w	r0, [r8]
   80268:	f815 1b01 	ldrb.w	r1, [r5], #1
   8026c:	683b      	ldr	r3, [r7, #0]
   8026e:	4798      	blx	r3
   80270:	2800      	cmp	r0, #0
   80272:	db0a      	blt.n	8028a <_write+0x3e>
   80274:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80276:	3c01      	subs	r4, #1
   80278:	d1f4      	bne.n	80264 <_write+0x18>
   8027a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8027e:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80284:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   80288:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8028a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80292:	bf00      	nop
   80294:	20070b5c 	.word	0x20070b5c
   80298:	20070b60 	.word	0x20070b60

0008029c <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   8029c:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8029e:	2401      	movs	r4, #1
   802a0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   802a2:	2400      	movs	r4, #0
   802a4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   802a6:	f240 2502 	movw	r5, #514	; 0x202
   802aa:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   802ae:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   802b2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802b6:	6845      	ldr	r5, [r0, #4]
   802b8:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   802ba:	0052      	lsls	r2, r2, #1
   802bc:	fbb1 f1f2 	udiv	r1, r1, r2
   802c0:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802c2:	0212      	lsls	r2, r2, #8
   802c4:	b292      	uxth	r2, r2
   802c6:	4313      	orrs	r3, r2
   802c8:	6043      	str	r3, [r0, #4]
	return 0;
}
   802ca:	4620      	mov	r0, r4
   802cc:	bc30      	pop	{r4, r5}
   802ce:	4770      	bx	lr

000802d0 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   802d0:	6843      	ldr	r3, [r0, #4]
   802d2:	f023 0310 	bic.w	r3, r3, #16
   802d6:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   802d8:	6843      	ldr	r3, [r0, #4]
   802da:	4319      	orrs	r1, r3
   802dc:	6041      	str	r1, [r0, #4]
   802de:	4770      	bx	lr

000802e0 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   802e0:	6843      	ldr	r3, [r0, #4]
   802e2:	4319      	orrs	r1, r3
   802e4:	01d2      	lsls	r2, r2, #7
   802e6:	b2d2      	uxtb	r2, r2
   802e8:	4311      	orrs	r1, r2
   802ea:	6041      	str	r1, [r0, #4]
   802ec:	4770      	bx	lr
   802ee:	bf00      	nop

000802f0 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   802f0:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802f2:	6844      	ldr	r4, [r0, #4]
   802f4:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   802f6:	0609      	lsls	r1, r1, #24
   802f8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   802fc:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   802fe:	071b      	lsls	r3, r3, #28
   80300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   80304:	4313      	orrs	r3, r2
   80306:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   80308:	f85d 4b04 	ldr.w	r4, [sp], #4
   8030c:	4770      	bx	lr
   8030e:	bf00      	nop

00080310 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80310:	2302      	movs	r3, #2
   80312:	6003      	str	r3, [r0, #0]
   80314:	4770      	bx	lr
   80316:	bf00      	nop

00080318 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80318:	2301      	movs	r3, #1
   8031a:	408b      	lsls	r3, r1
   8031c:	6103      	str	r3, [r0, #16]
   8031e:	4770      	bx	lr

00080320 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
   80320:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
   80322:	bf9a      	itte	ls
   80324:	3114      	addls	r1, #20
   80326:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
 *
 * \return ADC value of the specified channel.
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;
   8032a:	2000      	movhi	r0, #0
	if (15 >= adc_ch) {
		ul_data = *(p_adc->ADC_CDR + adc_ch);
	}

	return ul_data;
}
   8032c:	4770      	bx	lr
   8032e:	bf00      	nop

00080330 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80330:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80332:	4770      	bx	lr

00080334 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80334:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80336:	685a      	ldr	r2, [r3, #4]
   80338:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8033a:	6842      	ldr	r2, [r0, #4]
   8033c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8033e:	685a      	ldr	r2, [r3, #4]
   80340:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80342:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80344:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80346:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80348:	6803      	ldr	r3, [r0, #0]
   8034a:	3301      	adds	r3, #1
   8034c:	6003      	str	r3, [r0, #0]
   8034e:	4770      	bx	lr

00080350 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80350:	6843      	ldr	r3, [r0, #4]
   80352:	6882      	ldr	r2, [r0, #8]
   80354:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80356:	6883      	ldr	r3, [r0, #8]
   80358:	6842      	ldr	r2, [r0, #4]
   8035a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8035c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8035e:	685a      	ldr	r2, [r3, #4]
   80360:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80362:	bf04      	itt	eq
   80364:	6882      	ldreq	r2, [r0, #8]
   80366:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80368:	2200      	movs	r2, #0
   8036a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8036c:	681a      	ldr	r2, [r3, #0]
   8036e:	3a01      	subs	r2, #1
   80370:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80372:	6818      	ldr	r0, [r3, #0]
}
   80374:	4770      	bx	lr
   80376:	bf00      	nop

00080378 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80378:	4b06      	ldr	r3, [pc, #24]	; (80394 <pxCurrentTCBConst2>)
   8037a:	6819      	ldr	r1, [r3, #0]
   8037c:	6808      	ldr	r0, [r1, #0]
   8037e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80382:	f380 8809 	msr	PSP, r0
   80386:	f04f 0000 	mov.w	r0, #0
   8038a:	f380 8811 	msr	BASEPRI, r0
   8038e:	f04e 0e0d 	orr.w	lr, lr, #13
   80392:	4770      	bx	lr

00080394 <pxCurrentTCBConst2>:
   80394:	20070a9c 	.word	0x20070a9c

00080398 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80398:	f3ef 8011 	mrs	r0, BASEPRI
   8039c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   803a0:	f381 8811 	msr	BASEPRI, r1
   803a4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   803a6:	2000      	movs	r0, #0

000803a8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   803a8:	f380 8811 	msr	BASEPRI, r0
   803ac:	4770      	bx	lr
   803ae:	bf00      	nop

000803b0 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   803b0:	f3ef 8009 	mrs	r0, PSP
   803b4:	4b0c      	ldr	r3, [pc, #48]	; (803e8 <pxCurrentTCBConst>)
   803b6:	681a      	ldr	r2, [r3, #0]
   803b8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803bc:	6010      	str	r0, [r2, #0]
   803be:	e92d 4008 	stmdb	sp!, {r3, lr}
   803c2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   803c6:	f380 8811 	msr	BASEPRI, r0
   803ca:	f000 f8bb 	bl	80544 <vTaskSwitchContext>
   803ce:	f04f 0000 	mov.w	r0, #0
   803d2:	f380 8811 	msr	BASEPRI, r0
   803d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   803da:	6819      	ldr	r1, [r3, #0]
   803dc:	6808      	ldr	r0, [r1, #0]
   803de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803e2:	f380 8809 	msr	PSP, r0
   803e6:	4770      	bx	lr

000803e8 <pxCurrentTCBConst>:
   803e8:	20070a9c 	.word	0x20070a9c

000803ec <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   803ec:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   803ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   803f2:	4b05      	ldr	r3, [pc, #20]	; (80408 <SysTick_Handler+0x1c>)
   803f4:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   803f6:	4b05      	ldr	r3, [pc, #20]	; (8040c <SysTick_Handler+0x20>)
   803f8:	4798      	blx	r3
	{
		vTaskIncrementTick();
   803fa:	4b05      	ldr	r3, [pc, #20]	; (80410 <SysTick_Handler+0x24>)
   803fc:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   803fe:	2000      	movs	r0, #0
   80400:	4b04      	ldr	r3, [pc, #16]	; (80414 <SysTick_Handler+0x28>)
   80402:	4798      	blx	r3
   80404:	bd08      	pop	{r3, pc}
   80406:	bf00      	nop
   80408:	e000ed04 	.word	0xe000ed04
   8040c:	00080399 	.word	0x00080399
   80410:	00080419 	.word	0x00080419
   80414:	000803a9 	.word	0x000803a9

00080418 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8041c:	4b3d      	ldr	r3, [pc, #244]	; (80514 <vTaskIncrementTick+0xfc>)
   8041e:	681b      	ldr	r3, [r3, #0]
   80420:	2b00      	cmp	r3, #0
   80422:	d171      	bne.n	80508 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   80424:	4a3c      	ldr	r2, [pc, #240]	; (80518 <vTaskIncrementTick+0x100>)
   80426:	8813      	ldrh	r3, [r2, #0]
   80428:	3301      	adds	r3, #1
   8042a:	b29b      	uxth	r3, r3
   8042c:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   8042e:	8813      	ldrh	r3, [r2, #0]
   80430:	b29b      	uxth	r3, r3
   80432:	bb03      	cbnz	r3, 80476 <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80434:	4b39      	ldr	r3, [pc, #228]	; (8051c <vTaskIncrementTick+0x104>)
   80436:	681b      	ldr	r3, [r3, #0]
   80438:	681b      	ldr	r3, [r3, #0]
   8043a:	b11b      	cbz	r3, 80444 <vTaskIncrementTick+0x2c>
   8043c:	4b38      	ldr	r3, [pc, #224]	; (80520 <vTaskIncrementTick+0x108>)
   8043e:	4798      	blx	r3
   80440:	bf00      	nop
   80442:	e7fd      	b.n	80440 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   80444:	4b35      	ldr	r3, [pc, #212]	; (8051c <vTaskIncrementTick+0x104>)
   80446:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80448:	4a36      	ldr	r2, [pc, #216]	; (80524 <vTaskIncrementTick+0x10c>)
   8044a:	6810      	ldr	r0, [r2, #0]
   8044c:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8044e:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80450:	4935      	ldr	r1, [pc, #212]	; (80528 <vTaskIncrementTick+0x110>)
   80452:	680a      	ldr	r2, [r1, #0]
   80454:	3201      	adds	r2, #1
   80456:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80458:	681b      	ldr	r3, [r3, #0]
   8045a:	681b      	ldr	r3, [r3, #0]
   8045c:	b923      	cbnz	r3, 80468 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8045e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80462:	4b32      	ldr	r3, [pc, #200]	; (8052c <vTaskIncrementTick+0x114>)
   80464:	801a      	strh	r2, [r3, #0]
   80466:	e006      	b.n	80476 <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80468:	4b2c      	ldr	r3, [pc, #176]	; (8051c <vTaskIncrementTick+0x104>)
   8046a:	681b      	ldr	r3, [r3, #0]
   8046c:	68db      	ldr	r3, [r3, #12]
   8046e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80470:	889a      	ldrh	r2, [r3, #4]
   80472:	4b2e      	ldr	r3, [pc, #184]	; (8052c <vTaskIncrementTick+0x114>)
   80474:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80476:	4b28      	ldr	r3, [pc, #160]	; (80518 <vTaskIncrementTick+0x100>)
   80478:	881a      	ldrh	r2, [r3, #0]
   8047a:	b292      	uxth	r2, r2
   8047c:	4b2b      	ldr	r3, [pc, #172]	; (8052c <vTaskIncrementTick+0x114>)
   8047e:	881b      	ldrh	r3, [r3, #0]
   80480:	b29b      	uxth	r3, r3
   80482:	429a      	cmp	r2, r3
   80484:	d344      	bcc.n	80510 <vTaskIncrementTick+0xf8>
   80486:	4b25      	ldr	r3, [pc, #148]	; (8051c <vTaskIncrementTick+0x104>)
   80488:	681b      	ldr	r3, [r3, #0]
   8048a:	681b      	ldr	r3, [r3, #0]
   8048c:	b16b      	cbz	r3, 804aa <vTaskIncrementTick+0x92>
   8048e:	4b23      	ldr	r3, [pc, #140]	; (8051c <vTaskIncrementTick+0x104>)
   80490:	681b      	ldr	r3, [r3, #0]
   80492:	68db      	ldr	r3, [r3, #12]
   80494:	68dc      	ldr	r4, [r3, #12]
   80496:	88a2      	ldrh	r2, [r4, #4]
   80498:	4b1f      	ldr	r3, [pc, #124]	; (80518 <vTaskIncrementTick+0x100>)
   8049a:	881b      	ldrh	r3, [r3, #0]
   8049c:	b29b      	uxth	r3, r3
   8049e:	429a      	cmp	r2, r3
   804a0:	d813      	bhi.n	804ca <vTaskIncrementTick+0xb2>
   804a2:	4d23      	ldr	r5, [pc, #140]	; (80530 <vTaskIncrementTick+0x118>)
   804a4:	4e23      	ldr	r6, [pc, #140]	; (80534 <vTaskIncrementTick+0x11c>)
   804a6:	4f24      	ldr	r7, [pc, #144]	; (80538 <vTaskIncrementTick+0x120>)
   804a8:	e013      	b.n	804d2 <vTaskIncrementTick+0xba>
   804aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   804ae:	4b1f      	ldr	r3, [pc, #124]	; (8052c <vTaskIncrementTick+0x114>)
   804b0:	801a      	strh	r2, [r3, #0]
   804b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804b6:	4b19      	ldr	r3, [pc, #100]	; (8051c <vTaskIncrementTick+0x104>)
   804b8:	681b      	ldr	r3, [r3, #0]
   804ba:	68db      	ldr	r3, [r3, #12]
   804bc:	68dc      	ldr	r4, [r3, #12]
   804be:	88a2      	ldrh	r2, [r4, #4]
   804c0:	4b15      	ldr	r3, [pc, #84]	; (80518 <vTaskIncrementTick+0x100>)
   804c2:	881b      	ldrh	r3, [r3, #0]
   804c4:	b29b      	uxth	r3, r3
   804c6:	429a      	cmp	r2, r3
   804c8:	d903      	bls.n	804d2 <vTaskIncrementTick+0xba>
   804ca:	4b18      	ldr	r3, [pc, #96]	; (8052c <vTaskIncrementTick+0x114>)
   804cc:	801a      	strh	r2, [r3, #0]
   804ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804d2:	f104 0804 	add.w	r8, r4, #4
   804d6:	4640      	mov	r0, r8
   804d8:	47a8      	blx	r5
   804da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   804dc:	b113      	cbz	r3, 804e4 <vTaskIncrementTick+0xcc>
   804de:	f104 0018 	add.w	r0, r4, #24
   804e2:	47a8      	blx	r5
   804e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   804e6:	6833      	ldr	r3, [r6, #0]
   804e8:	4298      	cmp	r0, r3
   804ea:	bf88      	it	hi
   804ec:	6030      	strhi	r0, [r6, #0]
   804ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   804f2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   804f6:	4641      	mov	r1, r8
   804f8:	4b10      	ldr	r3, [pc, #64]	; (8053c <vTaskIncrementTick+0x124>)
   804fa:	4798      	blx	r3
   804fc:	4b07      	ldr	r3, [pc, #28]	; (8051c <vTaskIncrementTick+0x104>)
   804fe:	681b      	ldr	r3, [r3, #0]
   80500:	681b      	ldr	r3, [r3, #0]
   80502:	2b00      	cmp	r3, #0
   80504:	d1d7      	bne.n	804b6 <vTaskIncrementTick+0x9e>
   80506:	e7d0      	b.n	804aa <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   80508:	4a0d      	ldr	r2, [pc, #52]	; (80540 <vTaskIncrementTick+0x128>)
   8050a:	6813      	ldr	r3, [r2, #0]
   8050c:	3301      	adds	r3, #1
   8050e:	6013      	str	r3, [r2, #0]
   80510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80514:	20070aa0 	.word	0x20070aa0
   80518:	20070aa4 	.word	0x20070aa4
   8051c:	200709c8 	.word	0x200709c8
   80520:	00080399 	.word	0x00080399
   80524:	20070aa8 	.word	0x20070aa8
   80528:	20070a98 	.word	0x20070a98
   8052c:	20070138 	.word	0x20070138
   80530:	00080351 	.word	0x00080351
   80534:	200709cc 	.word	0x200709cc
   80538:	200709d0 	.word	0x200709d0
   8053c:	00080335 	.word	0x00080335
   80540:	200709c4 	.word	0x200709c4

00080544 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   80544:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   80546:	4b22      	ldr	r3, [pc, #136]	; (805d0 <vTaskSwitchContext+0x8c>)
   80548:	681b      	ldr	r3, [r3, #0]
   8054a:	b96b      	cbnz	r3, 80568 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8054c:	4b21      	ldr	r3, [pc, #132]	; (805d4 <vTaskSwitchContext+0x90>)
   8054e:	681b      	ldr	r3, [r3, #0]
   80550:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80554:	009b      	lsls	r3, r3, #2
   80556:	4a20      	ldr	r2, [pc, #128]	; (805d8 <vTaskSwitchContext+0x94>)
   80558:	58d3      	ldr	r3, [r2, r3]
   8055a:	b9cb      	cbnz	r3, 80590 <vTaskSwitchContext+0x4c>
   8055c:	4b1d      	ldr	r3, [pc, #116]	; (805d4 <vTaskSwitchContext+0x90>)
   8055e:	681b      	ldr	r3, [r3, #0]
   80560:	b143      	cbz	r3, 80574 <vTaskSwitchContext+0x30>
   80562:	4a1c      	ldr	r2, [pc, #112]	; (805d4 <vTaskSwitchContext+0x90>)
   80564:	491c      	ldr	r1, [pc, #112]	; (805d8 <vTaskSwitchContext+0x94>)
   80566:	e009      	b.n	8057c <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   80568:	2201      	movs	r2, #1
   8056a:	4b1c      	ldr	r3, [pc, #112]	; (805dc <vTaskSwitchContext+0x98>)
   8056c:	601a      	str	r2, [r3, #0]
   8056e:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80570:	6813      	ldr	r3, [r2, #0]
   80572:	b91b      	cbnz	r3, 8057c <vTaskSwitchContext+0x38>
   80574:	4b1a      	ldr	r3, [pc, #104]	; (805e0 <vTaskSwitchContext+0x9c>)
   80576:	4798      	blx	r3
   80578:	bf00      	nop
   8057a:	e7fd      	b.n	80578 <vTaskSwitchContext+0x34>
   8057c:	6813      	ldr	r3, [r2, #0]
   8057e:	3b01      	subs	r3, #1
   80580:	6013      	str	r3, [r2, #0]
   80582:	6813      	ldr	r3, [r2, #0]
   80584:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80588:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8058c:	2b00      	cmp	r3, #0
   8058e:	d0ef      	beq.n	80570 <vTaskSwitchContext+0x2c>
   80590:	4b10      	ldr	r3, [pc, #64]	; (805d4 <vTaskSwitchContext+0x90>)
   80592:	681b      	ldr	r3, [r3, #0]
   80594:	4a10      	ldr	r2, [pc, #64]	; (805d8 <vTaskSwitchContext+0x94>)
   80596:	0099      	lsls	r1, r3, #2
   80598:	18c8      	adds	r0, r1, r3
   8059a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   8059e:	6844      	ldr	r4, [r0, #4]
   805a0:	6864      	ldr	r4, [r4, #4]
   805a2:	6044      	str	r4, [r0, #4]
   805a4:	4602      	mov	r2, r0
   805a6:	3208      	adds	r2, #8
   805a8:	4294      	cmp	r4, r2
   805aa:	d106      	bne.n	805ba <vTaskSwitchContext+0x76>
   805ac:	6860      	ldr	r0, [r4, #4]
   805ae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   805b2:	4a09      	ldr	r2, [pc, #36]	; (805d8 <vTaskSwitchContext+0x94>)
   805b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   805b8:	6050      	str	r0, [r2, #4]
   805ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   805be:	4a06      	ldr	r2, [pc, #24]	; (805d8 <vTaskSwitchContext+0x94>)
   805c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   805c4:	685b      	ldr	r3, [r3, #4]
   805c6:	68da      	ldr	r2, [r3, #12]
   805c8:	4b06      	ldr	r3, [pc, #24]	; (805e4 <vTaskSwitchContext+0xa0>)
   805ca:	601a      	str	r2, [r3, #0]
   805cc:	bd10      	pop	{r4, pc}
   805ce:	bf00      	nop
   805d0:	20070aa0 	.word	0x20070aa0
   805d4:	200709cc 	.word	0x200709cc
   805d8:	200709d0 	.word	0x200709d0
   805dc:	20070aac 	.word	0x20070aac
   805e0:	00080399 	.word	0x00080399
   805e4:	20070a9c 	.word	0x20070a9c

000805e8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   805e8:	b4f0      	push	{r4, r5, r6, r7}
   805ea:	b08c      	sub	sp, #48	; 0x30
   805ec:	4607      	mov	r7, r0
   805ee:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   805f0:	ac01      	add	r4, sp, #4
   805f2:	4d11      	ldr	r5, [pc, #68]	; (80638 <pwm_clocks_generate+0x50>)
   805f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   805f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   805f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   805fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   805fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80604:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80606:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80608:	f852 3b04 	ldr.w	r3, [r2], #4
   8060c:	fbb6 f3f3 	udiv	r3, r6, r3
   80610:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80618:	d905      	bls.n	80626 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   8061a:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   8061c:	280b      	cmp	r0, #11
   8061e:	d1f3      	bne.n	80608 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80620:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80624:	e005      	b.n	80632 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80626:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   80628:	bf94      	ite	ls
   8062a:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   8062e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   80632:	b00c      	add	sp, #48	; 0x30
   80634:	bcf0      	pop	{r4, r5, r6, r7}
   80636:	4770      	bx	lr
   80638:	000841ac 	.word	0x000841ac

0008063c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   8063c:	b570      	push	{r4, r5, r6, lr}
   8063e:	4606      	mov	r6, r0
   80640:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80642:	6808      	ldr	r0, [r1, #0]
   80644:	b140      	cbz	r0, 80658 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80646:	6889      	ldr	r1, [r1, #8]
   80648:	4b0e      	ldr	r3, [pc, #56]	; (80684 <pwm_init+0x48>)
   8064a:	4798      	blx	r3
   8064c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8064e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80652:	4298      	cmp	r0, r3
   80654:	d101      	bne.n	8065a <pwm_init+0x1e>
   80656:	e00e      	b.n	80676 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80658:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8065a:	6860      	ldr	r0, [r4, #4]
   8065c:	b140      	cbz	r0, 80670 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8065e:	68a1      	ldr	r1, [r4, #8]
   80660:	4b08      	ldr	r3, [pc, #32]	; (80684 <pwm_init+0x48>)
   80662:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80664:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80668:	4298      	cmp	r0, r3
   8066a:	d007      	beq.n	8067c <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   8066c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80670:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80672:	2000      	movs	r0, #0
   80674:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   80676:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8067a:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   8067c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   80680:	bd70      	pop	{r4, r5, r6, pc}
   80682:	bf00      	nop
   80684:	000805e9 	.word	0x000805e9

00080688 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80688:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8068a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8068c:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8068e:	684c      	ldr	r4, [r1, #4]
   80690:	f004 040f 	and.w	r4, r4, #15
   80694:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80696:	890c      	ldrh	r4, [r1, #8]
   80698:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8069a:	7a8c      	ldrb	r4, [r1, #10]
   8069c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   806a0:	7d8c      	ldrb	r4, [r1, #22]
   806a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   806a6:	7dcc      	ldrb	r4, [r1, #23]
   806a8:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   806ac:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   806ae:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   806b2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   806b6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   806ba:	68ca      	ldr	r2, [r1, #12]
   806bc:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   806c0:	690a      	ldr	r2, [r1, #16]
   806c2:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   806c6:	7d8a      	ldrb	r2, [r1, #22]
   806c8:	b13a      	cbz	r2, 806da <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   806ca:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   806cc:	8b4a      	ldrh	r2, [r1, #26]
   806ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   806d2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   806d6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   806da:	6c84      	ldr	r4, [r0, #72]	; 0x48
   806dc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   806e0:	409a      	lsls	r2, r3
   806e2:	43d2      	mvns	r2, r2
   806e4:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   806e8:	7fcc      	ldrb	r4, [r1, #31]
   806ea:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   806ee:	7f8c      	ldrb	r4, [r1, #30]
   806f0:	409c      	lsls	r4, r3
   806f2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   806f6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   806f8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   806fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
   806fc:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   806fe:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   80702:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80706:	f891 2020 	ldrb.w	r2, [r1, #32]
   8070a:	409a      	lsls	r2, r3
   8070c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   80710:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80712:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80714:	2201      	movs	r2, #1
   80716:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80718:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8071c:	b11c      	cbz	r4, 80726 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   8071e:	6a04      	ldr	r4, [r0, #32]
   80720:	4314      	orrs	r4, r2
   80722:	6204      	str	r4, [r0, #32]
   80724:	e003      	b.n	8072e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80726:	6a04      	ldr	r4, [r0, #32]
   80728:	ea24 0402 	bic.w	r4, r4, r2
   8072c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8072e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80732:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80734:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80736:	bf0c      	ite	eq
   80738:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8073a:	4394      	bicne	r4, r2
   8073c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   8073e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80742:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80744:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80746:	bf0c      	ite	eq
   80748:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   8074c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80750:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80752:	2b03      	cmp	r3, #3
   80754:	d80b      	bhi.n	8076e <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80756:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80758:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8075a:	22ff      	movs	r2, #255	; 0xff
   8075c:	40aa      	lsls	r2, r5
   8075e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80762:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   80766:	40ab      	lsls	r3, r5
   80768:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8076a:	66c3      	str	r3, [r0, #108]	; 0x6c
   8076c:	e00c      	b.n	80788 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   8076e:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80770:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80772:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80774:	24ff      	movs	r4, #255	; 0xff
   80776:	409c      	lsls	r4, r3
   80778:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8077c:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   80780:	fa02 f303 	lsl.w	r3, r2, r3
   80784:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80786:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80788:	2000      	movs	r0, #0
   8078a:	bc70      	pop	{r4, r5, r6}
   8078c:	4770      	bx	lr
   8078e:	bf00      	nop

00080790 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80790:	2301      	movs	r3, #1
   80792:	408b      	lsls	r3, r1
   80794:	6043      	str	r3, [r0, #4]
   80796:	4770      	bx	lr

00080798 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80798:	2301      	movs	r3, #1
   8079a:	408b      	lsls	r3, r1
   8079c:	6083      	str	r3, [r0, #8]
   8079e:	4770      	bx	lr

000807a0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   807a0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   807a2:	23ac      	movs	r3, #172	; 0xac
   807a4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   807a6:	680b      	ldr	r3, [r1, #0]
   807a8:	684a      	ldr	r2, [r1, #4]
   807aa:	fbb3 f3f2 	udiv	r3, r3, r2
   807ae:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   807b0:	1e5c      	subs	r4, r3, #1
   807b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   807b6:	4294      	cmp	r4, r2
   807b8:	d80a      	bhi.n	807d0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   807ba:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   807bc:	688b      	ldr	r3, [r1, #8]
   807be:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   807c0:	f240 2302 	movw	r3, #514	; 0x202
   807c4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   807c8:	2350      	movs	r3, #80	; 0x50
   807ca:	6003      	str	r3, [r0, #0]

	return 0;
   807cc:	2000      	movs	r0, #0
   807ce:	e000      	b.n	807d2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   807d0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   807d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   807d6:	4770      	bx	lr

000807d8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   807d8:	6943      	ldr	r3, [r0, #20]
   807da:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   807de:	bf1a      	itte	ne
   807e0:	61c1      	strne	r1, [r0, #28]
	return 0;
   807e2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   807e4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   807e6:	4770      	bx	lr

000807e8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   807e8:	6943      	ldr	r3, [r0, #20]
   807ea:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   807ee:	bf1d      	ittte	ne
   807f0:	6983      	ldrne	r3, [r0, #24]
   807f2:	700b      	strbne	r3, [r1, #0]
	return 0;
   807f4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   807f6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   807f8:	4770      	bx	lr
   807fa:	bf00      	nop

000807fc <PWMSetup>:
#include <asf.h>
#include "PWMCustom.h"

pwm_channel_t pwm_pin8_instance;

void PWMSetup(){
   807fc:	b500      	push	{lr}
   807fe:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80800:	2024      	movs	r0, #36	; 0x24
   80802:	4b07      	ldr	r3, [pc, #28]	; (80820 <PWMSetup+0x24>)
   80804:	4798      	blx	r3

	pwm_clock_t clock_setting = {
   80806:	4b07      	ldr	r3, [pc, #28]	; (80824 <PWMSetup+0x28>)
   80808:	9301      	str	r3, [sp, #4]
   8080a:	2300      	movs	r3, #0
   8080c:	9302      	str	r3, [sp, #8]
   8080e:	4b06      	ldr	r3, [pc, #24]	; (80828 <PWMSetup+0x2c>)
   80810:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000 * 1000,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
   80812:	4806      	ldr	r0, [pc, #24]	; (8082c <PWMSetup+0x30>)
   80814:	a901      	add	r1, sp, #4
   80816:	4b06      	ldr	r3, [pc, #24]	; (80830 <PWMSetup+0x34>)
   80818:	4798      	blx	r3
}
   8081a:	b005      	add	sp, #20
   8081c:	f85d fb04 	ldr.w	pc, [sp], #4
   80820:	00080f7d 	.word	0x00080f7d
   80824:	000f4240 	.word	0x000f4240
   80828:	0501bd00 	.word	0x0501bd00
   8082c:	40094000 	.word	0x40094000
   80830:	0008063d 	.word	0x0008063d

00080834 <PWMEnableCustomPin>:

void PWMEnableCustomPin(){
   80834:	b538      	push	{r3, r4, r5, lr}
	// PWM on Arduino pin 8
	pwm_channel_disable(PWM, PWM_CHANNEL_7);
   80836:	4c0e      	ldr	r4, [pc, #56]	; (80870 <PWMEnableCustomPin+0x3c>)
   80838:	4620      	mov	r0, r4
   8083a:	2107      	movs	r1, #7
   8083c:	4b0d      	ldr	r3, [pc, #52]	; (80874 <PWMEnableCustomPin+0x40>)
   8083e:	4798      	blx	r3
	pwm_pin8_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80840:	490d      	ldr	r1, [pc, #52]	; (80878 <PWMEnableCustomPin+0x44>)
   80842:	230b      	movs	r3, #11
   80844:	604b      	str	r3, [r1, #4]
	pwm_pin8_instance.ul_period = 100;
   80846:	2364      	movs	r3, #100	; 0x64
   80848:	610b      	str	r3, [r1, #16]
	pwm_pin8_instance.ul_duty = 0;
   8084a:	2300      	movs	r3, #0
   8084c:	60cb      	str	r3, [r1, #12]
	pwm_pin8_instance.channel = PWM_CHANNEL_7;
   8084e:	2507      	movs	r5, #7
   80850:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_pin8_instance);
   80852:	4620      	mov	r0, r4
   80854:	4b09      	ldr	r3, [pc, #36]	; (8087c <PWMEnableCustomPin+0x48>)
   80856:	4798      	blx	r3
	pio_set_peripheral(PIOC, PIO_PERIPH_B, PIO_PC24B_PWML7);
   80858:	4809      	ldr	r0, [pc, #36]	; (80880 <PWMEnableCustomPin+0x4c>)
   8085a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8085e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80862:	4b08      	ldr	r3, [pc, #32]	; (80884 <PWMEnableCustomPin+0x50>)
   80864:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_7);
   80866:	4620      	mov	r0, r4
   80868:	4629      	mov	r1, r5
   8086a:	4b07      	ldr	r3, [pc, #28]	; (80888 <PWMEnableCustomPin+0x54>)
   8086c:	4798      	blx	r3
   8086e:	bd38      	pop	{r3, r4, r5, pc}
   80870:	40094000 	.word	0x40094000
   80874:	00080799 	.word	0x00080799
   80878:	20070bd8 	.word	0x20070bd8
   8087c:	00080689 	.word	0x00080689
   80880:	400e1200 	.word	0x400e1200
   80884:	00080bd9 	.word	0x00080bd9
   80888:	00080791 	.word	0x00080791

0008088c <motorShield_init>:

void PWMDutyCycle(uint8_t value){
	pwm_channel_update_duty(PWM, &pwm_pin8_instance, value);
}

void motorShield_init(void){
   8088c:	b570      	push	{r4, r5, r6, lr}
   8088e:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PIOD);
   80890:	200e      	movs	r0, #14
   80892:	4c0e      	ldr	r4, [pc, #56]	; (808cc <motorShield_init+0x40>)
   80894:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOC);
   80896:	200d      	movs	r0, #13
   80898:	47a0      	blx	r4
	pio_set_output(PIOD, PIO_PD8, HIGH, DISABLE, ENABLE); // Set direction according to "+" and "-" pins on the shield(pin 12 on Due)
   8089a:	2501      	movs	r5, #1
   8089c:	9500      	str	r5, [sp, #0]
   8089e:	480c      	ldr	r0, [pc, #48]	; (808d0 <motorShield_init+0x44>)
   808a0:	f44f 7180 	mov.w	r1, #256	; 0x100
   808a4:	462a      	mov	r2, r5
   808a6:	2300      	movs	r3, #0
   808a8:	4e0a      	ldr	r6, [pc, #40]	; (808d4 <motorShield_init+0x48>)
   808aa:	47b0      	blx	r6
	pio_set_output(PIOC, PIO_PC21, LOW, DISABLE, ENABLE); // Disable break-function on the shield(pin 9 on Due)
   808ac:	9500      	str	r5, [sp, #0]
   808ae:	480a      	ldr	r0, [pc, #40]	; (808d8 <motorShield_init+0x4c>)
   808b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   808b4:	2200      	movs	r2, #0
   808b6:	4613      	mov	r3, r2
   808b8:	47b0      	blx	r6
	
	pmc_enable_periph_clk(ID_PWM);
   808ba:	2024      	movs	r0, #36	; 0x24
   808bc:	47a0      	blx	r4
	pwm_channel_disable(PWM, PWM_CHANNEL_7);
   808be:	4807      	ldr	r0, [pc, #28]	; (808dc <motorShield_init+0x50>)
   808c0:	2107      	movs	r1, #7
   808c2:	4b07      	ldr	r3, [pc, #28]	; (808e0 <motorShield_init+0x54>)
   808c4:	4798      	blx	r3
   808c6:	b002      	add	sp, #8
   808c8:	bd70      	pop	{r4, r5, r6, pc}
   808ca:	bf00      	nop
   808cc:	00080f7d 	.word	0x00080f7d
   808d0:	400e1400 	.word	0x400e1400
   808d4:	00080c4d 	.word	0x00080c4d
   808d8:	400e1200 	.word	0x400e1200
   808dc:	40094000 	.word	0x40094000
   808e0:	00080799 	.word	0x00080799

000808e4 <testSend>:
	}

	printf("%i\n", testByte);
}
void testSend()
{
   808e4:	b508      	push	{r3, lr}
	aRead = ADCReadSensor();
   808e6:	4b06      	ldr	r3, [pc, #24]	; (80900 <testSend+0x1c>)
   808e8:	4798      	blx	r3
   808ea:	4601      	mov	r1, r0
   808ec:	4b05      	ldr	r3, [pc, #20]	; (80904 <testSend+0x20>)
   808ee:	6018      	str	r0, [r3, #0]
	printf("%i\n", aRead);
   808f0:	4805      	ldr	r0, [pc, #20]	; (80908 <testSend+0x24>)
   808f2:	4b06      	ldr	r3, [pc, #24]	; (8090c <testSend+0x28>)
   808f4:	4798      	blx	r3
	delay_ms(100);
   808f6:	4806      	ldr	r0, [pc, #24]	; (80910 <testSend+0x2c>)
   808f8:	4b06      	ldr	r3, [pc, #24]	; (80914 <testSend+0x30>)
   808fa:	4798      	blx	r3
   808fc:	bd08      	pop	{r3, pc}
   808fe:	bf00      	nop
   80900:	000801b5 	.word	0x000801b5
   80904:	20070bc4 	.word	0x20070bc4
   80908:	000841e8 	.word	0x000841e8
   8090c:	0008129d 	.word	0x0008129d
   80910:	000927c0 	.word	0x000927c0
   80914:	20070001 	.word	0x20070001

00080918 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80918:	b5f0      	push	{r4, r5, r6, r7, lr}
   8091a:	b083      	sub	sp, #12
   8091c:	4604      	mov	r4, r0
   8091e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80920:	2300      	movs	r3, #0
   80922:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80924:	4b1f      	ldr	r3, [pc, #124]	; (809a4 <usart_serial_getchar+0x8c>)
   80926:	4298      	cmp	r0, r3
   80928:	d107      	bne.n	8093a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8092a:	461f      	mov	r7, r3
   8092c:	4e1e      	ldr	r6, [pc, #120]	; (809a8 <usart_serial_getchar+0x90>)
   8092e:	4638      	mov	r0, r7
   80930:	4629      	mov	r1, r5
   80932:	47b0      	blx	r6
   80934:	2800      	cmp	r0, #0
   80936:	d1fa      	bne.n	8092e <usart_serial_getchar+0x16>
   80938:	e019      	b.n	8096e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8093a:	4b1c      	ldr	r3, [pc, #112]	; (809ac <usart_serial_getchar+0x94>)
   8093c:	4298      	cmp	r0, r3
   8093e:	d109      	bne.n	80954 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80940:	461f      	mov	r7, r3
   80942:	4e1b      	ldr	r6, [pc, #108]	; (809b0 <usart_serial_getchar+0x98>)
   80944:	4638      	mov	r0, r7
   80946:	a901      	add	r1, sp, #4
   80948:	47b0      	blx	r6
   8094a:	2800      	cmp	r0, #0
   8094c:	d1fa      	bne.n	80944 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8094e:	9b01      	ldr	r3, [sp, #4]
   80950:	702b      	strb	r3, [r5, #0]
   80952:	e019      	b.n	80988 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80954:	4b17      	ldr	r3, [pc, #92]	; (809b4 <usart_serial_getchar+0x9c>)
   80956:	4298      	cmp	r0, r3
   80958:	d109      	bne.n	8096e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8095a:	461e      	mov	r6, r3
   8095c:	4c14      	ldr	r4, [pc, #80]	; (809b0 <usart_serial_getchar+0x98>)
   8095e:	4630      	mov	r0, r6
   80960:	a901      	add	r1, sp, #4
   80962:	47a0      	blx	r4
   80964:	2800      	cmp	r0, #0
   80966:	d1fa      	bne.n	8095e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80968:	9b01      	ldr	r3, [sp, #4]
   8096a:	702b      	strb	r3, [r5, #0]
   8096c:	e018      	b.n	809a0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8096e:	4b12      	ldr	r3, [pc, #72]	; (809b8 <usart_serial_getchar+0xa0>)
   80970:	429c      	cmp	r4, r3
   80972:	d109      	bne.n	80988 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80974:	461e      	mov	r6, r3
   80976:	4c0e      	ldr	r4, [pc, #56]	; (809b0 <usart_serial_getchar+0x98>)
   80978:	4630      	mov	r0, r6
   8097a:	a901      	add	r1, sp, #4
   8097c:	47a0      	blx	r4
   8097e:	2800      	cmp	r0, #0
   80980:	d1fa      	bne.n	80978 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80982:	9b01      	ldr	r3, [sp, #4]
   80984:	702b      	strb	r3, [r5, #0]
   80986:	e00b      	b.n	809a0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80988:	4b0c      	ldr	r3, [pc, #48]	; (809bc <usart_serial_getchar+0xa4>)
   8098a:	429c      	cmp	r4, r3
   8098c:	d108      	bne.n	809a0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8098e:	461e      	mov	r6, r3
   80990:	4c07      	ldr	r4, [pc, #28]	; (809b0 <usart_serial_getchar+0x98>)
   80992:	4630      	mov	r0, r6
   80994:	a901      	add	r1, sp, #4
   80996:	47a0      	blx	r4
   80998:	2800      	cmp	r0, #0
   8099a:	d1fa      	bne.n	80992 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   8099c:	9b01      	ldr	r3, [sp, #4]
   8099e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   809a0:	b003      	add	sp, #12
   809a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   809a4:	400e0800 	.word	0x400e0800
   809a8:	000807e9 	.word	0x000807e9
   809ac:	40098000 	.word	0x40098000
   809b0:	00080235 	.word	0x00080235
   809b4:	4009c000 	.word	0x4009c000
   809b8:	400a0000 	.word	0x400a0000
   809bc:	400a4000 	.word	0x400a4000

000809c0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   809c0:	b570      	push	{r4, r5, r6, lr}
   809c2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   809c4:	4b1e      	ldr	r3, [pc, #120]	; (80a40 <usart_serial_putchar+0x80>)
   809c6:	4298      	cmp	r0, r3
   809c8:	d108      	bne.n	809dc <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   809ca:	461e      	mov	r6, r3
   809cc:	4d1d      	ldr	r5, [pc, #116]	; (80a44 <usart_serial_putchar+0x84>)
   809ce:	4630      	mov	r0, r6
   809d0:	4621      	mov	r1, r4
   809d2:	47a8      	blx	r5
   809d4:	2800      	cmp	r0, #0
   809d6:	d1fa      	bne.n	809ce <usart_serial_putchar+0xe>
		return 1;
   809d8:	2001      	movs	r0, #1
   809da:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   809dc:	4b1a      	ldr	r3, [pc, #104]	; (80a48 <usart_serial_putchar+0x88>)
   809de:	4298      	cmp	r0, r3
   809e0:	d108      	bne.n	809f4 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   809e2:	461e      	mov	r6, r3
   809e4:	4d19      	ldr	r5, [pc, #100]	; (80a4c <usart_serial_putchar+0x8c>)
   809e6:	4630      	mov	r0, r6
   809e8:	4621      	mov	r1, r4
   809ea:	47a8      	blx	r5
   809ec:	2800      	cmp	r0, #0
   809ee:	d1fa      	bne.n	809e6 <usart_serial_putchar+0x26>
		return 1;
   809f0:	2001      	movs	r0, #1
   809f2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   809f4:	4b16      	ldr	r3, [pc, #88]	; (80a50 <usart_serial_putchar+0x90>)
   809f6:	4298      	cmp	r0, r3
   809f8:	d108      	bne.n	80a0c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   809fa:	461e      	mov	r6, r3
   809fc:	4d13      	ldr	r5, [pc, #76]	; (80a4c <usart_serial_putchar+0x8c>)
   809fe:	4630      	mov	r0, r6
   80a00:	4621      	mov	r1, r4
   80a02:	47a8      	blx	r5
   80a04:	2800      	cmp	r0, #0
   80a06:	d1fa      	bne.n	809fe <usart_serial_putchar+0x3e>
		return 1;
   80a08:	2001      	movs	r0, #1
   80a0a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80a0c:	4b11      	ldr	r3, [pc, #68]	; (80a54 <usart_serial_putchar+0x94>)
   80a0e:	4298      	cmp	r0, r3
   80a10:	d108      	bne.n	80a24 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80a12:	461e      	mov	r6, r3
   80a14:	4d0d      	ldr	r5, [pc, #52]	; (80a4c <usart_serial_putchar+0x8c>)
   80a16:	4630      	mov	r0, r6
   80a18:	4621      	mov	r1, r4
   80a1a:	47a8      	blx	r5
   80a1c:	2800      	cmp	r0, #0
   80a1e:	d1fa      	bne.n	80a16 <usart_serial_putchar+0x56>
		return 1;
   80a20:	2001      	movs	r0, #1
   80a22:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80a24:	4b0c      	ldr	r3, [pc, #48]	; (80a58 <usart_serial_putchar+0x98>)
   80a26:	4298      	cmp	r0, r3
   80a28:	d108      	bne.n	80a3c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80a2a:	461e      	mov	r6, r3
   80a2c:	4d07      	ldr	r5, [pc, #28]	; (80a4c <usart_serial_putchar+0x8c>)
   80a2e:	4630      	mov	r0, r6
   80a30:	4621      	mov	r1, r4
   80a32:	47a8      	blx	r5
   80a34:	2800      	cmp	r0, #0
   80a36:	d1fa      	bne.n	80a2e <usart_serial_putchar+0x6e>
		return 1;
   80a38:	2001      	movs	r0, #1
   80a3a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80a3c:	2000      	movs	r0, #0
}
   80a3e:	bd70      	pop	{r4, r5, r6, pc}
   80a40:	400e0800 	.word	0x400e0800
   80a44:	000807d9 	.word	0x000807d9
   80a48:	40098000 	.word	0x40098000
   80a4c:	00080221 	.word	0x00080221
   80a50:	4009c000 	.word	0x4009c000
   80a54:	400a0000 	.word	0x400a0000
   80a58:	400a4000 	.word	0x400a4000

00080a5c <configure_console>:
uart_read(CONF_UART, &value);
printf("%c", '4');
return value;
}

void configure_console(void){
   80a5c:	b530      	push	{r4, r5, lr}
   80a5e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80a60:	2008      	movs	r0, #8
   80a62:	4d18      	ldr	r5, [pc, #96]	; (80ac4 <configure_console+0x68>)
   80a64:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80a66:	4c18      	ldr	r4, [pc, #96]	; (80ac8 <configure_console+0x6c>)
   80a68:	4b18      	ldr	r3, [pc, #96]	; (80acc <configure_console+0x70>)
   80a6a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80a6c:	4a18      	ldr	r2, [pc, #96]	; (80ad0 <configure_console+0x74>)
   80a6e:	4b19      	ldr	r3, [pc, #100]	; (80ad4 <configure_console+0x78>)
   80a70:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80a72:	4a19      	ldr	r2, [pc, #100]	; (80ad8 <configure_console+0x7c>)
   80a74:	4b19      	ldr	r3, [pc, #100]	; (80adc <configure_console+0x80>)
   80a76:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80a78:	4b19      	ldr	r3, [pc, #100]	; (80ae0 <configure_console+0x84>)
   80a7a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80a7c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80a80:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a86:	9303      	str	r3, [sp, #12]
   80a88:	2008      	movs	r0, #8
   80a8a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80a8c:	4620      	mov	r0, r4
   80a8e:	a901      	add	r1, sp, #4
   80a90:	4b14      	ldr	r3, [pc, #80]	; (80ae4 <configure_console+0x88>)
   80a92:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80a94:	4d14      	ldr	r5, [pc, #80]	; (80ae8 <configure_console+0x8c>)
   80a96:	682b      	ldr	r3, [r5, #0]
   80a98:	6898      	ldr	r0, [r3, #8]
   80a9a:	2100      	movs	r1, #0
   80a9c:	4c13      	ldr	r4, [pc, #76]	; (80aec <configure_console+0x90>)
   80a9e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80aa0:	682b      	ldr	r3, [r5, #0]
   80aa2:	6858      	ldr	r0, [r3, #4]
   80aa4:	2100      	movs	r1, #0
   80aa6:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80aa8:	4b11      	ldr	r3, [pc, #68]	; (80af0 <configure_console+0x94>)
   80aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
   80aae:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80ab0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80ab2:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80ab8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80abe:	671a      	str	r2, [r3, #112]	; 0x70
	// Configure console UART.
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	// configure RX0 pin as pull-up otherwise it won't receive anything (only receive 0)
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
}
   80ac0:	b005      	add	sp, #20
   80ac2:	bd30      	pop	{r4, r5, pc}
   80ac4:	00080f7d 	.word	0x00080f7d
   80ac8:	400e0800 	.word	0x400e0800
   80acc:	20070b60 	.word	0x20070b60
   80ad0:	000809c1 	.word	0x000809c1
   80ad4:	20070b5c 	.word	0x20070b5c
   80ad8:	00080919 	.word	0x00080919
   80adc:	20070b58 	.word	0x20070b58
   80ae0:	0501bd00 	.word	0x0501bd00
   80ae4:	000807a1 	.word	0x000807a1
   80ae8:	20070568 	.word	0x20070568
   80aec:	0008144d 	.word	0x0008144d
   80af0:	400e0e00 	.word	0x400e0e00

00080af4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80af4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80af6:	480e      	ldr	r0, [pc, #56]	; (80b30 <sysclk_init+0x3c>)
   80af8:	4b0e      	ldr	r3, [pc, #56]	; (80b34 <sysclk_init+0x40>)
   80afa:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80afc:	2000      	movs	r0, #0
   80afe:	213e      	movs	r1, #62	; 0x3e
   80b00:	4b0d      	ldr	r3, [pc, #52]	; (80b38 <sysclk_init+0x44>)
   80b02:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80b04:	4c0d      	ldr	r4, [pc, #52]	; (80b3c <sysclk_init+0x48>)
   80b06:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80b08:	2800      	cmp	r0, #0
   80b0a:	d0fc      	beq.n	80b06 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80b0c:	4b0c      	ldr	r3, [pc, #48]	; (80b40 <sysclk_init+0x4c>)
   80b0e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80b10:	4a0c      	ldr	r2, [pc, #48]	; (80b44 <sysclk_init+0x50>)
   80b12:	4b0d      	ldr	r3, [pc, #52]	; (80b48 <sysclk_init+0x54>)
   80b14:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80b16:	4c0d      	ldr	r4, [pc, #52]	; (80b4c <sysclk_init+0x58>)
   80b18:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80b1a:	2800      	cmp	r0, #0
   80b1c:	d0fc      	beq.n	80b18 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80b1e:	2010      	movs	r0, #16
   80b20:	4b0b      	ldr	r3, [pc, #44]	; (80b50 <sysclk_init+0x5c>)
   80b22:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80b24:	4b0b      	ldr	r3, [pc, #44]	; (80b54 <sysclk_init+0x60>)
   80b26:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80b28:	4801      	ldr	r0, [pc, #4]	; (80b30 <sysclk_init+0x3c>)
   80b2a:	4b02      	ldr	r3, [pc, #8]	; (80b34 <sysclk_init+0x40>)
   80b2c:	4798      	blx	r3
   80b2e:	bd10      	pop	{r4, pc}
   80b30:	0501bd00 	.word	0x0501bd00
   80b34:	200700b1 	.word	0x200700b1
   80b38:	00080ef9 	.word	0x00080ef9
   80b3c:	00080f4d 	.word	0x00080f4d
   80b40:	00080f5d 	.word	0x00080f5d
   80b44:	200d3f01 	.word	0x200d3f01
   80b48:	400e0600 	.word	0x400e0600
   80b4c:	00080f6d 	.word	0x00080f6d
   80b50:	00080e91 	.word	0x00080e91
   80b54:	00081085 	.word	0x00081085

00080b58 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80b58:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80b5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80b5e:	4b16      	ldr	r3, [pc, #88]	; (80bb8 <board_init+0x60>)
   80b60:	605a      	str	r2, [r3, #4]
   80b62:	200b      	movs	r0, #11
   80b64:	4c15      	ldr	r4, [pc, #84]	; (80bbc <board_init+0x64>)
   80b66:	47a0      	blx	r4
   80b68:	200c      	movs	r0, #12
   80b6a:	47a0      	blx	r4
   80b6c:	200d      	movs	r0, #13
   80b6e:	47a0      	blx	r4
   80b70:	200e      	movs	r0, #14
   80b72:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80b74:	203b      	movs	r0, #59	; 0x3b
   80b76:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80b7a:	4c11      	ldr	r4, [pc, #68]	; (80bc0 <board_init+0x68>)
   80b7c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80b7e:	2055      	movs	r0, #85	; 0x55
   80b80:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80b84:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80b86:	2056      	movs	r0, #86	; 0x56
   80b88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80b8c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80b8e:	2068      	movs	r0, #104	; 0x68
   80b90:	490c      	ldr	r1, [pc, #48]	; (80bc4 <board_init+0x6c>)
   80b92:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80b94:	205c      	movs	r0, #92	; 0x5c
   80b96:	490c      	ldr	r1, [pc, #48]	; (80bc8 <board_init+0x70>)
   80b98:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80b9a:	480c      	ldr	r0, [pc, #48]	; (80bcc <board_init+0x74>)
   80b9c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80ba0:	4a0b      	ldr	r2, [pc, #44]	; (80bd0 <board_init+0x78>)
   80ba2:	4b0c      	ldr	r3, [pc, #48]	; (80bd4 <board_init+0x7c>)
   80ba4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80ba6:	202b      	movs	r0, #43	; 0x2b
   80ba8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bac:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80bae:	202a      	movs	r0, #42	; 0x2a
   80bb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bb4:	47a0      	blx	r4
   80bb6:	bd10      	pop	{r4, pc}
   80bb8:	400e1a50 	.word	0x400e1a50
   80bbc:	00080f7d 	.word	0x00080f7d
   80bc0:	00080c7d 	.word	0x00080c7d
   80bc4:	28000079 	.word	0x28000079
   80bc8:	28000001 	.word	0x28000001
   80bcc:	400e0e00 	.word	0x400e0e00
   80bd0:	08000001 	.word	0x08000001
   80bd4:	00080d51 	.word	0x00080d51

00080bd8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80bd8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80bda:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80bde:	d016      	beq.n	80c0e <pio_set_peripheral+0x36>
   80be0:	d804      	bhi.n	80bec <pio_set_peripheral+0x14>
   80be2:	b1c1      	cbz	r1, 80c16 <pio_set_peripheral+0x3e>
   80be4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80be8:	d00a      	beq.n	80c00 <pio_set_peripheral+0x28>
   80bea:	e013      	b.n	80c14 <pio_set_peripheral+0x3c>
   80bec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80bf0:	d011      	beq.n	80c16 <pio_set_peripheral+0x3e>
   80bf2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80bf6:	d00e      	beq.n	80c16 <pio_set_peripheral+0x3e>
   80bf8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80bfc:	d10a      	bne.n	80c14 <pio_set_peripheral+0x3c>
   80bfe:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80c00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80c02:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80c04:	400b      	ands	r3, r1
   80c06:	ea23 0302 	bic.w	r3, r3, r2
   80c0a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80c0c:	e002      	b.n	80c14 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80c0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80c10:	4313      	orrs	r3, r2
   80c12:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80c14:	6042      	str	r2, [r0, #4]
   80c16:	4770      	bx	lr

00080c18 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80c18:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80c1a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80c1e:	bf14      	ite	ne
   80c20:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c22:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80c24:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80c28:	bf14      	ite	ne
   80c2a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80c2c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80c2e:	f012 0f02 	tst.w	r2, #2
   80c32:	d002      	beq.n	80c3a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80c34:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80c38:	e004      	b.n	80c44 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80c3a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80c3e:	bf18      	it	ne
   80c40:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80c44:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80c46:	6001      	str	r1, [r0, #0]
   80c48:	4770      	bx	lr
   80c4a:	bf00      	nop

00080c4c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80c4c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80c4e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80c50:	9c01      	ldr	r4, [sp, #4]
   80c52:	b10c      	cbz	r4, 80c58 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80c54:	6641      	str	r1, [r0, #100]	; 0x64
   80c56:	e000      	b.n	80c5a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c58:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80c5a:	b10b      	cbz	r3, 80c60 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80c5c:	6501      	str	r1, [r0, #80]	; 0x50
   80c5e:	e000      	b.n	80c62 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80c60:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80c62:	b10a      	cbz	r2, 80c68 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80c64:	6301      	str	r1, [r0, #48]	; 0x30
   80c66:	e000      	b.n	80c6a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80c68:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80c6a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80c6c:	6001      	str	r1, [r0, #0]
}
   80c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80c72:	4770      	bx	lr

00080c74 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80c74:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80c76:	4770      	bx	lr

00080c78 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80c78:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80c7a:	4770      	bx	lr

00080c7c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80c7c:	b570      	push	{r4, r5, r6, lr}
   80c7e:	b082      	sub	sp, #8
   80c80:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80c82:	0943      	lsrs	r3, r0, #5
   80c84:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80c88:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80c8c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80c8e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80c92:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80c96:	d030      	beq.n	80cfa <pio_configure_pin+0x7e>
   80c98:	d806      	bhi.n	80ca8 <pio_configure_pin+0x2c>
   80c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80c9e:	d00a      	beq.n	80cb6 <pio_configure_pin+0x3a>
   80ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ca4:	d018      	beq.n	80cd8 <pio_configure_pin+0x5c>
   80ca6:	e049      	b.n	80d3c <pio_configure_pin+0xc0>
   80ca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80cac:	d030      	beq.n	80d10 <pio_configure_pin+0x94>
   80cae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80cb2:	d02d      	beq.n	80d10 <pio_configure_pin+0x94>
   80cb4:	e042      	b.n	80d3c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80cb6:	f000 001f 	and.w	r0, r0, #31
   80cba:	2601      	movs	r6, #1
   80cbc:	4086      	lsls	r6, r0
   80cbe:	4620      	mov	r0, r4
   80cc0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80cc4:	4632      	mov	r2, r6
   80cc6:	4b1f      	ldr	r3, [pc, #124]	; (80d44 <pio_configure_pin+0xc8>)
   80cc8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80cca:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80cce:	bf14      	ite	ne
   80cd0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80cd2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80cd4:	2001      	movs	r0, #1
   80cd6:	e032      	b.n	80d3e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80cd8:	f000 001f 	and.w	r0, r0, #31
   80cdc:	2601      	movs	r6, #1
   80cde:	4086      	lsls	r6, r0
   80ce0:	4620      	mov	r0, r4
   80ce2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ce6:	4632      	mov	r2, r6
   80ce8:	4b16      	ldr	r3, [pc, #88]	; (80d44 <pio_configure_pin+0xc8>)
   80cea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80cec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80cf0:	bf14      	ite	ne
   80cf2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80cf4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80cf6:	2001      	movs	r0, #1
   80cf8:	e021      	b.n	80d3e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80cfa:	f000 031f 	and.w	r3, r0, #31
   80cfe:	2601      	movs	r6, #1
   80d00:	4620      	mov	r0, r4
   80d02:	fa06 f103 	lsl.w	r1, r6, r3
   80d06:	462a      	mov	r2, r5
   80d08:	4b0f      	ldr	r3, [pc, #60]	; (80d48 <pio_configure_pin+0xcc>)
   80d0a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80d0c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80d0e:	e016      	b.n	80d3e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80d10:	f000 031f 	and.w	r3, r0, #31
   80d14:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80d16:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80d1a:	ea05 0106 	and.w	r1, r5, r6
   80d1e:	9100      	str	r1, [sp, #0]
   80d20:	4620      	mov	r0, r4
   80d22:	fa06 f103 	lsl.w	r1, r6, r3
   80d26:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80d2a:	bf14      	ite	ne
   80d2c:	2200      	movne	r2, #0
   80d2e:	2201      	moveq	r2, #1
   80d30:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80d34:	4c05      	ldr	r4, [pc, #20]	; (80d4c <pio_configure_pin+0xd0>)
   80d36:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80d38:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80d3a:	e000      	b.n	80d3e <pio_configure_pin+0xc2>

	default:
		return 0;
   80d3c:	2000      	movs	r0, #0
	}

	return 1;
}
   80d3e:	b002      	add	sp, #8
   80d40:	bd70      	pop	{r4, r5, r6, pc}
   80d42:	bf00      	nop
   80d44:	00080bd9 	.word	0x00080bd9
   80d48:	00080c19 	.word	0x00080c19
   80d4c:	00080c4d 	.word	0x00080c4d

00080d50 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80d50:	b570      	push	{r4, r5, r6, lr}
   80d52:	b082      	sub	sp, #8
   80d54:	4606      	mov	r6, r0
   80d56:	460d      	mov	r5, r1
   80d58:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80d5a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80d5e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80d62:	d026      	beq.n	80db2 <pio_configure_pin_group+0x62>
   80d64:	d806      	bhi.n	80d74 <pio_configure_pin_group+0x24>
   80d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80d6a:	d00a      	beq.n	80d82 <pio_configure_pin_group+0x32>
   80d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80d70:	d013      	beq.n	80d9a <pio_configure_pin_group+0x4a>
   80d72:	e034      	b.n	80dde <pio_configure_pin_group+0x8e>
   80d74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80d78:	d01f      	beq.n	80dba <pio_configure_pin_group+0x6a>
   80d7a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80d7e:	d01c      	beq.n	80dba <pio_configure_pin_group+0x6a>
   80d80:	e02d      	b.n	80dde <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80d82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d86:	462a      	mov	r2, r5
   80d88:	4b16      	ldr	r3, [pc, #88]	; (80de4 <pio_configure_pin_group+0x94>)
   80d8a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80d8c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80d90:	bf14      	ite	ne
   80d92:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80d94:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80d96:	2001      	movs	r0, #1
   80d98:	e022      	b.n	80de0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80d9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d9e:	462a      	mov	r2, r5
   80da0:	4b10      	ldr	r3, [pc, #64]	; (80de4 <pio_configure_pin_group+0x94>)
   80da2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80da4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80da8:	bf14      	ite	ne
   80daa:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80dac:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80dae:	2001      	movs	r0, #1
   80db0:	e016      	b.n	80de0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80db2:	4b0d      	ldr	r3, [pc, #52]	; (80de8 <pio_configure_pin_group+0x98>)
   80db4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80db6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80db8:	e012      	b.n	80de0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80dba:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80dbe:	f004 0301 	and.w	r3, r4, #1
   80dc2:	9300      	str	r3, [sp, #0]
   80dc4:	4630      	mov	r0, r6
   80dc6:	4629      	mov	r1, r5
   80dc8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80dcc:	bf14      	ite	ne
   80dce:	2200      	movne	r2, #0
   80dd0:	2201      	moveq	r2, #1
   80dd2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80dd6:	4c05      	ldr	r4, [pc, #20]	; (80dec <pio_configure_pin_group+0x9c>)
   80dd8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80dda:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ddc:	e000      	b.n	80de0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80dde:	2000      	movs	r0, #0
	}

	return 1;
}
   80de0:	b002      	add	sp, #8
   80de2:	bd70      	pop	{r4, r5, r6, pc}
   80de4:	00080bd9 	.word	0x00080bd9
   80de8:	00080c19 	.word	0x00080c19
   80dec:	00080c4d 	.word	0x00080c4d

00080df0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80df4:	4604      	mov	r4, r0
   80df6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80df8:	4b0e      	ldr	r3, [pc, #56]	; (80e34 <pio_handler_process+0x44>)
   80dfa:	4798      	blx	r3
   80dfc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80dfe:	4620      	mov	r0, r4
   80e00:	4b0d      	ldr	r3, [pc, #52]	; (80e38 <pio_handler_process+0x48>)
   80e02:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80e04:	4005      	ands	r5, r0
   80e06:	d013      	beq.n	80e30 <pio_handler_process+0x40>
   80e08:	4c0c      	ldr	r4, [pc, #48]	; (80e3c <pio_handler_process+0x4c>)
   80e0a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80e0e:	6823      	ldr	r3, [r4, #0]
   80e10:	4543      	cmp	r3, r8
   80e12:	d108      	bne.n	80e26 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80e14:	6861      	ldr	r1, [r4, #4]
   80e16:	4229      	tst	r1, r5
   80e18:	d005      	beq.n	80e26 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80e1a:	68e3      	ldr	r3, [r4, #12]
   80e1c:	4640      	mov	r0, r8
   80e1e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80e20:	6863      	ldr	r3, [r4, #4]
   80e22:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80e26:	42b4      	cmp	r4, r6
   80e28:	d002      	beq.n	80e30 <pio_handler_process+0x40>
   80e2a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80e2c:	2d00      	cmp	r5, #0
   80e2e:	d1ee      	bne.n	80e0e <pio_handler_process+0x1e>
   80e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e34:	00080c75 	.word	0x00080c75
   80e38:	00080c79 	.word	0x00080c79
   80e3c:	20070ab0 	.word	0x20070ab0

00080e40 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80e40:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80e42:	4802      	ldr	r0, [pc, #8]	; (80e4c <PIOA_Handler+0xc>)
   80e44:	210b      	movs	r1, #11
   80e46:	4b02      	ldr	r3, [pc, #8]	; (80e50 <PIOA_Handler+0x10>)
   80e48:	4798      	blx	r3
   80e4a:	bd08      	pop	{r3, pc}
   80e4c:	400e0e00 	.word	0x400e0e00
   80e50:	00080df1 	.word	0x00080df1

00080e54 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80e54:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80e56:	4802      	ldr	r0, [pc, #8]	; (80e60 <PIOB_Handler+0xc>)
   80e58:	210c      	movs	r1, #12
   80e5a:	4b02      	ldr	r3, [pc, #8]	; (80e64 <PIOB_Handler+0x10>)
   80e5c:	4798      	blx	r3
   80e5e:	bd08      	pop	{r3, pc}
   80e60:	400e1000 	.word	0x400e1000
   80e64:	00080df1 	.word	0x00080df1

00080e68 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80e68:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80e6a:	4802      	ldr	r0, [pc, #8]	; (80e74 <PIOC_Handler+0xc>)
   80e6c:	210d      	movs	r1, #13
   80e6e:	4b02      	ldr	r3, [pc, #8]	; (80e78 <PIOC_Handler+0x10>)
   80e70:	4798      	blx	r3
   80e72:	bd08      	pop	{r3, pc}
   80e74:	400e1200 	.word	0x400e1200
   80e78:	00080df1 	.word	0x00080df1

00080e7c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80e7c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80e7e:	4802      	ldr	r0, [pc, #8]	; (80e88 <PIOD_Handler+0xc>)
   80e80:	210e      	movs	r1, #14
   80e82:	4b02      	ldr	r3, [pc, #8]	; (80e8c <PIOD_Handler+0x10>)
   80e84:	4798      	blx	r3
   80e86:	bd08      	pop	{r3, pc}
   80e88:	400e1400 	.word	0x400e1400
   80e8c:	00080df1 	.word	0x00080df1

00080e90 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80e90:	4a18      	ldr	r2, [pc, #96]	; (80ef4 <pmc_switch_mck_to_pllack+0x64>)
   80e92:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80e98:	4318      	orrs	r0, r3
   80e9a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80e9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80e9e:	f013 0f08 	tst.w	r3, #8
   80ea2:	d003      	beq.n	80eac <pmc_switch_mck_to_pllack+0x1c>
   80ea4:	e009      	b.n	80eba <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ea6:	3b01      	subs	r3, #1
   80ea8:	d103      	bne.n	80eb2 <pmc_switch_mck_to_pllack+0x22>
   80eaa:	e01e      	b.n	80eea <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80eac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80eb0:	4910      	ldr	r1, [pc, #64]	; (80ef4 <pmc_switch_mck_to_pllack+0x64>)
   80eb2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80eb4:	f012 0f08 	tst.w	r2, #8
   80eb8:	d0f5      	beq.n	80ea6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80eba:	4a0e      	ldr	r2, [pc, #56]	; (80ef4 <pmc_switch_mck_to_pllack+0x64>)
   80ebc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80ebe:	f023 0303 	bic.w	r3, r3, #3
   80ec2:	f043 0302 	orr.w	r3, r3, #2
   80ec6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ec8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80eca:	f010 0008 	ands.w	r0, r0, #8
   80ece:	d004      	beq.n	80eda <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80ed0:	2000      	movs	r0, #0
   80ed2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ed4:	3b01      	subs	r3, #1
   80ed6:	d103      	bne.n	80ee0 <pmc_switch_mck_to_pllack+0x50>
   80ed8:	e009      	b.n	80eee <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80ede:	4905      	ldr	r1, [pc, #20]	; (80ef4 <pmc_switch_mck_to_pllack+0x64>)
   80ee0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ee2:	f012 0f08 	tst.w	r2, #8
   80ee6:	d0f5      	beq.n	80ed4 <pmc_switch_mck_to_pllack+0x44>
   80ee8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80eea:	2001      	movs	r0, #1
   80eec:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80eee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80ef0:	4770      	bx	lr
   80ef2:	bf00      	nop
   80ef4:	400e0600 	.word	0x400e0600

00080ef8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80ef8:	b138      	cbz	r0, 80f0a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80efa:	4911      	ldr	r1, [pc, #68]	; (80f40 <pmc_switch_mainck_to_xtal+0x48>)
   80efc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80efe:	4a11      	ldr	r2, [pc, #68]	; (80f44 <pmc_switch_mainck_to_xtal+0x4c>)
   80f00:	401a      	ands	r2, r3
   80f02:	4b11      	ldr	r3, [pc, #68]	; (80f48 <pmc_switch_mainck_to_xtal+0x50>)
   80f04:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80f06:	620b      	str	r3, [r1, #32]
   80f08:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80f0a:	4a0d      	ldr	r2, [pc, #52]	; (80f40 <pmc_switch_mainck_to_xtal+0x48>)
   80f0c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80f0e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80f12:	f023 0303 	bic.w	r3, r3, #3
   80f16:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80f1a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80f1e:	0209      	lsls	r1, r1, #8
   80f20:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80f22:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80f24:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80f26:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80f28:	f013 0f01 	tst.w	r3, #1
   80f2c:	d0fb      	beq.n	80f26 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80f2e:	4a04      	ldr	r2, [pc, #16]	; (80f40 <pmc_switch_mainck_to_xtal+0x48>)
   80f30:	6a13      	ldr	r3, [r2, #32]
   80f32:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80f3a:	6213      	str	r3, [r2, #32]
   80f3c:	4770      	bx	lr
   80f3e:	bf00      	nop
   80f40:	400e0600 	.word	0x400e0600
   80f44:	fec8fffc 	.word	0xfec8fffc
   80f48:	01370002 	.word	0x01370002

00080f4c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80f4c:	4b02      	ldr	r3, [pc, #8]	; (80f58 <pmc_osc_is_ready_mainck+0xc>)
   80f4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80f50:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80f54:	4770      	bx	lr
   80f56:	bf00      	nop
   80f58:	400e0600 	.word	0x400e0600

00080f5c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80f5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80f60:	4b01      	ldr	r3, [pc, #4]	; (80f68 <pmc_disable_pllack+0xc>)
   80f62:	629a      	str	r2, [r3, #40]	; 0x28
   80f64:	4770      	bx	lr
   80f66:	bf00      	nop
   80f68:	400e0600 	.word	0x400e0600

00080f6c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80f6c:	4b02      	ldr	r3, [pc, #8]	; (80f78 <pmc_is_locked_pllack+0xc>)
   80f6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80f70:	f000 0002 	and.w	r0, r0, #2
   80f74:	4770      	bx	lr
   80f76:	bf00      	nop
   80f78:	400e0600 	.word	0x400e0600

00080f7c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80f7c:	282c      	cmp	r0, #44	; 0x2c
   80f7e:	d81e      	bhi.n	80fbe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80f80:	281f      	cmp	r0, #31
   80f82:	d80c      	bhi.n	80f9e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80f84:	4b11      	ldr	r3, [pc, #68]	; (80fcc <pmc_enable_periph_clk+0x50>)
   80f86:	699a      	ldr	r2, [r3, #24]
   80f88:	2301      	movs	r3, #1
   80f8a:	4083      	lsls	r3, r0
   80f8c:	401a      	ands	r2, r3
   80f8e:	4293      	cmp	r3, r2
   80f90:	d017      	beq.n	80fc2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80f92:	2301      	movs	r3, #1
   80f94:	4083      	lsls	r3, r0
   80f96:	4a0d      	ldr	r2, [pc, #52]	; (80fcc <pmc_enable_periph_clk+0x50>)
   80f98:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80f9a:	2000      	movs	r0, #0
   80f9c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80f9e:	4b0b      	ldr	r3, [pc, #44]	; (80fcc <pmc_enable_periph_clk+0x50>)
   80fa0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80fa4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80fa6:	2301      	movs	r3, #1
   80fa8:	4083      	lsls	r3, r0
   80faa:	401a      	ands	r2, r3
   80fac:	4293      	cmp	r3, r2
   80fae:	d00a      	beq.n	80fc6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80fb0:	2301      	movs	r3, #1
   80fb2:	4083      	lsls	r3, r0
   80fb4:	4a05      	ldr	r2, [pc, #20]	; (80fcc <pmc_enable_periph_clk+0x50>)
   80fb6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80fba:	2000      	movs	r0, #0
   80fbc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80fbe:	2001      	movs	r0, #1
   80fc0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80fc2:	2000      	movs	r0, #0
   80fc4:	4770      	bx	lr
   80fc6:	2000      	movs	r0, #0
}
   80fc8:	4770      	bx	lr
   80fca:	bf00      	nop
   80fcc:	400e0600 	.word	0x400e0600

00080fd0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80fd0:	e7fe      	b.n	80fd0 <Dummy_Handler>
   80fd2:	bf00      	nop

00080fd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80fd4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80fd6:	4b1f      	ldr	r3, [pc, #124]	; (81054 <Reset_Handler+0x80>)
   80fd8:	4a1f      	ldr	r2, [pc, #124]	; (81058 <Reset_Handler+0x84>)
   80fda:	429a      	cmp	r2, r3
   80fdc:	d003      	beq.n	80fe6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80fde:	4b1f      	ldr	r3, [pc, #124]	; (8105c <Reset_Handler+0x88>)
   80fe0:	4a1c      	ldr	r2, [pc, #112]	; (81054 <Reset_Handler+0x80>)
   80fe2:	429a      	cmp	r2, r3
   80fe4:	d304      	bcc.n	80ff0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80fe6:	4b1e      	ldr	r3, [pc, #120]	; (81060 <Reset_Handler+0x8c>)
   80fe8:	4a1e      	ldr	r2, [pc, #120]	; (81064 <Reset_Handler+0x90>)
   80fea:	429a      	cmp	r2, r3
   80fec:	d310      	bcc.n	81010 <Reset_Handler+0x3c>
   80fee:	e01b      	b.n	81028 <Reset_Handler+0x54>
   80ff0:	4918      	ldr	r1, [pc, #96]	; (81054 <Reset_Handler+0x80>)
   80ff2:	1d0a      	adds	r2, r1, #4
   80ff4:	4b1c      	ldr	r3, [pc, #112]	; (81068 <Reset_Handler+0x94>)
   80ff6:	1a9b      	subs	r3, r3, r2
   80ff8:	f023 0303 	bic.w	r3, r3, #3
   80ffc:	3304      	adds	r3, #4
   80ffe:	4a16      	ldr	r2, [pc, #88]	; (81058 <Reset_Handler+0x84>)
   81000:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81002:	f852 0b04 	ldr.w	r0, [r2], #4
   81006:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8100a:	429a      	cmp	r2, r3
   8100c:	d1f9      	bne.n	81002 <Reset_Handler+0x2e>
   8100e:	e7ea      	b.n	80fe6 <Reset_Handler+0x12>
   81010:	4b16      	ldr	r3, [pc, #88]	; (8106c <Reset_Handler+0x98>)
   81012:	4a17      	ldr	r2, [pc, #92]	; (81070 <Reset_Handler+0x9c>)
   81014:	1ad2      	subs	r2, r2, r3
   81016:	f022 0203 	bic.w	r2, r2, #3
   8101a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8101c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8101e:	2100      	movs	r1, #0
   81020:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81024:	4293      	cmp	r3, r2
   81026:	d1fb      	bne.n	81020 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81028:	4b12      	ldr	r3, [pc, #72]	; (81074 <Reset_Handler+0xa0>)
   8102a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8102e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81032:	4911      	ldr	r1, [pc, #68]	; (81078 <Reset_Handler+0xa4>)
   81034:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81036:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8103a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8103e:	d203      	bcs.n	81048 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81040:	688b      	ldr	r3, [r1, #8]
   81042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81046:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81048:	4b0c      	ldr	r3, [pc, #48]	; (8107c <Reset_Handler+0xa8>)
   8104a:	4798      	blx	r3

	/* Branch to main function */
	main();
   8104c:	4b0c      	ldr	r3, [pc, #48]	; (81080 <Reset_Handler+0xac>)
   8104e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   81050:	e7fe      	b.n	81050 <Reset_Handler+0x7c>
   81052:	bf00      	nop
   81054:	20070000 	.word	0x20070000
   81058:	00084270 	.word	0x00084270
   8105c:	200709a4 	.word	0x200709a4
   81060:	20070c04 	.word	0x20070c04
   81064:	200709a8 	.word	0x200709a8
   81068:	200709a7 	.word	0x200709a7
   8106c:	200709ac 	.word	0x200709ac
   81070:	20070c07 	.word	0x20070c07
   81074:	00080000 	.word	0x00080000
   81078:	e000ed00 	.word	0xe000ed00
   8107c:	0008124d 	.word	0x0008124d
   81080:	000811f1 	.word	0x000811f1

00081084 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81084:	4b3e      	ldr	r3, [pc, #248]	; (81180 <SystemCoreClockUpdate+0xfc>)
   81086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81088:	f003 0303 	and.w	r3, r3, #3
   8108c:	2b03      	cmp	r3, #3
   8108e:	d85f      	bhi.n	81150 <SystemCoreClockUpdate+0xcc>
   81090:	e8df f003 	tbb	[pc, r3]
   81094:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81098:	4b3a      	ldr	r3, [pc, #232]	; (81184 <SystemCoreClockUpdate+0x100>)
   8109a:	695b      	ldr	r3, [r3, #20]
   8109c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   810a0:	bf14      	ite	ne
   810a2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   810a6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   810aa:	4b37      	ldr	r3, [pc, #220]	; (81188 <SystemCoreClockUpdate+0x104>)
   810ac:	601a      	str	r2, [r3, #0]
   810ae:	e04f      	b.n	81150 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   810b0:	4b33      	ldr	r3, [pc, #204]	; (81180 <SystemCoreClockUpdate+0xfc>)
   810b2:	6a1b      	ldr	r3, [r3, #32]
   810b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   810b8:	d003      	beq.n	810c2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   810ba:	4a34      	ldr	r2, [pc, #208]	; (8118c <SystemCoreClockUpdate+0x108>)
   810bc:	4b32      	ldr	r3, [pc, #200]	; (81188 <SystemCoreClockUpdate+0x104>)
   810be:	601a      	str	r2, [r3, #0]
   810c0:	e046      	b.n	81150 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   810c2:	4a33      	ldr	r2, [pc, #204]	; (81190 <SystemCoreClockUpdate+0x10c>)
   810c4:	4b30      	ldr	r3, [pc, #192]	; (81188 <SystemCoreClockUpdate+0x104>)
   810c6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   810c8:	4b2d      	ldr	r3, [pc, #180]	; (81180 <SystemCoreClockUpdate+0xfc>)
   810ca:	6a1b      	ldr	r3, [r3, #32]
   810cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   810d0:	2b10      	cmp	r3, #16
   810d2:	d002      	beq.n	810da <SystemCoreClockUpdate+0x56>
   810d4:	2b20      	cmp	r3, #32
   810d6:	d004      	beq.n	810e2 <SystemCoreClockUpdate+0x5e>
   810d8:	e03a      	b.n	81150 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   810da:	4a2e      	ldr	r2, [pc, #184]	; (81194 <SystemCoreClockUpdate+0x110>)
   810dc:	4b2a      	ldr	r3, [pc, #168]	; (81188 <SystemCoreClockUpdate+0x104>)
   810de:	601a      	str	r2, [r3, #0]
				break;
   810e0:	e036      	b.n	81150 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   810e2:	4a2a      	ldr	r2, [pc, #168]	; (8118c <SystemCoreClockUpdate+0x108>)
   810e4:	4b28      	ldr	r3, [pc, #160]	; (81188 <SystemCoreClockUpdate+0x104>)
   810e6:	601a      	str	r2, [r3, #0]
				break;
   810e8:	e032      	b.n	81150 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   810ea:	4b25      	ldr	r3, [pc, #148]	; (81180 <SystemCoreClockUpdate+0xfc>)
   810ec:	6a1b      	ldr	r3, [r3, #32]
   810ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   810f2:	d003      	beq.n	810fc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   810f4:	4a25      	ldr	r2, [pc, #148]	; (8118c <SystemCoreClockUpdate+0x108>)
   810f6:	4b24      	ldr	r3, [pc, #144]	; (81188 <SystemCoreClockUpdate+0x104>)
   810f8:	601a      	str	r2, [r3, #0]
   810fa:	e012      	b.n	81122 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   810fc:	4a24      	ldr	r2, [pc, #144]	; (81190 <SystemCoreClockUpdate+0x10c>)
   810fe:	4b22      	ldr	r3, [pc, #136]	; (81188 <SystemCoreClockUpdate+0x104>)
   81100:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81102:	4b1f      	ldr	r3, [pc, #124]	; (81180 <SystemCoreClockUpdate+0xfc>)
   81104:	6a1b      	ldr	r3, [r3, #32]
   81106:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8110a:	2b10      	cmp	r3, #16
   8110c:	d002      	beq.n	81114 <SystemCoreClockUpdate+0x90>
   8110e:	2b20      	cmp	r3, #32
   81110:	d004      	beq.n	8111c <SystemCoreClockUpdate+0x98>
   81112:	e006      	b.n	81122 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81114:	4a1f      	ldr	r2, [pc, #124]	; (81194 <SystemCoreClockUpdate+0x110>)
   81116:	4b1c      	ldr	r3, [pc, #112]	; (81188 <SystemCoreClockUpdate+0x104>)
   81118:	601a      	str	r2, [r3, #0]
				break;
   8111a:	e002      	b.n	81122 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8111c:	4a1b      	ldr	r2, [pc, #108]	; (8118c <SystemCoreClockUpdate+0x108>)
   8111e:	4b1a      	ldr	r3, [pc, #104]	; (81188 <SystemCoreClockUpdate+0x104>)
   81120:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81122:	4b17      	ldr	r3, [pc, #92]	; (81180 <SystemCoreClockUpdate+0xfc>)
   81124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81126:	f003 0303 	and.w	r3, r3, #3
   8112a:	2b02      	cmp	r3, #2
   8112c:	d10d      	bne.n	8114a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8112e:	4a14      	ldr	r2, [pc, #80]	; (81180 <SystemCoreClockUpdate+0xfc>)
   81130:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81132:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81134:	4814      	ldr	r0, [pc, #80]	; (81188 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81136:	f3c3 410a 	ubfx	r1, r3, #16, #11
   8113a:	6803      	ldr	r3, [r0, #0]
   8113c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81140:	b2d2      	uxtb	r2, r2
   81142:	fbb3 f3f2 	udiv	r3, r3, r2
   81146:	6003      	str	r3, [r0, #0]
   81148:	e002      	b.n	81150 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8114a:	4a13      	ldr	r2, [pc, #76]	; (81198 <SystemCoreClockUpdate+0x114>)
   8114c:	4b0e      	ldr	r3, [pc, #56]	; (81188 <SystemCoreClockUpdate+0x104>)
   8114e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81150:	4b0b      	ldr	r3, [pc, #44]	; (81180 <SystemCoreClockUpdate+0xfc>)
   81152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81154:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81158:	2b70      	cmp	r3, #112	; 0x70
   8115a:	d107      	bne.n	8116c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8115c:	4a0a      	ldr	r2, [pc, #40]	; (81188 <SystemCoreClockUpdate+0x104>)
   8115e:	6813      	ldr	r3, [r2, #0]
   81160:	490e      	ldr	r1, [pc, #56]	; (8119c <SystemCoreClockUpdate+0x118>)
   81162:	fba1 1303 	umull	r1, r3, r1, r3
   81166:	085b      	lsrs	r3, r3, #1
   81168:	6013      	str	r3, [r2, #0]
   8116a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8116c:	4b04      	ldr	r3, [pc, #16]	; (81180 <SystemCoreClockUpdate+0xfc>)
   8116e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81170:	4905      	ldr	r1, [pc, #20]	; (81188 <SystemCoreClockUpdate+0x104>)
   81172:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81176:	680b      	ldr	r3, [r1, #0]
   81178:	40d3      	lsrs	r3, r2
   8117a:	600b      	str	r3, [r1, #0]
   8117c:	4770      	bx	lr
   8117e:	bf00      	nop
   81180:	400e0600 	.word	0x400e0600
   81184:	400e1a10 	.word	0x400e1a10
   81188:	2007013c 	.word	0x2007013c
   8118c:	00b71b00 	.word	0x00b71b00
   81190:	003d0900 	.word	0x003d0900
   81194:	007a1200 	.word	0x007a1200
   81198:	0e4e1c00 	.word	0x0e4e1c00
   8119c:	aaaaaaab 	.word	0xaaaaaaab

000811a0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   811a0:	4b09      	ldr	r3, [pc, #36]	; (811c8 <_sbrk+0x28>)
   811a2:	681b      	ldr	r3, [r3, #0]
   811a4:	b913      	cbnz	r3, 811ac <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   811a6:	4a09      	ldr	r2, [pc, #36]	; (811cc <_sbrk+0x2c>)
   811a8:	4b07      	ldr	r3, [pc, #28]	; (811c8 <_sbrk+0x28>)
   811aa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   811ac:	4b06      	ldr	r3, [pc, #24]	; (811c8 <_sbrk+0x28>)
   811ae:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   811b0:	181a      	adds	r2, r3, r0
   811b2:	4907      	ldr	r1, [pc, #28]	; (811d0 <_sbrk+0x30>)
   811b4:	4291      	cmp	r1, r2
   811b6:	db04      	blt.n	811c2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   811b8:	4610      	mov	r0, r2
   811ba:	4a03      	ldr	r2, [pc, #12]	; (811c8 <_sbrk+0x28>)
   811bc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   811be:	4618      	mov	r0, r3
   811c0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   811c2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   811c6:	4770      	bx	lr
   811c8:	20070b20 	.word	0x20070b20
   811cc:	20072c08 	.word	0x20072c08
   811d0:	20087ffc 	.word	0x20087ffc

000811d4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   811d4:	f04f 30ff 	mov.w	r0, #4294967295
   811d8:	4770      	bx	lr
   811da:	bf00      	nop

000811dc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   811dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   811e0:	604b      	str	r3, [r1, #4]

	return 0;
}
   811e2:	2000      	movs	r0, #0
   811e4:	4770      	bx	lr
   811e6:	bf00      	nop

000811e8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   811e8:	2001      	movs	r0, #1
   811ea:	4770      	bx	lr

000811ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   811ec:	2000      	movs	r0, #0
   811ee:	4770      	bx	lr

000811f0 <main>:
#include "testFunctions.h"
#include "UARTFunctions.h"
#include "global_variables.h"
#include "delay.h"

int main (void){
   811f0:	b508      	push	{r3, lr}
	/* Initialize the Arduino Due system */
	sysclk_init();
   811f2:	4b0d      	ldr	r3, [pc, #52]	; (81228 <main+0x38>)
   811f4:	4798      	blx	r3
	board_init();
   811f6:	4b0d      	ldr	r3, [pc, #52]	; (8122c <main+0x3c>)
   811f8:	4798      	blx	r3
   811fa:	200b      	movs	r0, #11
   811fc:	4c0c      	ldr	r4, [pc, #48]	; (81230 <main+0x40>)
   811fe:	47a0      	blx	r4
   81200:	200c      	movs	r0, #12
   81202:	47a0      	blx	r4
   81204:	200d      	movs	r0, #13
   81206:	47a0      	blx	r4
   81208:	200e      	movs	r0, #14
   8120a:	47a0      	blx	r4
	ioport_init();
	configure_console();
   8120c:	4b09      	ldr	r3, [pc, #36]	; (81234 <main+0x44>)
   8120e:	4798      	blx	r3
		
	ADCSetup();
   81210:	4b09      	ldr	r3, [pc, #36]	; (81238 <main+0x48>)
   81212:	4798      	blx	r3
	PWMSetup();
   81214:	4b09      	ldr	r3, [pc, #36]	; (8123c <main+0x4c>)
   81216:	4798      	blx	r3
	PWMEnableCustomPin();
   81218:	4b09      	ldr	r3, [pc, #36]	; (81240 <main+0x50>)
   8121a:	4798      	blx	r3
	motorShield_init();
   8121c:	4b09      	ldr	r3, [pc, #36]	; (81244 <main+0x54>)
   8121e:	4798      	blx	r3
// 
// /* Start the FreeRTOS scheduler running all tasks indefinitely*/
// vTaskStartScheduler();
while(1)
{
	testSend();
   81220:	4c09      	ldr	r4, [pc, #36]	; (81248 <main+0x58>)
   81222:	47a0      	blx	r4
}
   81224:	e7fd      	b.n	81222 <main+0x32>
   81226:	bf00      	nop
   81228:	00080af5 	.word	0x00080af5
   8122c:	00080b59 	.word	0x00080b59
   81230:	00080f7d 	.word	0x00080f7d
   81234:	00080a5d 	.word	0x00080a5d
   81238:	00080151 	.word	0x00080151
   8123c:	000807fd 	.word	0x000807fd
   81240:	00080835 	.word	0x00080835
   81244:	0008088d 	.word	0x0008088d
   81248:	000808e5 	.word	0x000808e5

0008124c <__libc_init_array>:
   8124c:	b570      	push	{r4, r5, r6, lr}
   8124e:	4e0f      	ldr	r6, [pc, #60]	; (8128c <__libc_init_array+0x40>)
   81250:	4d0f      	ldr	r5, [pc, #60]	; (81290 <__libc_init_array+0x44>)
   81252:	1b76      	subs	r6, r6, r5
   81254:	10b6      	asrs	r6, r6, #2
   81256:	bf18      	it	ne
   81258:	2400      	movne	r4, #0
   8125a:	d005      	beq.n	81268 <__libc_init_array+0x1c>
   8125c:	3401      	adds	r4, #1
   8125e:	f855 3b04 	ldr.w	r3, [r5], #4
   81262:	4798      	blx	r3
   81264:	42a6      	cmp	r6, r4
   81266:	d1f9      	bne.n	8125c <__libc_init_array+0x10>
   81268:	4e0a      	ldr	r6, [pc, #40]	; (81294 <__libc_init_array+0x48>)
   8126a:	4d0b      	ldr	r5, [pc, #44]	; (81298 <__libc_init_array+0x4c>)
   8126c:	f002 ffea 	bl	84244 <_init>
   81270:	1b76      	subs	r6, r6, r5
   81272:	10b6      	asrs	r6, r6, #2
   81274:	bf18      	it	ne
   81276:	2400      	movne	r4, #0
   81278:	d006      	beq.n	81288 <__libc_init_array+0x3c>
   8127a:	3401      	adds	r4, #1
   8127c:	f855 3b04 	ldr.w	r3, [r5], #4
   81280:	4798      	blx	r3
   81282:	42a6      	cmp	r6, r4
   81284:	d1f9      	bne.n	8127a <__libc_init_array+0x2e>
   81286:	bd70      	pop	{r4, r5, r6, pc}
   81288:	bd70      	pop	{r4, r5, r6, pc}
   8128a:	bf00      	nop
   8128c:	00084250 	.word	0x00084250
   81290:	00084250 	.word	0x00084250
   81294:	00084258 	.word	0x00084258
   81298:	00084250 	.word	0x00084250

0008129c <iprintf>:
   8129c:	b40f      	push	{r0, r1, r2, r3}
   8129e:	b510      	push	{r4, lr}
   812a0:	4b07      	ldr	r3, [pc, #28]	; (812c0 <iprintf+0x24>)
   812a2:	b082      	sub	sp, #8
   812a4:	ac04      	add	r4, sp, #16
   812a6:	f854 2b04 	ldr.w	r2, [r4], #4
   812aa:	6818      	ldr	r0, [r3, #0]
   812ac:	4623      	mov	r3, r4
   812ae:	6881      	ldr	r1, [r0, #8]
   812b0:	9401      	str	r4, [sp, #4]
   812b2:	f000 f9b9 	bl	81628 <_vfiprintf_r>
   812b6:	b002      	add	sp, #8
   812b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   812bc:	b004      	add	sp, #16
   812be:	4770      	bx	lr
   812c0:	20070568 	.word	0x20070568

000812c4 <memcpy>:
   812c4:	4684      	mov	ip, r0
   812c6:	ea41 0300 	orr.w	r3, r1, r0
   812ca:	f013 0303 	ands.w	r3, r3, #3
   812ce:	d149      	bne.n	81364 <memcpy+0xa0>
   812d0:	3a40      	subs	r2, #64	; 0x40
   812d2:	d323      	bcc.n	8131c <memcpy+0x58>
   812d4:	680b      	ldr	r3, [r1, #0]
   812d6:	6003      	str	r3, [r0, #0]
   812d8:	684b      	ldr	r3, [r1, #4]
   812da:	6043      	str	r3, [r0, #4]
   812dc:	688b      	ldr	r3, [r1, #8]
   812de:	6083      	str	r3, [r0, #8]
   812e0:	68cb      	ldr	r3, [r1, #12]
   812e2:	60c3      	str	r3, [r0, #12]
   812e4:	690b      	ldr	r3, [r1, #16]
   812e6:	6103      	str	r3, [r0, #16]
   812e8:	694b      	ldr	r3, [r1, #20]
   812ea:	6143      	str	r3, [r0, #20]
   812ec:	698b      	ldr	r3, [r1, #24]
   812ee:	6183      	str	r3, [r0, #24]
   812f0:	69cb      	ldr	r3, [r1, #28]
   812f2:	61c3      	str	r3, [r0, #28]
   812f4:	6a0b      	ldr	r3, [r1, #32]
   812f6:	6203      	str	r3, [r0, #32]
   812f8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   812fa:	6243      	str	r3, [r0, #36]	; 0x24
   812fc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   812fe:	6283      	str	r3, [r0, #40]	; 0x28
   81300:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81302:	62c3      	str	r3, [r0, #44]	; 0x2c
   81304:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81306:	6303      	str	r3, [r0, #48]	; 0x30
   81308:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8130a:	6343      	str	r3, [r0, #52]	; 0x34
   8130c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8130e:	6383      	str	r3, [r0, #56]	; 0x38
   81310:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81312:	63c3      	str	r3, [r0, #60]	; 0x3c
   81314:	3040      	adds	r0, #64	; 0x40
   81316:	3140      	adds	r1, #64	; 0x40
   81318:	3a40      	subs	r2, #64	; 0x40
   8131a:	d2db      	bcs.n	812d4 <memcpy+0x10>
   8131c:	3230      	adds	r2, #48	; 0x30
   8131e:	d30b      	bcc.n	81338 <memcpy+0x74>
   81320:	680b      	ldr	r3, [r1, #0]
   81322:	6003      	str	r3, [r0, #0]
   81324:	684b      	ldr	r3, [r1, #4]
   81326:	6043      	str	r3, [r0, #4]
   81328:	688b      	ldr	r3, [r1, #8]
   8132a:	6083      	str	r3, [r0, #8]
   8132c:	68cb      	ldr	r3, [r1, #12]
   8132e:	60c3      	str	r3, [r0, #12]
   81330:	3010      	adds	r0, #16
   81332:	3110      	adds	r1, #16
   81334:	3a10      	subs	r2, #16
   81336:	d2f3      	bcs.n	81320 <memcpy+0x5c>
   81338:	320c      	adds	r2, #12
   8133a:	d305      	bcc.n	81348 <memcpy+0x84>
   8133c:	f851 3b04 	ldr.w	r3, [r1], #4
   81340:	f840 3b04 	str.w	r3, [r0], #4
   81344:	3a04      	subs	r2, #4
   81346:	d2f9      	bcs.n	8133c <memcpy+0x78>
   81348:	3204      	adds	r2, #4
   8134a:	d008      	beq.n	8135e <memcpy+0x9a>
   8134c:	07d2      	lsls	r2, r2, #31
   8134e:	bf1c      	itt	ne
   81350:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81354:	f800 3b01 	strbne.w	r3, [r0], #1
   81358:	d301      	bcc.n	8135e <memcpy+0x9a>
   8135a:	880b      	ldrh	r3, [r1, #0]
   8135c:	8003      	strh	r3, [r0, #0]
   8135e:	4660      	mov	r0, ip
   81360:	4770      	bx	lr
   81362:	bf00      	nop
   81364:	2a08      	cmp	r2, #8
   81366:	d313      	bcc.n	81390 <memcpy+0xcc>
   81368:	078b      	lsls	r3, r1, #30
   8136a:	d0b1      	beq.n	812d0 <memcpy+0xc>
   8136c:	f010 0303 	ands.w	r3, r0, #3
   81370:	d0ae      	beq.n	812d0 <memcpy+0xc>
   81372:	f1c3 0304 	rsb	r3, r3, #4
   81376:	1ad2      	subs	r2, r2, r3
   81378:	07db      	lsls	r3, r3, #31
   8137a:	bf1c      	itt	ne
   8137c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81380:	f800 3b01 	strbne.w	r3, [r0], #1
   81384:	d3a4      	bcc.n	812d0 <memcpy+0xc>
   81386:	f831 3b02 	ldrh.w	r3, [r1], #2
   8138a:	f820 3b02 	strh.w	r3, [r0], #2
   8138e:	e79f      	b.n	812d0 <memcpy+0xc>
   81390:	3a04      	subs	r2, #4
   81392:	d3d9      	bcc.n	81348 <memcpy+0x84>
   81394:	3a01      	subs	r2, #1
   81396:	f811 3b01 	ldrb.w	r3, [r1], #1
   8139a:	f800 3b01 	strb.w	r3, [r0], #1
   8139e:	d2f9      	bcs.n	81394 <memcpy+0xd0>
   813a0:	780b      	ldrb	r3, [r1, #0]
   813a2:	7003      	strb	r3, [r0, #0]
   813a4:	784b      	ldrb	r3, [r1, #1]
   813a6:	7043      	strb	r3, [r0, #1]
   813a8:	788b      	ldrb	r3, [r1, #2]
   813aa:	7083      	strb	r3, [r0, #2]
   813ac:	4660      	mov	r0, ip
   813ae:	4770      	bx	lr

000813b0 <memset>:
   813b0:	b470      	push	{r4, r5, r6}
   813b2:	0784      	lsls	r4, r0, #30
   813b4:	d046      	beq.n	81444 <memset+0x94>
   813b6:	1e54      	subs	r4, r2, #1
   813b8:	2a00      	cmp	r2, #0
   813ba:	d041      	beq.n	81440 <memset+0x90>
   813bc:	b2cd      	uxtb	r5, r1
   813be:	4603      	mov	r3, r0
   813c0:	e002      	b.n	813c8 <memset+0x18>
   813c2:	1e62      	subs	r2, r4, #1
   813c4:	b3e4      	cbz	r4, 81440 <memset+0x90>
   813c6:	4614      	mov	r4, r2
   813c8:	f803 5b01 	strb.w	r5, [r3], #1
   813cc:	079a      	lsls	r2, r3, #30
   813ce:	d1f8      	bne.n	813c2 <memset+0x12>
   813d0:	2c03      	cmp	r4, #3
   813d2:	d92e      	bls.n	81432 <memset+0x82>
   813d4:	b2cd      	uxtb	r5, r1
   813d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   813da:	2c0f      	cmp	r4, #15
   813dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   813e0:	d919      	bls.n	81416 <memset+0x66>
   813e2:	4626      	mov	r6, r4
   813e4:	f103 0210 	add.w	r2, r3, #16
   813e8:	3e10      	subs	r6, #16
   813ea:	2e0f      	cmp	r6, #15
   813ec:	f842 5c10 	str.w	r5, [r2, #-16]
   813f0:	f842 5c0c 	str.w	r5, [r2, #-12]
   813f4:	f842 5c08 	str.w	r5, [r2, #-8]
   813f8:	f842 5c04 	str.w	r5, [r2, #-4]
   813fc:	f102 0210 	add.w	r2, r2, #16
   81400:	d8f2      	bhi.n	813e8 <memset+0x38>
   81402:	f1a4 0210 	sub.w	r2, r4, #16
   81406:	f022 020f 	bic.w	r2, r2, #15
   8140a:	f004 040f 	and.w	r4, r4, #15
   8140e:	3210      	adds	r2, #16
   81410:	2c03      	cmp	r4, #3
   81412:	4413      	add	r3, r2
   81414:	d90d      	bls.n	81432 <memset+0x82>
   81416:	461e      	mov	r6, r3
   81418:	4622      	mov	r2, r4
   8141a:	3a04      	subs	r2, #4
   8141c:	2a03      	cmp	r2, #3
   8141e:	f846 5b04 	str.w	r5, [r6], #4
   81422:	d8fa      	bhi.n	8141a <memset+0x6a>
   81424:	1f22      	subs	r2, r4, #4
   81426:	f022 0203 	bic.w	r2, r2, #3
   8142a:	3204      	adds	r2, #4
   8142c:	4413      	add	r3, r2
   8142e:	f004 0403 	and.w	r4, r4, #3
   81432:	b12c      	cbz	r4, 81440 <memset+0x90>
   81434:	b2c9      	uxtb	r1, r1
   81436:	441c      	add	r4, r3
   81438:	f803 1b01 	strb.w	r1, [r3], #1
   8143c:	42a3      	cmp	r3, r4
   8143e:	d1fb      	bne.n	81438 <memset+0x88>
   81440:	bc70      	pop	{r4, r5, r6}
   81442:	4770      	bx	lr
   81444:	4614      	mov	r4, r2
   81446:	4603      	mov	r3, r0
   81448:	e7c2      	b.n	813d0 <memset+0x20>
   8144a:	bf00      	nop

0008144c <setbuf>:
   8144c:	2900      	cmp	r1, #0
   8144e:	bf0c      	ite	eq
   81450:	2202      	moveq	r2, #2
   81452:	2200      	movne	r2, #0
   81454:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81458:	f000 b800 	b.w	8145c <setvbuf>

0008145c <setvbuf>:
   8145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81460:	4d3a      	ldr	r5, [pc, #232]	; (8154c <setvbuf+0xf0>)
   81462:	4604      	mov	r4, r0
   81464:	682e      	ldr	r6, [r5, #0]
   81466:	4690      	mov	r8, r2
   81468:	460d      	mov	r5, r1
   8146a:	461f      	mov	r7, r3
   8146c:	b116      	cbz	r6, 81474 <setvbuf+0x18>
   8146e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   81470:	2b00      	cmp	r3, #0
   81472:	d03c      	beq.n	814ee <setvbuf+0x92>
   81474:	f1b8 0f02 	cmp.w	r8, #2
   81478:	d82f      	bhi.n	814da <setvbuf+0x7e>
   8147a:	2f00      	cmp	r7, #0
   8147c:	db2d      	blt.n	814da <setvbuf+0x7e>
   8147e:	4621      	mov	r1, r4
   81480:	4630      	mov	r0, r6
   81482:	f001 f82d 	bl	824e0 <_fflush_r>
   81486:	89a1      	ldrh	r1, [r4, #12]
   81488:	2300      	movs	r3, #0
   8148a:	6063      	str	r3, [r4, #4]
   8148c:	61a3      	str	r3, [r4, #24]
   8148e:	060b      	lsls	r3, r1, #24
   81490:	d427      	bmi.n	814e2 <setvbuf+0x86>
   81492:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   81496:	b289      	uxth	r1, r1
   81498:	f1b8 0f02 	cmp.w	r8, #2
   8149c:	81a1      	strh	r1, [r4, #12]
   8149e:	d02a      	beq.n	814f6 <setvbuf+0x9a>
   814a0:	2d00      	cmp	r5, #0
   814a2:	d036      	beq.n	81512 <setvbuf+0xb6>
   814a4:	f1b8 0f01 	cmp.w	r8, #1
   814a8:	d011      	beq.n	814ce <setvbuf+0x72>
   814aa:	b289      	uxth	r1, r1
   814ac:	f001 0008 	and.w	r0, r1, #8
   814b0:	4b27      	ldr	r3, [pc, #156]	; (81550 <setvbuf+0xf4>)
   814b2:	b280      	uxth	r0, r0
   814b4:	63f3      	str	r3, [r6, #60]	; 0x3c
   814b6:	6025      	str	r5, [r4, #0]
   814b8:	6125      	str	r5, [r4, #16]
   814ba:	6167      	str	r7, [r4, #20]
   814bc:	b178      	cbz	r0, 814de <setvbuf+0x82>
   814be:	f011 0f03 	tst.w	r1, #3
   814c2:	bf18      	it	ne
   814c4:	2700      	movne	r7, #0
   814c6:	2000      	movs	r0, #0
   814c8:	60a7      	str	r7, [r4, #8]
   814ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814ce:	f041 0101 	orr.w	r1, r1, #1
   814d2:	427b      	negs	r3, r7
   814d4:	81a1      	strh	r1, [r4, #12]
   814d6:	61a3      	str	r3, [r4, #24]
   814d8:	e7e7      	b.n	814aa <setvbuf+0x4e>
   814da:	f04f 30ff 	mov.w	r0, #4294967295
   814de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814e2:	6921      	ldr	r1, [r4, #16]
   814e4:	4630      	mov	r0, r6
   814e6:	f001 f967 	bl	827b8 <_free_r>
   814ea:	89a1      	ldrh	r1, [r4, #12]
   814ec:	e7d1      	b.n	81492 <setvbuf+0x36>
   814ee:	4630      	mov	r0, r6
   814f0:	f001 f88a 	bl	82608 <__sinit>
   814f4:	e7be      	b.n	81474 <setvbuf+0x18>
   814f6:	2000      	movs	r0, #0
   814f8:	f104 0343 	add.w	r3, r4, #67	; 0x43
   814fc:	f041 0102 	orr.w	r1, r1, #2
   81500:	2500      	movs	r5, #0
   81502:	2201      	movs	r2, #1
   81504:	81a1      	strh	r1, [r4, #12]
   81506:	60a5      	str	r5, [r4, #8]
   81508:	6023      	str	r3, [r4, #0]
   8150a:	6123      	str	r3, [r4, #16]
   8150c:	6162      	str	r2, [r4, #20]
   8150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81512:	2f00      	cmp	r7, #0
   81514:	bf08      	it	eq
   81516:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8151a:	4638      	mov	r0, r7
   8151c:	f001 fc56 	bl	82dcc <malloc>
   81520:	4605      	mov	r5, r0
   81522:	b128      	cbz	r0, 81530 <setvbuf+0xd4>
   81524:	89a1      	ldrh	r1, [r4, #12]
   81526:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   8152a:	b289      	uxth	r1, r1
   8152c:	81a1      	strh	r1, [r4, #12]
   8152e:	e7b9      	b.n	814a4 <setvbuf+0x48>
   81530:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81534:	f001 fc4a 	bl	82dcc <malloc>
   81538:	4605      	mov	r5, r0
   8153a:	b918      	cbnz	r0, 81544 <setvbuf+0xe8>
   8153c:	89a1      	ldrh	r1, [r4, #12]
   8153e:	f04f 30ff 	mov.w	r0, #4294967295
   81542:	e7d9      	b.n	814f8 <setvbuf+0x9c>
   81544:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81548:	e7ec      	b.n	81524 <setvbuf+0xc8>
   8154a:	bf00      	nop
   8154c:	20070568 	.word	0x20070568
   81550:	0008250d 	.word	0x0008250d

00081554 <strlen>:
   81554:	f020 0103 	bic.w	r1, r0, #3
   81558:	f010 0003 	ands.w	r0, r0, #3
   8155c:	f1c0 0000 	rsb	r0, r0, #0
   81560:	f851 3b04 	ldr.w	r3, [r1], #4
   81564:	f100 0c04 	add.w	ip, r0, #4
   81568:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8156c:	f06f 0200 	mvn.w	r2, #0
   81570:	bf1c      	itt	ne
   81572:	fa22 f20c 	lsrne.w	r2, r2, ip
   81576:	4313      	orrne	r3, r2
   81578:	f04f 0c01 	mov.w	ip, #1
   8157c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81580:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81584:	eba3 020c 	sub.w	r2, r3, ip
   81588:	ea22 0203 	bic.w	r2, r2, r3
   8158c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81590:	bf04      	itt	eq
   81592:	f851 3b04 	ldreq.w	r3, [r1], #4
   81596:	3004      	addeq	r0, #4
   81598:	d0f4      	beq.n	81584 <strlen+0x30>
   8159a:	f1c2 0100 	rsb	r1, r2, #0
   8159e:	ea02 0201 	and.w	r2, r2, r1
   815a2:	fab2 f282 	clz	r2, r2
   815a6:	f1c2 021f 	rsb	r2, r2, #31
   815aa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   815ae:	4770      	bx	lr

000815b0 <__sprint_r.part.0>:
   815b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   815b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815b6:	049c      	lsls	r4, r3, #18
   815b8:	460f      	mov	r7, r1
   815ba:	4692      	mov	sl, r2
   815bc:	d52b      	bpl.n	81616 <__sprint_r.part.0+0x66>
   815be:	6893      	ldr	r3, [r2, #8]
   815c0:	6812      	ldr	r2, [r2, #0]
   815c2:	b333      	cbz	r3, 81612 <__sprint_r.part.0+0x62>
   815c4:	4680      	mov	r8, r0
   815c6:	f102 0908 	add.w	r9, r2, #8
   815ca:	e919 0060 	ldmdb	r9, {r5, r6}
   815ce:	08b6      	lsrs	r6, r6, #2
   815d0:	d017      	beq.n	81602 <__sprint_r.part.0+0x52>
   815d2:	3d04      	subs	r5, #4
   815d4:	2400      	movs	r4, #0
   815d6:	e001      	b.n	815dc <__sprint_r.part.0+0x2c>
   815d8:	42a6      	cmp	r6, r4
   815da:	d010      	beq.n	815fe <__sprint_r.part.0+0x4e>
   815dc:	4640      	mov	r0, r8
   815de:	f855 1f04 	ldr.w	r1, [r5, #4]!
   815e2:	463a      	mov	r2, r7
   815e4:	f001 f888 	bl	826f8 <_fputwc_r>
   815e8:	1c43      	adds	r3, r0, #1
   815ea:	f104 0401 	add.w	r4, r4, #1
   815ee:	d1f3      	bne.n	815d8 <__sprint_r.part.0+0x28>
   815f0:	2300      	movs	r3, #0
   815f2:	f8ca 3008 	str.w	r3, [sl, #8]
   815f6:	f8ca 3004 	str.w	r3, [sl, #4]
   815fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   815fe:	f8da 3008 	ldr.w	r3, [sl, #8]
   81602:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   81606:	f8ca 3008 	str.w	r3, [sl, #8]
   8160a:	f109 0908 	add.w	r9, r9, #8
   8160e:	2b00      	cmp	r3, #0
   81610:	d1db      	bne.n	815ca <__sprint_r.part.0+0x1a>
   81612:	2000      	movs	r0, #0
   81614:	e7ec      	b.n	815f0 <__sprint_r.part.0+0x40>
   81616:	f001 f9a7 	bl	82968 <__sfvwrite_r>
   8161a:	2300      	movs	r3, #0
   8161c:	f8ca 3008 	str.w	r3, [sl, #8]
   81620:	f8ca 3004 	str.w	r3, [sl, #4]
   81624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081628 <_vfiprintf_r>:
   81628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8162c:	b0ab      	sub	sp, #172	; 0xac
   8162e:	461c      	mov	r4, r3
   81630:	9100      	str	r1, [sp, #0]
   81632:	4693      	mov	fp, r2
   81634:	9304      	str	r3, [sp, #16]
   81636:	9001      	str	r0, [sp, #4]
   81638:	b118      	cbz	r0, 81642 <_vfiprintf_r+0x1a>
   8163a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8163c:	2b00      	cmp	r3, #0
   8163e:	f000 80e3 	beq.w	81808 <_vfiprintf_r+0x1e0>
   81642:	9b00      	ldr	r3, [sp, #0]
   81644:	8999      	ldrh	r1, [r3, #12]
   81646:	b28a      	uxth	r2, r1
   81648:	0490      	lsls	r0, r2, #18
   8164a:	d408      	bmi.n	8165e <_vfiprintf_r+0x36>
   8164c:	4618      	mov	r0, r3
   8164e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   81650:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   81654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81658:	8182      	strh	r2, [r0, #12]
   8165a:	6643      	str	r3, [r0, #100]	; 0x64
   8165c:	b292      	uxth	r2, r2
   8165e:	0711      	lsls	r1, r2, #28
   81660:	f140 80b2 	bpl.w	817c8 <_vfiprintf_r+0x1a0>
   81664:	9b00      	ldr	r3, [sp, #0]
   81666:	691b      	ldr	r3, [r3, #16]
   81668:	2b00      	cmp	r3, #0
   8166a:	f000 80ad 	beq.w	817c8 <_vfiprintf_r+0x1a0>
   8166e:	f002 021a 	and.w	r2, r2, #26
   81672:	2a0a      	cmp	r2, #10
   81674:	f000 80b4 	beq.w	817e0 <_vfiprintf_r+0x1b8>
   81678:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   8167c:	4654      	mov	r4, sl
   8167e:	2300      	movs	r3, #0
   81680:	9309      	str	r3, [sp, #36]	; 0x24
   81682:	9302      	str	r3, [sp, #8]
   81684:	930f      	str	r3, [sp, #60]	; 0x3c
   81686:	930e      	str	r3, [sp, #56]	; 0x38
   81688:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   8168c:	f89b 3000 	ldrb.w	r3, [fp]
   81690:	2b00      	cmp	r3, #0
   81692:	f000 84a3 	beq.w	81fdc <_vfiprintf_r+0x9b4>
   81696:	2b25      	cmp	r3, #37	; 0x25
   81698:	f000 84a0 	beq.w	81fdc <_vfiprintf_r+0x9b4>
   8169c:	465a      	mov	r2, fp
   8169e:	e001      	b.n	816a4 <_vfiprintf_r+0x7c>
   816a0:	2b25      	cmp	r3, #37	; 0x25
   816a2:	d003      	beq.n	816ac <_vfiprintf_r+0x84>
   816a4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   816a8:	2b00      	cmp	r3, #0
   816aa:	d1f9      	bne.n	816a0 <_vfiprintf_r+0x78>
   816ac:	ebcb 0602 	rsb	r6, fp, r2
   816b0:	4615      	mov	r5, r2
   816b2:	b196      	cbz	r6, 816da <_vfiprintf_r+0xb2>
   816b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   816b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   816b8:	3301      	adds	r3, #1
   816ba:	4432      	add	r2, r6
   816bc:	2b07      	cmp	r3, #7
   816be:	f8c4 b000 	str.w	fp, [r4]
   816c2:	6066      	str	r6, [r4, #4]
   816c4:	920f      	str	r2, [sp, #60]	; 0x3c
   816c6:	930e      	str	r3, [sp, #56]	; 0x38
   816c8:	dd79      	ble.n	817be <_vfiprintf_r+0x196>
   816ca:	2a00      	cmp	r2, #0
   816cc:	f040 84ad 	bne.w	8202a <_vfiprintf_r+0xa02>
   816d0:	4654      	mov	r4, sl
   816d2:	9b02      	ldr	r3, [sp, #8]
   816d4:	920e      	str	r2, [sp, #56]	; 0x38
   816d6:	4433      	add	r3, r6
   816d8:	9302      	str	r3, [sp, #8]
   816da:	782b      	ldrb	r3, [r5, #0]
   816dc:	2b00      	cmp	r3, #0
   816de:	f000 835f 	beq.w	81da0 <_vfiprintf_r+0x778>
   816e2:	f04f 0300 	mov.w	r3, #0
   816e6:	2100      	movs	r1, #0
   816e8:	f04f 3cff 	mov.w	ip, #4294967295
   816ec:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   816f0:	1c68      	adds	r0, r5, #1
   816f2:	786b      	ldrb	r3, [r5, #1]
   816f4:	4688      	mov	r8, r1
   816f6:	460d      	mov	r5, r1
   816f8:	4666      	mov	r6, ip
   816fa:	f100 0b01 	add.w	fp, r0, #1
   816fe:	f1a3 0220 	sub.w	r2, r3, #32
   81702:	2a58      	cmp	r2, #88	; 0x58
   81704:	f200 82aa 	bhi.w	81c5c <_vfiprintf_r+0x634>
   81708:	e8df f012 	tbh	[pc, r2, lsl #1]
   8170c:	02a8029a 	.word	0x02a8029a
   81710:	02a202a8 	.word	0x02a202a8
   81714:	02a802a8 	.word	0x02a802a8
   81718:	02a802a8 	.word	0x02a802a8
   8171c:	02a802a8 	.word	0x02a802a8
   81720:	02600254 	.word	0x02600254
   81724:	010d02a8 	.word	0x010d02a8
   81728:	02a8026c 	.word	0x02a8026c
   8172c:	012f0129 	.word	0x012f0129
   81730:	012f012f 	.word	0x012f012f
   81734:	012f012f 	.word	0x012f012f
   81738:	012f012f 	.word	0x012f012f
   8173c:	012f012f 	.word	0x012f012f
   81740:	02a802a8 	.word	0x02a802a8
   81744:	02a802a8 	.word	0x02a802a8
   81748:	02a802a8 	.word	0x02a802a8
   8174c:	02a802a8 	.word	0x02a802a8
   81750:	02a802a8 	.word	0x02a802a8
   81754:	02a8013d 	.word	0x02a8013d
   81758:	02a802a8 	.word	0x02a802a8
   8175c:	02a802a8 	.word	0x02a802a8
   81760:	02a802a8 	.word	0x02a802a8
   81764:	02a802a8 	.word	0x02a802a8
   81768:	017402a8 	.word	0x017402a8
   8176c:	02a802a8 	.word	0x02a802a8
   81770:	02a802a8 	.word	0x02a802a8
   81774:	018b02a8 	.word	0x018b02a8
   81778:	02a802a8 	.word	0x02a802a8
   8177c:	02a801a3 	.word	0x02a801a3
   81780:	02a802a8 	.word	0x02a802a8
   81784:	02a802a8 	.word	0x02a802a8
   81788:	02a802a8 	.word	0x02a802a8
   8178c:	02a802a8 	.word	0x02a802a8
   81790:	01c702a8 	.word	0x01c702a8
   81794:	02a801da 	.word	0x02a801da
   81798:	02a802a8 	.word	0x02a802a8
   8179c:	01da0123 	.word	0x01da0123
   817a0:	02a802a8 	.word	0x02a802a8
   817a4:	02a8024b 	.word	0x02a8024b
   817a8:	01130288 	.word	0x01130288
   817ac:	020701f4 	.word	0x020701f4
   817b0:	020d02a8 	.word	0x020d02a8
   817b4:	008102a8 	.word	0x008102a8
   817b8:	02a802a8 	.word	0x02a802a8
   817bc:	0232      	.short	0x0232
   817be:	3408      	adds	r4, #8
   817c0:	9b02      	ldr	r3, [sp, #8]
   817c2:	4433      	add	r3, r6
   817c4:	9302      	str	r3, [sp, #8]
   817c6:	e788      	b.n	816da <_vfiprintf_r+0xb2>
   817c8:	9801      	ldr	r0, [sp, #4]
   817ca:	9900      	ldr	r1, [sp, #0]
   817cc:	f000 fd72 	bl	822b4 <__swsetup_r>
   817d0:	b9a8      	cbnz	r0, 817fe <_vfiprintf_r+0x1d6>
   817d2:	9b00      	ldr	r3, [sp, #0]
   817d4:	899a      	ldrh	r2, [r3, #12]
   817d6:	f002 021a 	and.w	r2, r2, #26
   817da:	2a0a      	cmp	r2, #10
   817dc:	f47f af4c 	bne.w	81678 <_vfiprintf_r+0x50>
   817e0:	9b00      	ldr	r3, [sp, #0]
   817e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   817e6:	2b00      	cmp	r3, #0
   817e8:	f6ff af46 	blt.w	81678 <_vfiprintf_r+0x50>
   817ec:	9801      	ldr	r0, [sp, #4]
   817ee:	9900      	ldr	r1, [sp, #0]
   817f0:	465a      	mov	r2, fp
   817f2:	4623      	mov	r3, r4
   817f4:	f000 fd20 	bl	82238 <__sbprintf>
   817f8:	b02b      	add	sp, #172	; 0xac
   817fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   817fe:	f04f 30ff 	mov.w	r0, #4294967295
   81802:	b02b      	add	sp, #172	; 0xac
   81804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81808:	f000 fefe 	bl	82608 <__sinit>
   8180c:	e719      	b.n	81642 <_vfiprintf_r+0x1a>
   8180e:	f018 0f20 	tst.w	r8, #32
   81812:	9503      	str	r5, [sp, #12]
   81814:	46b4      	mov	ip, r6
   81816:	f000 810c 	beq.w	81a32 <_vfiprintf_r+0x40a>
   8181a:	9b04      	ldr	r3, [sp, #16]
   8181c:	3307      	adds	r3, #7
   8181e:	f023 0307 	bic.w	r3, r3, #7
   81822:	f103 0208 	add.w	r2, r3, #8
   81826:	e9d3 6700 	ldrd	r6, r7, [r3]
   8182a:	9204      	str	r2, [sp, #16]
   8182c:	2301      	movs	r3, #1
   8182e:	f04f 0200 	mov.w	r2, #0
   81832:	46e1      	mov	r9, ip
   81834:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   81838:	2500      	movs	r5, #0
   8183a:	f1bc 0f00 	cmp.w	ip, #0
   8183e:	bfa8      	it	ge
   81840:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   81844:	ea56 0207 	orrs.w	r2, r6, r7
   81848:	f040 80c4 	bne.w	819d4 <_vfiprintf_r+0x3ac>
   8184c:	f1bc 0f00 	cmp.w	ip, #0
   81850:	f000 8380 	beq.w	81f54 <_vfiprintf_r+0x92c>
   81854:	2b01      	cmp	r3, #1
   81856:	f000 80c5 	beq.w	819e4 <_vfiprintf_r+0x3bc>
   8185a:	2b02      	cmp	r3, #2
   8185c:	f000 8386 	beq.w	81f6c <_vfiprintf_r+0x944>
   81860:	4651      	mov	r1, sl
   81862:	08f2      	lsrs	r2, r6, #3
   81864:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81868:	08f8      	lsrs	r0, r7, #3
   8186a:	f006 0307 	and.w	r3, r6, #7
   8186e:	4607      	mov	r7, r0
   81870:	4616      	mov	r6, r2
   81872:	3330      	adds	r3, #48	; 0x30
   81874:	ea56 0207 	orrs.w	r2, r6, r7
   81878:	f801 3d01 	strb.w	r3, [r1, #-1]!
   8187c:	d1f1      	bne.n	81862 <_vfiprintf_r+0x23a>
   8187e:	f018 0f01 	tst.w	r8, #1
   81882:	9107      	str	r1, [sp, #28]
   81884:	f040 83fa 	bne.w	8207c <_vfiprintf_r+0xa54>
   81888:	ebc1 090a 	rsb	r9, r1, sl
   8188c:	45e1      	cmp	r9, ip
   8188e:	464e      	mov	r6, r9
   81890:	bfb8      	it	lt
   81892:	4666      	movlt	r6, ip
   81894:	b105      	cbz	r5, 81898 <_vfiprintf_r+0x270>
   81896:	3601      	adds	r6, #1
   81898:	f018 0302 	ands.w	r3, r8, #2
   8189c:	9305      	str	r3, [sp, #20]
   8189e:	bf18      	it	ne
   818a0:	3602      	addne	r6, #2
   818a2:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   818a6:	9306      	str	r3, [sp, #24]
   818a8:	f040 81f9 	bne.w	81c9e <_vfiprintf_r+0x676>
   818ac:	9b03      	ldr	r3, [sp, #12]
   818ae:	1b9d      	subs	r5, r3, r6
   818b0:	2d00      	cmp	r5, #0
   818b2:	f340 81f4 	ble.w	81c9e <_vfiprintf_r+0x676>
   818b6:	2d10      	cmp	r5, #16
   818b8:	f340 848a 	ble.w	821d0 <_vfiprintf_r+0xba8>
   818bc:	4620      	mov	r0, r4
   818be:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   818c2:	4664      	mov	r4, ip
   818c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   818c6:	4fc4      	ldr	r7, [pc, #784]	; (81bd8 <_vfiprintf_r+0x5b0>)
   818c8:	2310      	movs	r3, #16
   818ca:	4671      	mov	r1, lr
   818cc:	4684      	mov	ip, r0
   818ce:	e007      	b.n	818e0 <_vfiprintf_r+0x2b8>
   818d0:	f101 0e02 	add.w	lr, r1, #2
   818d4:	4601      	mov	r1, r0
   818d6:	f10c 0c08 	add.w	ip, ip, #8
   818da:	3d10      	subs	r5, #16
   818dc:	2d10      	cmp	r5, #16
   818de:	dd13      	ble.n	81908 <_vfiprintf_r+0x2e0>
   818e0:	1c48      	adds	r0, r1, #1
   818e2:	3210      	adds	r2, #16
   818e4:	2807      	cmp	r0, #7
   818e6:	920f      	str	r2, [sp, #60]	; 0x3c
   818e8:	f8cc 7000 	str.w	r7, [ip]
   818ec:	f8cc 3004 	str.w	r3, [ip, #4]
   818f0:	900e      	str	r0, [sp, #56]	; 0x38
   818f2:	dded      	ble.n	818d0 <_vfiprintf_r+0x2a8>
   818f4:	2a00      	cmp	r2, #0
   818f6:	f040 81c2 	bne.w	81c7e <_vfiprintf_r+0x656>
   818fa:	3d10      	subs	r5, #16
   818fc:	2d10      	cmp	r5, #16
   818fe:	4611      	mov	r1, r2
   81900:	f04f 0e01 	mov.w	lr, #1
   81904:	46d4      	mov	ip, sl
   81906:	dceb      	bgt.n	818e0 <_vfiprintf_r+0x2b8>
   81908:	4663      	mov	r3, ip
   8190a:	4671      	mov	r1, lr
   8190c:	46a4      	mov	ip, r4
   8190e:	461c      	mov	r4, r3
   81910:	442a      	add	r2, r5
   81912:	2907      	cmp	r1, #7
   81914:	920f      	str	r2, [sp, #60]	; 0x3c
   81916:	6027      	str	r7, [r4, #0]
   81918:	6065      	str	r5, [r4, #4]
   8191a:	910e      	str	r1, [sp, #56]	; 0x38
   8191c:	f300 8346 	bgt.w	81fac <_vfiprintf_r+0x984>
   81920:	3408      	adds	r4, #8
   81922:	1c48      	adds	r0, r1, #1
   81924:	e1be      	b.n	81ca4 <_vfiprintf_r+0x67c>
   81926:	4658      	mov	r0, fp
   81928:	f048 0804 	orr.w	r8, r8, #4
   8192c:	f89b 3000 	ldrb.w	r3, [fp]
   81930:	e6e3      	b.n	816fa <_vfiprintf_r+0xd2>
   81932:	f018 0320 	ands.w	r3, r8, #32
   81936:	9503      	str	r5, [sp, #12]
   81938:	46b4      	mov	ip, r6
   8193a:	d062      	beq.n	81a02 <_vfiprintf_r+0x3da>
   8193c:	9b04      	ldr	r3, [sp, #16]
   8193e:	3307      	adds	r3, #7
   81940:	f023 0307 	bic.w	r3, r3, #7
   81944:	f103 0208 	add.w	r2, r3, #8
   81948:	e9d3 6700 	ldrd	r6, r7, [r3]
   8194c:	9204      	str	r2, [sp, #16]
   8194e:	2300      	movs	r3, #0
   81950:	e76d      	b.n	8182e <_vfiprintf_r+0x206>
   81952:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   81956:	f89b 3000 	ldrb.w	r3, [fp]
   8195a:	4658      	mov	r0, fp
   8195c:	e6cd      	b.n	816fa <_vfiprintf_r+0xd2>
   8195e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   81962:	f89b 3000 	ldrb.w	r3, [fp]
   81966:	4658      	mov	r0, fp
   81968:	e6c7      	b.n	816fa <_vfiprintf_r+0xd2>
   8196a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8196e:	2500      	movs	r5, #0
   81970:	f81b 3b01 	ldrb.w	r3, [fp], #1
   81974:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81978:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8197c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81980:	2a09      	cmp	r2, #9
   81982:	d9f5      	bls.n	81970 <_vfiprintf_r+0x348>
   81984:	e6bb      	b.n	816fe <_vfiprintf_r+0xd6>
   81986:	f048 0810 	orr.w	r8, r8, #16
   8198a:	f018 0f20 	tst.w	r8, #32
   8198e:	9503      	str	r5, [sp, #12]
   81990:	46b4      	mov	ip, r6
   81992:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81996:	f000 809b 	beq.w	81ad0 <_vfiprintf_r+0x4a8>
   8199a:	9904      	ldr	r1, [sp, #16]
   8199c:	3107      	adds	r1, #7
   8199e:	f021 0107 	bic.w	r1, r1, #7
   819a2:	e9d1 2300 	ldrd	r2, r3, [r1]
   819a6:	4616      	mov	r6, r2
   819a8:	461f      	mov	r7, r3
   819aa:	3108      	adds	r1, #8
   819ac:	9104      	str	r1, [sp, #16]
   819ae:	2a00      	cmp	r2, #0
   819b0:	f173 0300 	sbcs.w	r3, r3, #0
   819b4:	f2c0 83a4 	blt.w	82100 <_vfiprintf_r+0xad8>
   819b8:	f1bc 0f00 	cmp.w	ip, #0
   819bc:	bfa8      	it	ge
   819be:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   819c2:	ea56 0207 	orrs.w	r2, r6, r7
   819c6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   819ca:	46e1      	mov	r9, ip
   819cc:	f04f 0301 	mov.w	r3, #1
   819d0:	f43f af3c 	beq.w	8184c <_vfiprintf_r+0x224>
   819d4:	2b01      	cmp	r3, #1
   819d6:	f47f af40 	bne.w	8185a <_vfiprintf_r+0x232>
   819da:	2f00      	cmp	r7, #0
   819dc:	bf08      	it	eq
   819de:	2e0a      	cmpeq	r6, #10
   819e0:	f080 8332 	bcs.w	82048 <_vfiprintf_r+0xa20>
   819e4:	ab2a      	add	r3, sp, #168	; 0xa8
   819e6:	3630      	adds	r6, #48	; 0x30
   819e8:	f803 6d41 	strb.w	r6, [r3, #-65]!
   819ec:	ebc3 090a 	rsb	r9, r3, sl
   819f0:	9307      	str	r3, [sp, #28]
   819f2:	e74b      	b.n	8188c <_vfiprintf_r+0x264>
   819f4:	f048 0810 	orr.w	r8, r8, #16
   819f8:	f018 0320 	ands.w	r3, r8, #32
   819fc:	9503      	str	r5, [sp, #12]
   819fe:	46b4      	mov	ip, r6
   81a00:	d19c      	bne.n	8193c <_vfiprintf_r+0x314>
   81a02:	f018 0210 	ands.w	r2, r8, #16
   81a06:	f040 82f7 	bne.w	81ff8 <_vfiprintf_r+0x9d0>
   81a0a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   81a0e:	f000 82f3 	beq.w	81ff8 <_vfiprintf_r+0x9d0>
   81a12:	9904      	ldr	r1, [sp, #16]
   81a14:	4613      	mov	r3, r2
   81a16:	460a      	mov	r2, r1
   81a18:	3204      	adds	r2, #4
   81a1a:	880e      	ldrh	r6, [r1, #0]
   81a1c:	2700      	movs	r7, #0
   81a1e:	9204      	str	r2, [sp, #16]
   81a20:	e705      	b.n	8182e <_vfiprintf_r+0x206>
   81a22:	f048 0810 	orr.w	r8, r8, #16
   81a26:	f018 0f20 	tst.w	r8, #32
   81a2a:	9503      	str	r5, [sp, #12]
   81a2c:	46b4      	mov	ip, r6
   81a2e:	f47f aef4 	bne.w	8181a <_vfiprintf_r+0x1f2>
   81a32:	9a04      	ldr	r2, [sp, #16]
   81a34:	f018 0f10 	tst.w	r8, #16
   81a38:	4613      	mov	r3, r2
   81a3a:	f040 82e4 	bne.w	82006 <_vfiprintf_r+0x9de>
   81a3e:	f018 0f40 	tst.w	r8, #64	; 0x40
   81a42:	f000 82e0 	beq.w	82006 <_vfiprintf_r+0x9de>
   81a46:	8816      	ldrh	r6, [r2, #0]
   81a48:	3204      	adds	r2, #4
   81a4a:	2700      	movs	r7, #0
   81a4c:	2301      	movs	r3, #1
   81a4e:	9204      	str	r2, [sp, #16]
   81a50:	e6ed      	b.n	8182e <_vfiprintf_r+0x206>
   81a52:	4a62      	ldr	r2, [pc, #392]	; (81bdc <_vfiprintf_r+0x5b4>)
   81a54:	f018 0f20 	tst.w	r8, #32
   81a58:	9503      	str	r5, [sp, #12]
   81a5a:	46b4      	mov	ip, r6
   81a5c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81a60:	9209      	str	r2, [sp, #36]	; 0x24
   81a62:	f000 808f 	beq.w	81b84 <_vfiprintf_r+0x55c>
   81a66:	9a04      	ldr	r2, [sp, #16]
   81a68:	3207      	adds	r2, #7
   81a6a:	f022 0207 	bic.w	r2, r2, #7
   81a6e:	f102 0108 	add.w	r1, r2, #8
   81a72:	9104      	str	r1, [sp, #16]
   81a74:	e9d2 6700 	ldrd	r6, r7, [r2]
   81a78:	f018 0f01 	tst.w	r8, #1
   81a7c:	f000 828f 	beq.w	81f9e <_vfiprintf_r+0x976>
   81a80:	ea56 0207 	orrs.w	r2, r6, r7
   81a84:	f000 828b 	beq.w	81f9e <_vfiprintf_r+0x976>
   81a88:	2230      	movs	r2, #48	; 0x30
   81a8a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81a8e:	f048 0802 	orr.w	r8, r8, #2
   81a92:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   81a96:	2302      	movs	r3, #2
   81a98:	e6c9      	b.n	8182e <_vfiprintf_r+0x206>
   81a9a:	9a04      	ldr	r2, [sp, #16]
   81a9c:	2601      	movs	r6, #1
   81a9e:	6813      	ldr	r3, [r2, #0]
   81aa0:	f04f 0100 	mov.w	r1, #0
   81aa4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81aa8:	4613      	mov	r3, r2
   81aaa:	46b1      	mov	r9, r6
   81aac:	3304      	adds	r3, #4
   81aae:	9304      	str	r3, [sp, #16]
   81ab0:	ab10      	add	r3, sp, #64	; 0x40
   81ab2:	9503      	str	r5, [sp, #12]
   81ab4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81ab8:	9307      	str	r3, [sp, #28]
   81aba:	f04f 0c00 	mov.w	ip, #0
   81abe:	e6eb      	b.n	81898 <_vfiprintf_r+0x270>
   81ac0:	f018 0f20 	tst.w	r8, #32
   81ac4:	9503      	str	r5, [sp, #12]
   81ac6:	46b4      	mov	ip, r6
   81ac8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81acc:	f47f af65 	bne.w	8199a <_vfiprintf_r+0x372>
   81ad0:	9a04      	ldr	r2, [sp, #16]
   81ad2:	f018 0f10 	tst.w	r8, #16
   81ad6:	4613      	mov	r3, r2
   81ad8:	f040 82a0 	bne.w	8201c <_vfiprintf_r+0x9f4>
   81adc:	f018 0f40 	tst.w	r8, #64	; 0x40
   81ae0:	f000 829c 	beq.w	8201c <_vfiprintf_r+0x9f4>
   81ae4:	f9b2 6000 	ldrsh.w	r6, [r2]
   81ae8:	3304      	adds	r3, #4
   81aea:	17f7      	asrs	r7, r6, #31
   81aec:	9304      	str	r3, [sp, #16]
   81aee:	4632      	mov	r2, r6
   81af0:	463b      	mov	r3, r7
   81af2:	e75c      	b.n	819ae <_vfiprintf_r+0x386>
   81af4:	9904      	ldr	r1, [sp, #16]
   81af6:	2378      	movs	r3, #120	; 0x78
   81af8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81afc:	4b38      	ldr	r3, [pc, #224]	; (81be0 <_vfiprintf_r+0x5b8>)
   81afe:	46b4      	mov	ip, r6
   81b00:	2230      	movs	r2, #48	; 0x30
   81b02:	680e      	ldr	r6, [r1, #0]
   81b04:	3104      	adds	r1, #4
   81b06:	9309      	str	r3, [sp, #36]	; 0x24
   81b08:	9503      	str	r5, [sp, #12]
   81b0a:	f048 0802 	orr.w	r8, r8, #2
   81b0e:	9104      	str	r1, [sp, #16]
   81b10:	2700      	movs	r7, #0
   81b12:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   81b16:	2302      	movs	r3, #2
   81b18:	e689      	b.n	8182e <_vfiprintf_r+0x206>
   81b1a:	f048 0820 	orr.w	r8, r8, #32
   81b1e:	f89b 3000 	ldrb.w	r3, [fp]
   81b22:	4658      	mov	r0, fp
   81b24:	e5e9      	b.n	816fa <_vfiprintf_r+0xd2>
   81b26:	f04f 0100 	mov.w	r1, #0
   81b2a:	9a04      	ldr	r2, [sp, #16]
   81b2c:	9503      	str	r5, [sp, #12]
   81b2e:	6813      	ldr	r3, [r2, #0]
   81b30:	46b4      	mov	ip, r6
   81b32:	9307      	str	r3, [sp, #28]
   81b34:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81b38:	1d15      	adds	r5, r2, #4
   81b3a:	2b00      	cmp	r3, #0
   81b3c:	f000 834e 	beq.w	821dc <_vfiprintf_r+0xbb4>
   81b40:	2e00      	cmp	r6, #0
   81b42:	f2c0 8329 	blt.w	82198 <_vfiprintf_r+0xb70>
   81b46:	9e07      	ldr	r6, [sp, #28]
   81b48:	4662      	mov	r2, ip
   81b4a:	4630      	mov	r0, r6
   81b4c:	2100      	movs	r1, #0
   81b4e:	f8cd c010 	str.w	ip, [sp, #16]
   81b52:	f001 fbc9 	bl	832e8 <memchr>
   81b56:	f8dd c010 	ldr.w	ip, [sp, #16]
   81b5a:	2800      	cmp	r0, #0
   81b5c:	f000 834e 	beq.w	821fc <_vfiprintf_r+0xbd4>
   81b60:	9504      	str	r5, [sp, #16]
   81b62:	ebc6 0900 	rsb	r9, r6, r0
   81b66:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81b6a:	f04f 0c00 	mov.w	ip, #0
   81b6e:	e68d      	b.n	8188c <_vfiprintf_r+0x264>
   81b70:	4a1b      	ldr	r2, [pc, #108]	; (81be0 <_vfiprintf_r+0x5b8>)
   81b72:	f018 0f20 	tst.w	r8, #32
   81b76:	9503      	str	r5, [sp, #12]
   81b78:	46b4      	mov	ip, r6
   81b7a:	9209      	str	r2, [sp, #36]	; 0x24
   81b7c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81b80:	f47f af71 	bne.w	81a66 <_vfiprintf_r+0x43e>
   81b84:	9904      	ldr	r1, [sp, #16]
   81b86:	f018 0f10 	tst.w	r8, #16
   81b8a:	460a      	mov	r2, r1
   81b8c:	f040 8241 	bne.w	82012 <_vfiprintf_r+0x9ea>
   81b90:	f018 0f40 	tst.w	r8, #64	; 0x40
   81b94:	f000 823d 	beq.w	82012 <_vfiprintf_r+0x9ea>
   81b98:	3204      	adds	r2, #4
   81b9a:	880e      	ldrh	r6, [r1, #0]
   81b9c:	2700      	movs	r7, #0
   81b9e:	9204      	str	r2, [sp, #16]
   81ba0:	e76a      	b.n	81a78 <_vfiprintf_r+0x450>
   81ba2:	f89b 3000 	ldrb.w	r3, [fp]
   81ba6:	2b6c      	cmp	r3, #108	; 0x6c
   81ba8:	f000 82e9 	beq.w	8217e <_vfiprintf_r+0xb56>
   81bac:	f048 0810 	orr.w	r8, r8, #16
   81bb0:	4658      	mov	r0, fp
   81bb2:	e5a2      	b.n	816fa <_vfiprintf_r+0xd2>
   81bb4:	9a04      	ldr	r2, [sp, #16]
   81bb6:	4613      	mov	r3, r2
   81bb8:	6815      	ldr	r5, [r2, #0]
   81bba:	3304      	adds	r3, #4
   81bbc:	2d00      	cmp	r5, #0
   81bbe:	f2c0 82e6 	blt.w	8218e <_vfiprintf_r+0xb66>
   81bc2:	9304      	str	r3, [sp, #16]
   81bc4:	f89b 3000 	ldrb.w	r3, [fp]
   81bc8:	4658      	mov	r0, fp
   81bca:	e596      	b.n	816fa <_vfiprintf_r+0xd2>
   81bcc:	f89b 3000 	ldrb.w	r3, [fp]
   81bd0:	4658      	mov	r0, fp
   81bd2:	212b      	movs	r1, #43	; 0x2b
   81bd4:	e591      	b.n	816fa <_vfiprintf_r+0xd2>
   81bd6:	bf00      	nop
   81bd8:	00084234 	.word	0x00084234
   81bdc:	00084204 	.word	0x00084204
   81be0:	00084218 	.word	0x00084218
   81be4:	f89b 3000 	ldrb.w	r3, [fp]
   81be8:	f10b 0001 	add.w	r0, fp, #1
   81bec:	2b2a      	cmp	r3, #42	; 0x2a
   81bee:	f000 830f 	beq.w	82210 <_vfiprintf_r+0xbe8>
   81bf2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81bf6:	2a09      	cmp	r2, #9
   81bf8:	4683      	mov	fp, r0
   81bfa:	f04f 0600 	mov.w	r6, #0
   81bfe:	f63f ad7e 	bhi.w	816fe <_vfiprintf_r+0xd6>
   81c02:	f81b 3b01 	ldrb.w	r3, [fp], #1
   81c06:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81c0a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   81c0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81c12:	2a09      	cmp	r2, #9
   81c14:	d9f5      	bls.n	81c02 <_vfiprintf_r+0x5da>
   81c16:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   81c1a:	e570      	b.n	816fe <_vfiprintf_r+0xd6>
   81c1c:	f018 0f20 	tst.w	r8, #32
   81c20:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81c24:	f000 8283 	beq.w	8212e <_vfiprintf_r+0xb06>
   81c28:	9a04      	ldr	r2, [sp, #16]
   81c2a:	4613      	mov	r3, r2
   81c2c:	3304      	adds	r3, #4
   81c2e:	9304      	str	r3, [sp, #16]
   81c30:	9b02      	ldr	r3, [sp, #8]
   81c32:	6811      	ldr	r1, [r2, #0]
   81c34:	17df      	asrs	r7, r3, #31
   81c36:	461a      	mov	r2, r3
   81c38:	463b      	mov	r3, r7
   81c3a:	e9c1 2300 	strd	r2, r3, [r1]
   81c3e:	e525      	b.n	8168c <_vfiprintf_r+0x64>
   81c40:	4658      	mov	r0, fp
   81c42:	f89b 3000 	ldrb.w	r3, [fp]
   81c46:	2900      	cmp	r1, #0
   81c48:	f47f ad57 	bne.w	816fa <_vfiprintf_r+0xd2>
   81c4c:	2120      	movs	r1, #32
   81c4e:	e554      	b.n	816fa <_vfiprintf_r+0xd2>
   81c50:	f048 0801 	orr.w	r8, r8, #1
   81c54:	4658      	mov	r0, fp
   81c56:	f89b 3000 	ldrb.w	r3, [fp]
   81c5a:	e54e      	b.n	816fa <_vfiprintf_r+0xd2>
   81c5c:	9503      	str	r5, [sp, #12]
   81c5e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81c62:	2b00      	cmp	r3, #0
   81c64:	f000 809c 	beq.w	81da0 <_vfiprintf_r+0x778>
   81c68:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81c6c:	f04f 0300 	mov.w	r3, #0
   81c70:	2601      	movs	r6, #1
   81c72:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   81c76:	ab10      	add	r3, sp, #64	; 0x40
   81c78:	46b1      	mov	r9, r6
   81c7a:	9307      	str	r3, [sp, #28]
   81c7c:	e71d      	b.n	81aba <_vfiprintf_r+0x492>
   81c7e:	9801      	ldr	r0, [sp, #4]
   81c80:	9900      	ldr	r1, [sp, #0]
   81c82:	aa0d      	add	r2, sp, #52	; 0x34
   81c84:	9308      	str	r3, [sp, #32]
   81c86:	f7ff fc93 	bl	815b0 <__sprint_r.part.0>
   81c8a:	2800      	cmp	r0, #0
   81c8c:	f040 808f 	bne.w	81dae <_vfiprintf_r+0x786>
   81c90:	990e      	ldr	r1, [sp, #56]	; 0x38
   81c92:	46d4      	mov	ip, sl
   81c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81c96:	f101 0e01 	add.w	lr, r1, #1
   81c9a:	9b08      	ldr	r3, [sp, #32]
   81c9c:	e61d      	b.n	818da <_vfiprintf_r+0x2b2>
   81c9e:	990e      	ldr	r1, [sp, #56]	; 0x38
   81ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81ca2:	1c48      	adds	r0, r1, #1
   81ca4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81ca8:	b16b      	cbz	r3, 81cc6 <_vfiprintf_r+0x69e>
   81caa:	3201      	adds	r2, #1
   81cac:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   81cb0:	2101      	movs	r1, #1
   81cb2:	2807      	cmp	r0, #7
   81cb4:	920f      	str	r2, [sp, #60]	; 0x3c
   81cb6:	900e      	str	r0, [sp, #56]	; 0x38
   81cb8:	6023      	str	r3, [r4, #0]
   81cba:	6061      	str	r1, [r4, #4]
   81cbc:	f300 8134 	bgt.w	81f28 <_vfiprintf_r+0x900>
   81cc0:	4601      	mov	r1, r0
   81cc2:	3408      	adds	r4, #8
   81cc4:	3001      	adds	r0, #1
   81cc6:	9b05      	ldr	r3, [sp, #20]
   81cc8:	b163      	cbz	r3, 81ce4 <_vfiprintf_r+0x6bc>
   81cca:	3202      	adds	r2, #2
   81ccc:	a90c      	add	r1, sp, #48	; 0x30
   81cce:	2302      	movs	r3, #2
   81cd0:	2807      	cmp	r0, #7
   81cd2:	920f      	str	r2, [sp, #60]	; 0x3c
   81cd4:	900e      	str	r0, [sp, #56]	; 0x38
   81cd6:	e884 000a 	stmia.w	r4, {r1, r3}
   81cda:	f300 8134 	bgt.w	81f46 <_vfiprintf_r+0x91e>
   81cde:	4601      	mov	r1, r0
   81ce0:	3408      	adds	r4, #8
   81ce2:	3001      	adds	r0, #1
   81ce4:	9b06      	ldr	r3, [sp, #24]
   81ce6:	2b80      	cmp	r3, #128	; 0x80
   81ce8:	f000 80d4 	beq.w	81e94 <_vfiprintf_r+0x86c>
   81cec:	ebc9 070c 	rsb	r7, r9, ip
   81cf0:	2f00      	cmp	r7, #0
   81cf2:	dd2b      	ble.n	81d4c <_vfiprintf_r+0x724>
   81cf4:	2f10      	cmp	r7, #16
   81cf6:	4dab      	ldr	r5, [pc, #684]	; (81fa4 <_vfiprintf_r+0x97c>)
   81cf8:	dd1f      	ble.n	81d3a <_vfiprintf_r+0x712>
   81cfa:	46a6      	mov	lr, r4
   81cfc:	2310      	movs	r3, #16
   81cfe:	9c01      	ldr	r4, [sp, #4]
   81d00:	e007      	b.n	81d12 <_vfiprintf_r+0x6ea>
   81d02:	f101 0c02 	add.w	ip, r1, #2
   81d06:	4601      	mov	r1, r0
   81d08:	f10e 0e08 	add.w	lr, lr, #8
   81d0c:	3f10      	subs	r7, #16
   81d0e:	2f10      	cmp	r7, #16
   81d10:	dd11      	ble.n	81d36 <_vfiprintf_r+0x70e>
   81d12:	1c48      	adds	r0, r1, #1
   81d14:	3210      	adds	r2, #16
   81d16:	2807      	cmp	r0, #7
   81d18:	920f      	str	r2, [sp, #60]	; 0x3c
   81d1a:	f8ce 5000 	str.w	r5, [lr]
   81d1e:	f8ce 3004 	str.w	r3, [lr, #4]
   81d22:	900e      	str	r0, [sp, #56]	; 0x38
   81d24:	dded      	ble.n	81d02 <_vfiprintf_r+0x6da>
   81d26:	bb6a      	cbnz	r2, 81d84 <_vfiprintf_r+0x75c>
   81d28:	3f10      	subs	r7, #16
   81d2a:	2f10      	cmp	r7, #16
   81d2c:	f04f 0c01 	mov.w	ip, #1
   81d30:	4611      	mov	r1, r2
   81d32:	46d6      	mov	lr, sl
   81d34:	dced      	bgt.n	81d12 <_vfiprintf_r+0x6ea>
   81d36:	4674      	mov	r4, lr
   81d38:	4660      	mov	r0, ip
   81d3a:	443a      	add	r2, r7
   81d3c:	2807      	cmp	r0, #7
   81d3e:	920f      	str	r2, [sp, #60]	; 0x3c
   81d40:	e884 00a0 	stmia.w	r4, {r5, r7}
   81d44:	900e      	str	r0, [sp, #56]	; 0x38
   81d46:	dc3b      	bgt.n	81dc0 <_vfiprintf_r+0x798>
   81d48:	3408      	adds	r4, #8
   81d4a:	3001      	adds	r0, #1
   81d4c:	eb02 0309 	add.w	r3, r2, r9
   81d50:	9a07      	ldr	r2, [sp, #28]
   81d52:	2807      	cmp	r0, #7
   81d54:	930f      	str	r3, [sp, #60]	; 0x3c
   81d56:	e884 0204 	stmia.w	r4, {r2, r9}
   81d5a:	900e      	str	r0, [sp, #56]	; 0x38
   81d5c:	dd3d      	ble.n	81dda <_vfiprintf_r+0x7b2>
   81d5e:	2b00      	cmp	r3, #0
   81d60:	f040 813f 	bne.w	81fe2 <_vfiprintf_r+0x9ba>
   81d64:	f018 0f04 	tst.w	r8, #4
   81d68:	930e      	str	r3, [sp, #56]	; 0x38
   81d6a:	f040 8130 	bne.w	81fce <_vfiprintf_r+0x9a6>
   81d6e:	9b02      	ldr	r3, [sp, #8]
   81d70:	9a03      	ldr	r2, [sp, #12]
   81d72:	4296      	cmp	r6, r2
   81d74:	bfac      	ite	ge
   81d76:	199b      	addge	r3, r3, r6
   81d78:	189b      	addlt	r3, r3, r2
   81d7a:	9302      	str	r3, [sp, #8]
   81d7c:	2300      	movs	r3, #0
   81d7e:	930e      	str	r3, [sp, #56]	; 0x38
   81d80:	4654      	mov	r4, sl
   81d82:	e483      	b.n	8168c <_vfiprintf_r+0x64>
   81d84:	4620      	mov	r0, r4
   81d86:	9900      	ldr	r1, [sp, #0]
   81d88:	aa0d      	add	r2, sp, #52	; 0x34
   81d8a:	9305      	str	r3, [sp, #20]
   81d8c:	f7ff fc10 	bl	815b0 <__sprint_r.part.0>
   81d90:	b968      	cbnz	r0, 81dae <_vfiprintf_r+0x786>
   81d92:	990e      	ldr	r1, [sp, #56]	; 0x38
   81d94:	46d6      	mov	lr, sl
   81d96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81d98:	f101 0c01 	add.w	ip, r1, #1
   81d9c:	9b05      	ldr	r3, [sp, #20]
   81d9e:	e7b5      	b.n	81d0c <_vfiprintf_r+0x6e4>
   81da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81da2:	b123      	cbz	r3, 81dae <_vfiprintf_r+0x786>
   81da4:	9801      	ldr	r0, [sp, #4]
   81da6:	9900      	ldr	r1, [sp, #0]
   81da8:	aa0d      	add	r2, sp, #52	; 0x34
   81daa:	f7ff fc01 	bl	815b0 <__sprint_r.part.0>
   81dae:	9b00      	ldr	r3, [sp, #0]
   81db0:	899b      	ldrh	r3, [r3, #12]
   81db2:	065b      	lsls	r3, r3, #25
   81db4:	f53f ad23 	bmi.w	817fe <_vfiprintf_r+0x1d6>
   81db8:	9802      	ldr	r0, [sp, #8]
   81dba:	b02b      	add	sp, #172	; 0xac
   81dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81dc0:	2a00      	cmp	r2, #0
   81dc2:	f040 8190 	bne.w	820e6 <_vfiprintf_r+0xabe>
   81dc6:	464b      	mov	r3, r9
   81dc8:	4654      	mov	r4, sl
   81dca:	9907      	ldr	r1, [sp, #28]
   81dcc:	2201      	movs	r2, #1
   81dce:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   81dd2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   81dd6:	911a      	str	r1, [sp, #104]	; 0x68
   81dd8:	920e      	str	r2, [sp, #56]	; 0x38
   81dda:	f104 0208 	add.w	r2, r4, #8
   81dde:	f018 0f04 	tst.w	r8, #4
   81de2:	d039      	beq.n	81e58 <_vfiprintf_r+0x830>
   81de4:	9903      	ldr	r1, [sp, #12]
   81de6:	1b8d      	subs	r5, r1, r6
   81de8:	2d00      	cmp	r5, #0
   81dea:	dd35      	ble.n	81e58 <_vfiprintf_r+0x830>
   81dec:	2d10      	cmp	r5, #16
   81dee:	f340 8200 	ble.w	821f2 <_vfiprintf_r+0xbca>
   81df2:	980e      	ldr	r0, [sp, #56]	; 0x38
   81df4:	4f6c      	ldr	r7, [pc, #432]	; (81fa8 <_vfiprintf_r+0x980>)
   81df6:	2410      	movs	r4, #16
   81df8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   81dfc:	f8dd 9000 	ldr.w	r9, [sp]
   81e00:	e006      	b.n	81e10 <_vfiprintf_r+0x7e8>
   81e02:	f100 0e02 	add.w	lr, r0, #2
   81e06:	4608      	mov	r0, r1
   81e08:	3208      	adds	r2, #8
   81e0a:	3d10      	subs	r5, #16
   81e0c:	2d10      	cmp	r5, #16
   81e0e:	dd10      	ble.n	81e32 <_vfiprintf_r+0x80a>
   81e10:	1c41      	adds	r1, r0, #1
   81e12:	3310      	adds	r3, #16
   81e14:	2907      	cmp	r1, #7
   81e16:	930f      	str	r3, [sp, #60]	; 0x3c
   81e18:	6017      	str	r7, [r2, #0]
   81e1a:	6054      	str	r4, [r2, #4]
   81e1c:	910e      	str	r1, [sp, #56]	; 0x38
   81e1e:	ddf0      	ble.n	81e02 <_vfiprintf_r+0x7da>
   81e20:	2b00      	cmp	r3, #0
   81e22:	d12a      	bne.n	81e7a <_vfiprintf_r+0x852>
   81e24:	3d10      	subs	r5, #16
   81e26:	2d10      	cmp	r5, #16
   81e28:	f04f 0e01 	mov.w	lr, #1
   81e2c:	4618      	mov	r0, r3
   81e2e:	4652      	mov	r2, sl
   81e30:	dcee      	bgt.n	81e10 <_vfiprintf_r+0x7e8>
   81e32:	442b      	add	r3, r5
   81e34:	f1be 0f07 	cmp.w	lr, #7
   81e38:	930f      	str	r3, [sp, #60]	; 0x3c
   81e3a:	6017      	str	r7, [r2, #0]
   81e3c:	6055      	str	r5, [r2, #4]
   81e3e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81e42:	dd09      	ble.n	81e58 <_vfiprintf_r+0x830>
   81e44:	2b00      	cmp	r3, #0
   81e46:	d092      	beq.n	81d6e <_vfiprintf_r+0x746>
   81e48:	9801      	ldr	r0, [sp, #4]
   81e4a:	9900      	ldr	r1, [sp, #0]
   81e4c:	aa0d      	add	r2, sp, #52	; 0x34
   81e4e:	f7ff fbaf 	bl	815b0 <__sprint_r.part.0>
   81e52:	2800      	cmp	r0, #0
   81e54:	d1ab      	bne.n	81dae <_vfiprintf_r+0x786>
   81e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81e58:	9a02      	ldr	r2, [sp, #8]
   81e5a:	9903      	ldr	r1, [sp, #12]
   81e5c:	428e      	cmp	r6, r1
   81e5e:	bfac      	ite	ge
   81e60:	1992      	addge	r2, r2, r6
   81e62:	1852      	addlt	r2, r2, r1
   81e64:	9202      	str	r2, [sp, #8]
   81e66:	2b00      	cmp	r3, #0
   81e68:	d088      	beq.n	81d7c <_vfiprintf_r+0x754>
   81e6a:	9801      	ldr	r0, [sp, #4]
   81e6c:	9900      	ldr	r1, [sp, #0]
   81e6e:	aa0d      	add	r2, sp, #52	; 0x34
   81e70:	f7ff fb9e 	bl	815b0 <__sprint_r.part.0>
   81e74:	2800      	cmp	r0, #0
   81e76:	d081      	beq.n	81d7c <_vfiprintf_r+0x754>
   81e78:	e799      	b.n	81dae <_vfiprintf_r+0x786>
   81e7a:	4640      	mov	r0, r8
   81e7c:	4649      	mov	r1, r9
   81e7e:	aa0d      	add	r2, sp, #52	; 0x34
   81e80:	f7ff fb96 	bl	815b0 <__sprint_r.part.0>
   81e84:	2800      	cmp	r0, #0
   81e86:	d192      	bne.n	81dae <_vfiprintf_r+0x786>
   81e88:	980e      	ldr	r0, [sp, #56]	; 0x38
   81e8a:	4652      	mov	r2, sl
   81e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81e8e:	f100 0e01 	add.w	lr, r0, #1
   81e92:	e7ba      	b.n	81e0a <_vfiprintf_r+0x7e2>
   81e94:	9b03      	ldr	r3, [sp, #12]
   81e96:	1b9f      	subs	r7, r3, r6
   81e98:	2f00      	cmp	r7, #0
   81e9a:	f77f af27 	ble.w	81cec <_vfiprintf_r+0x6c4>
   81e9e:	2f10      	cmp	r7, #16
   81ea0:	f340 81b3 	ble.w	8220a <_vfiprintf_r+0xbe2>
   81ea4:	4620      	mov	r0, r4
   81ea6:	4d3f      	ldr	r5, [pc, #252]	; (81fa4 <_vfiprintf_r+0x97c>)
   81ea8:	4664      	mov	r4, ip
   81eaa:	2310      	movs	r3, #16
   81eac:	4684      	mov	ip, r0
   81eae:	e007      	b.n	81ec0 <_vfiprintf_r+0x898>
   81eb0:	f101 0e02 	add.w	lr, r1, #2
   81eb4:	4601      	mov	r1, r0
   81eb6:	f10c 0c08 	add.w	ip, ip, #8
   81eba:	3f10      	subs	r7, #16
   81ebc:	2f10      	cmp	r7, #16
   81ebe:	dd11      	ble.n	81ee4 <_vfiprintf_r+0x8bc>
   81ec0:	1c48      	adds	r0, r1, #1
   81ec2:	3210      	adds	r2, #16
   81ec4:	2807      	cmp	r0, #7
   81ec6:	920f      	str	r2, [sp, #60]	; 0x3c
   81ec8:	f8cc 5000 	str.w	r5, [ip]
   81ecc:	f8cc 3004 	str.w	r3, [ip, #4]
   81ed0:	900e      	str	r0, [sp, #56]	; 0x38
   81ed2:	dded      	ble.n	81eb0 <_vfiprintf_r+0x888>
   81ed4:	b9c2      	cbnz	r2, 81f08 <_vfiprintf_r+0x8e0>
   81ed6:	3f10      	subs	r7, #16
   81ed8:	2f10      	cmp	r7, #16
   81eda:	f04f 0e01 	mov.w	lr, #1
   81ede:	4611      	mov	r1, r2
   81ee0:	46d4      	mov	ip, sl
   81ee2:	dced      	bgt.n	81ec0 <_vfiprintf_r+0x898>
   81ee4:	4663      	mov	r3, ip
   81ee6:	46a4      	mov	ip, r4
   81ee8:	461c      	mov	r4, r3
   81eea:	443a      	add	r2, r7
   81eec:	f1be 0f07 	cmp.w	lr, #7
   81ef0:	920f      	str	r2, [sp, #60]	; 0x3c
   81ef2:	e884 00a0 	stmia.w	r4, {r5, r7}
   81ef6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81efa:	f300 80ee 	bgt.w	820da <_vfiprintf_r+0xab2>
   81efe:	3408      	adds	r4, #8
   81f00:	f10e 0001 	add.w	r0, lr, #1
   81f04:	4671      	mov	r1, lr
   81f06:	e6f1      	b.n	81cec <_vfiprintf_r+0x6c4>
   81f08:	9801      	ldr	r0, [sp, #4]
   81f0a:	9900      	ldr	r1, [sp, #0]
   81f0c:	aa0d      	add	r2, sp, #52	; 0x34
   81f0e:	9305      	str	r3, [sp, #20]
   81f10:	f7ff fb4e 	bl	815b0 <__sprint_r.part.0>
   81f14:	2800      	cmp	r0, #0
   81f16:	f47f af4a 	bne.w	81dae <_vfiprintf_r+0x786>
   81f1a:	990e      	ldr	r1, [sp, #56]	; 0x38
   81f1c:	46d4      	mov	ip, sl
   81f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81f20:	f101 0e01 	add.w	lr, r1, #1
   81f24:	9b05      	ldr	r3, [sp, #20]
   81f26:	e7c8      	b.n	81eba <_vfiprintf_r+0x892>
   81f28:	2a00      	cmp	r2, #0
   81f2a:	f040 80c5 	bne.w	820b8 <_vfiprintf_r+0xa90>
   81f2e:	9b05      	ldr	r3, [sp, #20]
   81f30:	2b00      	cmp	r3, #0
   81f32:	f000 8085 	beq.w	82040 <_vfiprintf_r+0xa18>
   81f36:	aa0c      	add	r2, sp, #48	; 0x30
   81f38:	2302      	movs	r3, #2
   81f3a:	921a      	str	r2, [sp, #104]	; 0x68
   81f3c:	4608      	mov	r0, r1
   81f3e:	931b      	str	r3, [sp, #108]	; 0x6c
   81f40:	461a      	mov	r2, r3
   81f42:	4654      	mov	r4, sl
   81f44:	e6cb      	b.n	81cde <_vfiprintf_r+0x6b6>
   81f46:	2a00      	cmp	r2, #0
   81f48:	f040 80a5 	bne.w	82096 <_vfiprintf_r+0xa6e>
   81f4c:	2001      	movs	r0, #1
   81f4e:	4611      	mov	r1, r2
   81f50:	4654      	mov	r4, sl
   81f52:	e6c7      	b.n	81ce4 <_vfiprintf_r+0x6bc>
   81f54:	bb03      	cbnz	r3, 81f98 <_vfiprintf_r+0x970>
   81f56:	f018 0f01 	tst.w	r8, #1
   81f5a:	d01d      	beq.n	81f98 <_vfiprintf_r+0x970>
   81f5c:	ab2a      	add	r3, sp, #168	; 0xa8
   81f5e:	2230      	movs	r2, #48	; 0x30
   81f60:	f803 2d41 	strb.w	r2, [r3, #-65]!
   81f64:	ebc3 090a 	rsb	r9, r3, sl
   81f68:	9307      	str	r3, [sp, #28]
   81f6a:	e48f      	b.n	8188c <_vfiprintf_r+0x264>
   81f6c:	46d1      	mov	r9, sl
   81f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
   81f70:	0933      	lsrs	r3, r6, #4
   81f72:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81f76:	0939      	lsrs	r1, r7, #4
   81f78:	f006 020f 	and.w	r2, r6, #15
   81f7c:	460f      	mov	r7, r1
   81f7e:	461e      	mov	r6, r3
   81f80:	5c83      	ldrb	r3, [r0, r2]
   81f82:	f809 3d01 	strb.w	r3, [r9, #-1]!
   81f86:	ea56 0307 	orrs.w	r3, r6, r7
   81f8a:	d1f1      	bne.n	81f70 <_vfiprintf_r+0x948>
   81f8c:	464b      	mov	r3, r9
   81f8e:	f8cd 901c 	str.w	r9, [sp, #28]
   81f92:	ebc3 090a 	rsb	r9, r3, sl
   81f96:	e479      	b.n	8188c <_vfiprintf_r+0x264>
   81f98:	f8cd a01c 	str.w	sl, [sp, #28]
   81f9c:	e476      	b.n	8188c <_vfiprintf_r+0x264>
   81f9e:	2302      	movs	r3, #2
   81fa0:	e445      	b.n	8182e <_vfiprintf_r+0x206>
   81fa2:	bf00      	nop
   81fa4:	000841f4 	.word	0x000841f4
   81fa8:	00084234 	.word	0x00084234
   81fac:	2a00      	cmp	r2, #0
   81fae:	f040 80d5 	bne.w	8215c <_vfiprintf_r+0xb34>
   81fb2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81fb6:	2b00      	cmp	r3, #0
   81fb8:	f000 80ac 	beq.w	82114 <_vfiprintf_r+0xaec>
   81fbc:	2301      	movs	r3, #1
   81fbe:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   81fc2:	4618      	mov	r0, r3
   81fc4:	931b      	str	r3, [sp, #108]	; 0x6c
   81fc6:	461a      	mov	r2, r3
   81fc8:	911a      	str	r1, [sp, #104]	; 0x68
   81fca:	4654      	mov	r4, sl
   81fcc:	e678      	b.n	81cc0 <_vfiprintf_r+0x698>
   81fce:	9a03      	ldr	r2, [sp, #12]
   81fd0:	1b95      	subs	r5, r2, r6
   81fd2:	2d00      	cmp	r5, #0
   81fd4:	4652      	mov	r2, sl
   81fd6:	f73f af09 	bgt.w	81dec <_vfiprintf_r+0x7c4>
   81fda:	e6c8      	b.n	81d6e <_vfiprintf_r+0x746>
   81fdc:	465d      	mov	r5, fp
   81fde:	f7ff bb7c 	b.w	816da <_vfiprintf_r+0xb2>
   81fe2:	9801      	ldr	r0, [sp, #4]
   81fe4:	9900      	ldr	r1, [sp, #0]
   81fe6:	aa0d      	add	r2, sp, #52	; 0x34
   81fe8:	f7ff fae2 	bl	815b0 <__sprint_r.part.0>
   81fec:	2800      	cmp	r0, #0
   81fee:	f47f aede 	bne.w	81dae <_vfiprintf_r+0x786>
   81ff2:	4652      	mov	r2, sl
   81ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81ff6:	e6f2      	b.n	81dde <_vfiprintf_r+0x7b6>
   81ff8:	9904      	ldr	r1, [sp, #16]
   81ffa:	2700      	movs	r7, #0
   81ffc:	460a      	mov	r2, r1
   81ffe:	3204      	adds	r2, #4
   82000:	680e      	ldr	r6, [r1, #0]
   82002:	9204      	str	r2, [sp, #16]
   82004:	e413      	b.n	8182e <_vfiprintf_r+0x206>
   82006:	3204      	adds	r2, #4
   82008:	681e      	ldr	r6, [r3, #0]
   8200a:	2700      	movs	r7, #0
   8200c:	2301      	movs	r3, #1
   8200e:	9204      	str	r2, [sp, #16]
   82010:	e40d      	b.n	8182e <_vfiprintf_r+0x206>
   82012:	6816      	ldr	r6, [r2, #0]
   82014:	3204      	adds	r2, #4
   82016:	9204      	str	r2, [sp, #16]
   82018:	2700      	movs	r7, #0
   8201a:	e52d      	b.n	81a78 <_vfiprintf_r+0x450>
   8201c:	681e      	ldr	r6, [r3, #0]
   8201e:	3304      	adds	r3, #4
   82020:	17f7      	asrs	r7, r6, #31
   82022:	9304      	str	r3, [sp, #16]
   82024:	4632      	mov	r2, r6
   82026:	463b      	mov	r3, r7
   82028:	e4c1      	b.n	819ae <_vfiprintf_r+0x386>
   8202a:	9801      	ldr	r0, [sp, #4]
   8202c:	9900      	ldr	r1, [sp, #0]
   8202e:	aa0d      	add	r2, sp, #52	; 0x34
   82030:	f7ff fabe 	bl	815b0 <__sprint_r.part.0>
   82034:	2800      	cmp	r0, #0
   82036:	f47f aeba 	bne.w	81dae <_vfiprintf_r+0x786>
   8203a:	4654      	mov	r4, sl
   8203c:	f7ff bbc0 	b.w	817c0 <_vfiprintf_r+0x198>
   82040:	4608      	mov	r0, r1
   82042:	4654      	mov	r4, sl
   82044:	4611      	mov	r1, r2
   82046:	e64d      	b.n	81ce4 <_vfiprintf_r+0x6bc>
   82048:	46d1      	mov	r9, sl
   8204a:	f8cd c014 	str.w	ip, [sp, #20]
   8204e:	4630      	mov	r0, r6
   82050:	4639      	mov	r1, r7
   82052:	220a      	movs	r2, #10
   82054:	2300      	movs	r3, #0
   82056:	f001 fdd1 	bl	83bfc <__aeabi_uldivmod>
   8205a:	3230      	adds	r2, #48	; 0x30
   8205c:	4630      	mov	r0, r6
   8205e:	4639      	mov	r1, r7
   82060:	f809 2d01 	strb.w	r2, [r9, #-1]!
   82064:	2300      	movs	r3, #0
   82066:	220a      	movs	r2, #10
   82068:	f001 fdc8 	bl	83bfc <__aeabi_uldivmod>
   8206c:	4606      	mov	r6, r0
   8206e:	460f      	mov	r7, r1
   82070:	ea56 0307 	orrs.w	r3, r6, r7
   82074:	d1eb      	bne.n	8204e <_vfiprintf_r+0xa26>
   82076:	f8dd c014 	ldr.w	ip, [sp, #20]
   8207a:	e787      	b.n	81f8c <_vfiprintf_r+0x964>
   8207c:	2b30      	cmp	r3, #48	; 0x30
   8207e:	9b07      	ldr	r3, [sp, #28]
   82080:	d087      	beq.n	81f92 <_vfiprintf_r+0x96a>
   82082:	3b01      	subs	r3, #1
   82084:	461a      	mov	r2, r3
   82086:	9307      	str	r3, [sp, #28]
   82088:	2330      	movs	r3, #48	; 0x30
   8208a:	ebc2 090a 	rsb	r9, r2, sl
   8208e:	f801 3c01 	strb.w	r3, [r1, #-1]
   82092:	f7ff bbfb 	b.w	8188c <_vfiprintf_r+0x264>
   82096:	9801      	ldr	r0, [sp, #4]
   82098:	9900      	ldr	r1, [sp, #0]
   8209a:	aa0d      	add	r2, sp, #52	; 0x34
   8209c:	f8cd c014 	str.w	ip, [sp, #20]
   820a0:	f7ff fa86 	bl	815b0 <__sprint_r.part.0>
   820a4:	2800      	cmp	r0, #0
   820a6:	f47f ae82 	bne.w	81dae <_vfiprintf_r+0x786>
   820aa:	990e      	ldr	r1, [sp, #56]	; 0x38
   820ac:	4654      	mov	r4, sl
   820ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   820b0:	1c48      	adds	r0, r1, #1
   820b2:	f8dd c014 	ldr.w	ip, [sp, #20]
   820b6:	e615      	b.n	81ce4 <_vfiprintf_r+0x6bc>
   820b8:	9801      	ldr	r0, [sp, #4]
   820ba:	9900      	ldr	r1, [sp, #0]
   820bc:	aa0d      	add	r2, sp, #52	; 0x34
   820be:	f8cd c020 	str.w	ip, [sp, #32]
   820c2:	f7ff fa75 	bl	815b0 <__sprint_r.part.0>
   820c6:	2800      	cmp	r0, #0
   820c8:	f47f ae71 	bne.w	81dae <_vfiprintf_r+0x786>
   820cc:	990e      	ldr	r1, [sp, #56]	; 0x38
   820ce:	4654      	mov	r4, sl
   820d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   820d2:	1c48      	adds	r0, r1, #1
   820d4:	f8dd c020 	ldr.w	ip, [sp, #32]
   820d8:	e5f5      	b.n	81cc6 <_vfiprintf_r+0x69e>
   820da:	2a00      	cmp	r2, #0
   820dc:	d167      	bne.n	821ae <_vfiprintf_r+0xb86>
   820de:	2001      	movs	r0, #1
   820e0:	4611      	mov	r1, r2
   820e2:	4654      	mov	r4, sl
   820e4:	e602      	b.n	81cec <_vfiprintf_r+0x6c4>
   820e6:	9801      	ldr	r0, [sp, #4]
   820e8:	9900      	ldr	r1, [sp, #0]
   820ea:	aa0d      	add	r2, sp, #52	; 0x34
   820ec:	f7ff fa60 	bl	815b0 <__sprint_r.part.0>
   820f0:	2800      	cmp	r0, #0
   820f2:	f47f ae5c 	bne.w	81dae <_vfiprintf_r+0x786>
   820f6:	980e      	ldr	r0, [sp, #56]	; 0x38
   820f8:	4654      	mov	r4, sl
   820fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   820fc:	3001      	adds	r0, #1
   820fe:	e625      	b.n	81d4c <_vfiprintf_r+0x724>
   82100:	252d      	movs	r5, #45	; 0x2d
   82102:	4276      	negs	r6, r6
   82104:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82108:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   8210c:	46e1      	mov	r9, ip
   8210e:	2301      	movs	r3, #1
   82110:	f7ff bb93 	b.w	8183a <_vfiprintf_r+0x212>
   82114:	9b05      	ldr	r3, [sp, #20]
   82116:	4611      	mov	r1, r2
   82118:	2001      	movs	r0, #1
   8211a:	4654      	mov	r4, sl
   8211c:	2b00      	cmp	r3, #0
   8211e:	f43f ade5 	beq.w	81cec <_vfiprintf_r+0x6c4>
   82122:	aa0c      	add	r2, sp, #48	; 0x30
   82124:	2302      	movs	r3, #2
   82126:	e88a 000c 	stmia.w	sl, {r2, r3}
   8212a:	461a      	mov	r2, r3
   8212c:	e5d7      	b.n	81cde <_vfiprintf_r+0x6b6>
   8212e:	f018 0f10 	tst.w	r8, #16
   82132:	d10b      	bne.n	8214c <_vfiprintf_r+0xb24>
   82134:	f018 0f40 	tst.w	r8, #64	; 0x40
   82138:	d008      	beq.n	8214c <_vfiprintf_r+0xb24>
   8213a:	9a04      	ldr	r2, [sp, #16]
   8213c:	6813      	ldr	r3, [r2, #0]
   8213e:	3204      	adds	r2, #4
   82140:	9204      	str	r2, [sp, #16]
   82142:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   82146:	801a      	strh	r2, [r3, #0]
   82148:	f7ff baa0 	b.w	8168c <_vfiprintf_r+0x64>
   8214c:	9a04      	ldr	r2, [sp, #16]
   8214e:	6813      	ldr	r3, [r2, #0]
   82150:	3204      	adds	r2, #4
   82152:	9204      	str	r2, [sp, #16]
   82154:	9a02      	ldr	r2, [sp, #8]
   82156:	601a      	str	r2, [r3, #0]
   82158:	f7ff ba98 	b.w	8168c <_vfiprintf_r+0x64>
   8215c:	9801      	ldr	r0, [sp, #4]
   8215e:	9900      	ldr	r1, [sp, #0]
   82160:	aa0d      	add	r2, sp, #52	; 0x34
   82162:	f8cd c020 	str.w	ip, [sp, #32]
   82166:	f7ff fa23 	bl	815b0 <__sprint_r.part.0>
   8216a:	2800      	cmp	r0, #0
   8216c:	f47f ae1f 	bne.w	81dae <_vfiprintf_r+0x786>
   82170:	990e      	ldr	r1, [sp, #56]	; 0x38
   82172:	4654      	mov	r4, sl
   82174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82176:	1c48      	adds	r0, r1, #1
   82178:	f8dd c020 	ldr.w	ip, [sp, #32]
   8217c:	e592      	b.n	81ca4 <_vfiprintf_r+0x67c>
   8217e:	f048 0820 	orr.w	r8, r8, #32
   82182:	f10b 0001 	add.w	r0, fp, #1
   82186:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8218a:	f7ff bab6 	b.w	816fa <_vfiprintf_r+0xd2>
   8218e:	426d      	negs	r5, r5
   82190:	9304      	str	r3, [sp, #16]
   82192:	4658      	mov	r0, fp
   82194:	f7ff bbc8 	b.w	81928 <_vfiprintf_r+0x300>
   82198:	9807      	ldr	r0, [sp, #28]
   8219a:	9504      	str	r5, [sp, #16]
   8219c:	f7ff f9da 	bl	81554 <strlen>
   821a0:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   821a4:	4681      	mov	r9, r0
   821a6:	f04f 0c00 	mov.w	ip, #0
   821aa:	f7ff bb6f 	b.w	8188c <_vfiprintf_r+0x264>
   821ae:	9801      	ldr	r0, [sp, #4]
   821b0:	9900      	ldr	r1, [sp, #0]
   821b2:	aa0d      	add	r2, sp, #52	; 0x34
   821b4:	f8cd c014 	str.w	ip, [sp, #20]
   821b8:	f7ff f9fa 	bl	815b0 <__sprint_r.part.0>
   821bc:	2800      	cmp	r0, #0
   821be:	f47f adf6 	bne.w	81dae <_vfiprintf_r+0x786>
   821c2:	990e      	ldr	r1, [sp, #56]	; 0x38
   821c4:	4654      	mov	r4, sl
   821c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   821c8:	1c48      	adds	r0, r1, #1
   821ca:	f8dd c014 	ldr.w	ip, [sp, #20]
   821ce:	e58d      	b.n	81cec <_vfiprintf_r+0x6c4>
   821d0:	990e      	ldr	r1, [sp, #56]	; 0x38
   821d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   821d4:	3101      	adds	r1, #1
   821d6:	4f15      	ldr	r7, [pc, #84]	; (8222c <_vfiprintf_r+0xc04>)
   821d8:	f7ff bb9a 	b.w	81910 <_vfiprintf_r+0x2e8>
   821dc:	2e06      	cmp	r6, #6
   821de:	4b14      	ldr	r3, [pc, #80]	; (82230 <_vfiprintf_r+0xc08>)
   821e0:	bf28      	it	cs
   821e2:	f04f 0c06 	movcs.w	ip, #6
   821e6:	46e1      	mov	r9, ip
   821e8:	9504      	str	r5, [sp, #16]
   821ea:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   821ee:	9307      	str	r3, [sp, #28]
   821f0:	e463      	b.n	81aba <_vfiprintf_r+0x492>
   821f2:	990e      	ldr	r1, [sp, #56]	; 0x38
   821f4:	4f0d      	ldr	r7, [pc, #52]	; (8222c <_vfiprintf_r+0xc04>)
   821f6:	f101 0e01 	add.w	lr, r1, #1
   821fa:	e61a      	b.n	81e32 <_vfiprintf_r+0x80a>
   821fc:	46e1      	mov	r9, ip
   821fe:	9504      	str	r5, [sp, #16]
   82200:	4684      	mov	ip, r0
   82202:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   82206:	f7ff bb41 	b.w	8188c <_vfiprintf_r+0x264>
   8220a:	4686      	mov	lr, r0
   8220c:	4d09      	ldr	r5, [pc, #36]	; (82234 <_vfiprintf_r+0xc0c>)
   8220e:	e66c      	b.n	81eea <_vfiprintf_r+0x8c2>
   82210:	9a04      	ldr	r2, [sp, #16]
   82212:	f89b 3001 	ldrb.w	r3, [fp, #1]
   82216:	6816      	ldr	r6, [r2, #0]
   82218:	3204      	adds	r2, #4
   8221a:	2e00      	cmp	r6, #0
   8221c:	9204      	str	r2, [sp, #16]
   8221e:	f6bf aa6c 	bge.w	816fa <_vfiprintf_r+0xd2>
   82222:	f04f 36ff 	mov.w	r6, #4294967295
   82226:	f7ff ba68 	b.w	816fa <_vfiprintf_r+0xd2>
   8222a:	bf00      	nop
   8222c:	00084234 	.word	0x00084234
   82230:	0008422c 	.word	0x0008422c
   82234:	000841f4 	.word	0x000841f4

00082238 <__sbprintf>:
   82238:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   8223c:	4688      	mov	r8, r1
   8223e:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82240:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   82244:	9719      	str	r7, [sp, #100]	; 0x64
   82246:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8224a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   8224e:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   82252:	9707      	str	r7, [sp, #28]
   82254:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82258:	ac1a      	add	r4, sp, #104	; 0x68
   8225a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8225e:	f02e 0e02 	bic.w	lr, lr, #2
   82262:	2600      	movs	r6, #0
   82264:	4669      	mov	r1, sp
   82266:	9400      	str	r4, [sp, #0]
   82268:	9404      	str	r4, [sp, #16]
   8226a:	9502      	str	r5, [sp, #8]
   8226c:	9505      	str	r5, [sp, #20]
   8226e:	f8ad e00c 	strh.w	lr, [sp, #12]
   82272:	f8ad a00e 	strh.w	sl, [sp, #14]
   82276:	9709      	str	r7, [sp, #36]	; 0x24
   82278:	9606      	str	r6, [sp, #24]
   8227a:	4605      	mov	r5, r0
   8227c:	f7ff f9d4 	bl	81628 <_vfiprintf_r>
   82280:	1e04      	subs	r4, r0, #0
   82282:	db07      	blt.n	82294 <__sbprintf+0x5c>
   82284:	4628      	mov	r0, r5
   82286:	4669      	mov	r1, sp
   82288:	f000 f92a 	bl	824e0 <_fflush_r>
   8228c:	42b0      	cmp	r0, r6
   8228e:	bf18      	it	ne
   82290:	f04f 34ff 	movne.w	r4, #4294967295
   82294:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82298:	065b      	lsls	r3, r3, #25
   8229a:	d505      	bpl.n	822a8 <__sbprintf+0x70>
   8229c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   822a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   822a4:	f8a8 300c 	strh.w	r3, [r8, #12]
   822a8:	4620      	mov	r0, r4
   822aa:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   822ae:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   822b2:	bf00      	nop

000822b4 <__swsetup_r>:
   822b4:	b538      	push	{r3, r4, r5, lr}
   822b6:	4b2f      	ldr	r3, [pc, #188]	; (82374 <__swsetup_r+0xc0>)
   822b8:	4605      	mov	r5, r0
   822ba:	6818      	ldr	r0, [r3, #0]
   822bc:	460c      	mov	r4, r1
   822be:	b110      	cbz	r0, 822c6 <__swsetup_r+0x12>
   822c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   822c2:	2b00      	cmp	r3, #0
   822c4:	d036      	beq.n	82334 <__swsetup_r+0x80>
   822c6:	89a2      	ldrh	r2, [r4, #12]
   822c8:	b293      	uxth	r3, r2
   822ca:	0718      	lsls	r0, r3, #28
   822cc:	d50c      	bpl.n	822e8 <__swsetup_r+0x34>
   822ce:	6920      	ldr	r0, [r4, #16]
   822d0:	b1a8      	cbz	r0, 822fe <__swsetup_r+0x4a>
   822d2:	f013 0201 	ands.w	r2, r3, #1
   822d6:	d01e      	beq.n	82316 <__swsetup_r+0x62>
   822d8:	6963      	ldr	r3, [r4, #20]
   822da:	2200      	movs	r2, #0
   822dc:	425b      	negs	r3, r3
   822de:	61a3      	str	r3, [r4, #24]
   822e0:	60a2      	str	r2, [r4, #8]
   822e2:	b1f0      	cbz	r0, 82322 <__swsetup_r+0x6e>
   822e4:	2000      	movs	r0, #0
   822e6:	bd38      	pop	{r3, r4, r5, pc}
   822e8:	06d9      	lsls	r1, r3, #27
   822ea:	d53a      	bpl.n	82362 <__swsetup_r+0xae>
   822ec:	0758      	lsls	r0, r3, #29
   822ee:	d424      	bmi.n	8233a <__swsetup_r+0x86>
   822f0:	6920      	ldr	r0, [r4, #16]
   822f2:	f042 0308 	orr.w	r3, r2, #8
   822f6:	81a3      	strh	r3, [r4, #12]
   822f8:	b29b      	uxth	r3, r3
   822fa:	2800      	cmp	r0, #0
   822fc:	d1e9      	bne.n	822d2 <__swsetup_r+0x1e>
   822fe:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82302:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82306:	d0e4      	beq.n	822d2 <__swsetup_r+0x1e>
   82308:	4628      	mov	r0, r5
   8230a:	4621      	mov	r1, r4
   8230c:	f000 fcee 	bl	82cec <__smakebuf_r>
   82310:	89a3      	ldrh	r3, [r4, #12]
   82312:	6920      	ldr	r0, [r4, #16]
   82314:	e7dd      	b.n	822d2 <__swsetup_r+0x1e>
   82316:	0799      	lsls	r1, r3, #30
   82318:	bf58      	it	pl
   8231a:	6962      	ldrpl	r2, [r4, #20]
   8231c:	60a2      	str	r2, [r4, #8]
   8231e:	2800      	cmp	r0, #0
   82320:	d1e0      	bne.n	822e4 <__swsetup_r+0x30>
   82322:	89a3      	ldrh	r3, [r4, #12]
   82324:	061a      	lsls	r2, r3, #24
   82326:	d5de      	bpl.n	822e6 <__swsetup_r+0x32>
   82328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8232c:	81a3      	strh	r3, [r4, #12]
   8232e:	f04f 30ff 	mov.w	r0, #4294967295
   82332:	bd38      	pop	{r3, r4, r5, pc}
   82334:	f000 f968 	bl	82608 <__sinit>
   82338:	e7c5      	b.n	822c6 <__swsetup_r+0x12>
   8233a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8233c:	b149      	cbz	r1, 82352 <__swsetup_r+0x9e>
   8233e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82342:	4299      	cmp	r1, r3
   82344:	d003      	beq.n	8234e <__swsetup_r+0x9a>
   82346:	4628      	mov	r0, r5
   82348:	f000 fa36 	bl	827b8 <_free_r>
   8234c:	89a2      	ldrh	r2, [r4, #12]
   8234e:	2300      	movs	r3, #0
   82350:	6323      	str	r3, [r4, #48]	; 0x30
   82352:	6920      	ldr	r0, [r4, #16]
   82354:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82358:	2300      	movs	r3, #0
   8235a:	b292      	uxth	r2, r2
   8235c:	e884 0009 	stmia.w	r4, {r0, r3}
   82360:	e7c7      	b.n	822f2 <__swsetup_r+0x3e>
   82362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82366:	2309      	movs	r3, #9
   82368:	602b      	str	r3, [r5, #0]
   8236a:	f04f 30ff 	mov.w	r0, #4294967295
   8236e:	81a2      	strh	r2, [r4, #12]
   82370:	bd38      	pop	{r3, r4, r5, pc}
   82372:	bf00      	nop
   82374:	20070568 	.word	0x20070568

00082378 <register_fini>:
   82378:	4b02      	ldr	r3, [pc, #8]	; (82384 <register_fini+0xc>)
   8237a:	b113      	cbz	r3, 82382 <register_fini+0xa>
   8237c:	4802      	ldr	r0, [pc, #8]	; (82388 <register_fini+0x10>)
   8237e:	f000 b805 	b.w	8238c <atexit>
   82382:	4770      	bx	lr
   82384:	00000000 	.word	0x00000000
   82388:	0008261d 	.word	0x0008261d

0008238c <atexit>:
   8238c:	4601      	mov	r1, r0
   8238e:	2000      	movs	r0, #0
   82390:	4602      	mov	r2, r0
   82392:	4603      	mov	r3, r0
   82394:	f001 bb3e 	b.w	83a14 <__register_exitproc>

00082398 <__sflush_r>:
   82398:	898b      	ldrh	r3, [r1, #12]
   8239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8239e:	b29a      	uxth	r2, r3
   823a0:	460d      	mov	r5, r1
   823a2:	0711      	lsls	r1, r2, #28
   823a4:	4680      	mov	r8, r0
   823a6:	d43c      	bmi.n	82422 <__sflush_r+0x8a>
   823a8:	686a      	ldr	r2, [r5, #4]
   823aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   823ae:	2a00      	cmp	r2, #0
   823b0:	81ab      	strh	r3, [r5, #12]
   823b2:	dd65      	ble.n	82480 <__sflush_r+0xe8>
   823b4:	6aae      	ldr	r6, [r5, #40]	; 0x28
   823b6:	2e00      	cmp	r6, #0
   823b8:	d04b      	beq.n	82452 <__sflush_r+0xba>
   823ba:	b29b      	uxth	r3, r3
   823bc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   823c0:	2100      	movs	r1, #0
   823c2:	b292      	uxth	r2, r2
   823c4:	f8d8 4000 	ldr.w	r4, [r8]
   823c8:	f8c8 1000 	str.w	r1, [r8]
   823cc:	2a00      	cmp	r2, #0
   823ce:	d05b      	beq.n	82488 <__sflush_r+0xf0>
   823d0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   823d2:	075f      	lsls	r7, r3, #29
   823d4:	d505      	bpl.n	823e2 <__sflush_r+0x4a>
   823d6:	6869      	ldr	r1, [r5, #4]
   823d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   823da:	1a52      	subs	r2, r2, r1
   823dc:	b10b      	cbz	r3, 823e2 <__sflush_r+0x4a>
   823de:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   823e0:	1ad2      	subs	r2, r2, r3
   823e2:	4640      	mov	r0, r8
   823e4:	69e9      	ldr	r1, [r5, #28]
   823e6:	2300      	movs	r3, #0
   823e8:	47b0      	blx	r6
   823ea:	1c46      	adds	r6, r0, #1
   823ec:	d056      	beq.n	8249c <__sflush_r+0x104>
   823ee:	89ab      	ldrh	r3, [r5, #12]
   823f0:	692a      	ldr	r2, [r5, #16]
   823f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   823f6:	b29b      	uxth	r3, r3
   823f8:	2100      	movs	r1, #0
   823fa:	602a      	str	r2, [r5, #0]
   823fc:	04da      	lsls	r2, r3, #19
   823fe:	81ab      	strh	r3, [r5, #12]
   82400:	6069      	str	r1, [r5, #4]
   82402:	d43b      	bmi.n	8247c <__sflush_r+0xe4>
   82404:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82406:	f8c8 4000 	str.w	r4, [r8]
   8240a:	b311      	cbz	r1, 82452 <__sflush_r+0xba>
   8240c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82410:	4299      	cmp	r1, r3
   82412:	d002      	beq.n	8241a <__sflush_r+0x82>
   82414:	4640      	mov	r0, r8
   82416:	f000 f9cf 	bl	827b8 <_free_r>
   8241a:	2000      	movs	r0, #0
   8241c:	6328      	str	r0, [r5, #48]	; 0x30
   8241e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82422:	692e      	ldr	r6, [r5, #16]
   82424:	b1ae      	cbz	r6, 82452 <__sflush_r+0xba>
   82426:	0791      	lsls	r1, r2, #30
   82428:	682c      	ldr	r4, [r5, #0]
   8242a:	bf0c      	ite	eq
   8242c:	696b      	ldreq	r3, [r5, #20]
   8242e:	2300      	movne	r3, #0
   82430:	602e      	str	r6, [r5, #0]
   82432:	1ba4      	subs	r4, r4, r6
   82434:	60ab      	str	r3, [r5, #8]
   82436:	e00a      	b.n	8244e <__sflush_r+0xb6>
   82438:	4632      	mov	r2, r6
   8243a:	4623      	mov	r3, r4
   8243c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8243e:	4640      	mov	r0, r8
   82440:	69e9      	ldr	r1, [r5, #28]
   82442:	47b8      	blx	r7
   82444:	2800      	cmp	r0, #0
   82446:	eba4 0400 	sub.w	r4, r4, r0
   8244a:	4406      	add	r6, r0
   8244c:	dd04      	ble.n	82458 <__sflush_r+0xc0>
   8244e:	2c00      	cmp	r4, #0
   82450:	dcf2      	bgt.n	82438 <__sflush_r+0xa0>
   82452:	2000      	movs	r0, #0
   82454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82458:	89ab      	ldrh	r3, [r5, #12]
   8245a:	f04f 30ff 	mov.w	r0, #4294967295
   8245e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82462:	81ab      	strh	r3, [r5, #12]
   82464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82468:	89ab      	ldrh	r3, [r5, #12]
   8246a:	692a      	ldr	r2, [r5, #16]
   8246c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82470:	b29b      	uxth	r3, r3
   82472:	81ab      	strh	r3, [r5, #12]
   82474:	04db      	lsls	r3, r3, #19
   82476:	6069      	str	r1, [r5, #4]
   82478:	602a      	str	r2, [r5, #0]
   8247a:	d5c3      	bpl.n	82404 <__sflush_r+0x6c>
   8247c:	6528      	str	r0, [r5, #80]	; 0x50
   8247e:	e7c1      	b.n	82404 <__sflush_r+0x6c>
   82480:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82482:	2a00      	cmp	r2, #0
   82484:	dc96      	bgt.n	823b4 <__sflush_r+0x1c>
   82486:	e7e4      	b.n	82452 <__sflush_r+0xba>
   82488:	2301      	movs	r3, #1
   8248a:	4640      	mov	r0, r8
   8248c:	69e9      	ldr	r1, [r5, #28]
   8248e:	47b0      	blx	r6
   82490:	1c43      	adds	r3, r0, #1
   82492:	4602      	mov	r2, r0
   82494:	d019      	beq.n	824ca <__sflush_r+0x132>
   82496:	89ab      	ldrh	r3, [r5, #12]
   82498:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8249a:	e79a      	b.n	823d2 <__sflush_r+0x3a>
   8249c:	f8d8 1000 	ldr.w	r1, [r8]
   824a0:	2900      	cmp	r1, #0
   824a2:	d0e1      	beq.n	82468 <__sflush_r+0xd0>
   824a4:	291d      	cmp	r1, #29
   824a6:	d007      	beq.n	824b8 <__sflush_r+0x120>
   824a8:	2916      	cmp	r1, #22
   824aa:	d005      	beq.n	824b8 <__sflush_r+0x120>
   824ac:	89ab      	ldrh	r3, [r5, #12]
   824ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824b2:	81ab      	strh	r3, [r5, #12]
   824b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824b8:	89ab      	ldrh	r3, [r5, #12]
   824ba:	6929      	ldr	r1, [r5, #16]
   824bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   824c0:	2200      	movs	r2, #0
   824c2:	81ab      	strh	r3, [r5, #12]
   824c4:	e885 0006 	stmia.w	r5, {r1, r2}
   824c8:	e79c      	b.n	82404 <__sflush_r+0x6c>
   824ca:	f8d8 3000 	ldr.w	r3, [r8]
   824ce:	2b00      	cmp	r3, #0
   824d0:	d0e1      	beq.n	82496 <__sflush_r+0xfe>
   824d2:	2b1d      	cmp	r3, #29
   824d4:	d001      	beq.n	824da <__sflush_r+0x142>
   824d6:	2b16      	cmp	r3, #22
   824d8:	d1be      	bne.n	82458 <__sflush_r+0xc0>
   824da:	f8c8 4000 	str.w	r4, [r8]
   824de:	e7b8      	b.n	82452 <__sflush_r+0xba>

000824e0 <_fflush_r>:
   824e0:	b510      	push	{r4, lr}
   824e2:	4604      	mov	r4, r0
   824e4:	b082      	sub	sp, #8
   824e6:	b108      	cbz	r0, 824ec <_fflush_r+0xc>
   824e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   824ea:	b153      	cbz	r3, 82502 <_fflush_r+0x22>
   824ec:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   824f0:	b908      	cbnz	r0, 824f6 <_fflush_r+0x16>
   824f2:	b002      	add	sp, #8
   824f4:	bd10      	pop	{r4, pc}
   824f6:	4620      	mov	r0, r4
   824f8:	b002      	add	sp, #8
   824fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824fe:	f7ff bf4b 	b.w	82398 <__sflush_r>
   82502:	9101      	str	r1, [sp, #4]
   82504:	f000 f880 	bl	82608 <__sinit>
   82508:	9901      	ldr	r1, [sp, #4]
   8250a:	e7ef      	b.n	824ec <_fflush_r+0xc>

0008250c <_cleanup_r>:
   8250c:	4901      	ldr	r1, [pc, #4]	; (82514 <_cleanup_r+0x8>)
   8250e:	f000 bbbb 	b.w	82c88 <_fwalk_reent>
   82512:	bf00      	nop
   82514:	00083add 	.word	0x00083add

00082518 <__sinit.part.1>:
   82518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8251c:	4607      	mov	r7, r0
   8251e:	4835      	ldr	r0, [pc, #212]	; (825f4 <__sinit.part.1+0xdc>)
   82520:	687d      	ldr	r5, [r7, #4]
   82522:	2400      	movs	r4, #0
   82524:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82528:	2304      	movs	r3, #4
   8252a:	2103      	movs	r1, #3
   8252c:	63f8      	str	r0, [r7, #60]	; 0x3c
   8252e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82532:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82536:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8253a:	b083      	sub	sp, #12
   8253c:	602c      	str	r4, [r5, #0]
   8253e:	606c      	str	r4, [r5, #4]
   82540:	60ac      	str	r4, [r5, #8]
   82542:	666c      	str	r4, [r5, #100]	; 0x64
   82544:	81ec      	strh	r4, [r5, #14]
   82546:	612c      	str	r4, [r5, #16]
   82548:	616c      	str	r4, [r5, #20]
   8254a:	61ac      	str	r4, [r5, #24]
   8254c:	81ab      	strh	r3, [r5, #12]
   8254e:	4621      	mov	r1, r4
   82550:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82554:	2208      	movs	r2, #8
   82556:	f7fe ff2b 	bl	813b0 <memset>
   8255a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 825f8 <__sinit.part.1+0xe0>
   8255e:	68be      	ldr	r6, [r7, #8]
   82560:	f8df a098 	ldr.w	sl, [pc, #152]	; 825fc <__sinit.part.1+0xe4>
   82564:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82600 <__sinit.part.1+0xe8>
   82568:	f8df 8098 	ldr.w	r8, [pc, #152]	; 82604 <__sinit.part.1+0xec>
   8256c:	2301      	movs	r3, #1
   8256e:	2209      	movs	r2, #9
   82570:	f8c5 b020 	str.w	fp, [r5, #32]
   82574:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82578:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8257c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82580:	61ed      	str	r5, [r5, #28]
   82582:	4621      	mov	r1, r4
   82584:	81f3      	strh	r3, [r6, #14]
   82586:	81b2      	strh	r2, [r6, #12]
   82588:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8258c:	6034      	str	r4, [r6, #0]
   8258e:	6074      	str	r4, [r6, #4]
   82590:	60b4      	str	r4, [r6, #8]
   82592:	6674      	str	r4, [r6, #100]	; 0x64
   82594:	6134      	str	r4, [r6, #16]
   82596:	6174      	str	r4, [r6, #20]
   82598:	61b4      	str	r4, [r6, #24]
   8259a:	2208      	movs	r2, #8
   8259c:	9301      	str	r3, [sp, #4]
   8259e:	f7fe ff07 	bl	813b0 <memset>
   825a2:	68fd      	ldr	r5, [r7, #12]
   825a4:	2012      	movs	r0, #18
   825a6:	2202      	movs	r2, #2
   825a8:	61f6      	str	r6, [r6, #28]
   825aa:	f8c6 b020 	str.w	fp, [r6, #32]
   825ae:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   825b2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   825b6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   825ba:	4621      	mov	r1, r4
   825bc:	81a8      	strh	r0, [r5, #12]
   825be:	81ea      	strh	r2, [r5, #14]
   825c0:	602c      	str	r4, [r5, #0]
   825c2:	606c      	str	r4, [r5, #4]
   825c4:	60ac      	str	r4, [r5, #8]
   825c6:	666c      	str	r4, [r5, #100]	; 0x64
   825c8:	612c      	str	r4, [r5, #16]
   825ca:	616c      	str	r4, [r5, #20]
   825cc:	61ac      	str	r4, [r5, #24]
   825ce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   825d2:	2208      	movs	r2, #8
   825d4:	f7fe feec 	bl	813b0 <memset>
   825d8:	9b01      	ldr	r3, [sp, #4]
   825da:	61ed      	str	r5, [r5, #28]
   825dc:	f8c5 b020 	str.w	fp, [r5, #32]
   825e0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   825e4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   825e8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   825ec:	63bb      	str	r3, [r7, #56]	; 0x38
   825ee:	b003      	add	sp, #12
   825f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825f4:	0008250d 	.word	0x0008250d
   825f8:	00083851 	.word	0x00083851
   825fc:	00083875 	.word	0x00083875
   82600:	000838ad 	.word	0x000838ad
   82604:	000838cd 	.word	0x000838cd

00082608 <__sinit>:
   82608:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8260a:	b103      	cbz	r3, 8260e <__sinit+0x6>
   8260c:	4770      	bx	lr
   8260e:	f7ff bf83 	b.w	82518 <__sinit.part.1>
   82612:	bf00      	nop

00082614 <__sfp_lock_acquire>:
   82614:	4770      	bx	lr
   82616:	bf00      	nop

00082618 <__sfp_lock_release>:
   82618:	4770      	bx	lr
   8261a:	bf00      	nop

0008261c <__libc_fini_array>:
   8261c:	b538      	push	{r3, r4, r5, lr}
   8261e:	4b08      	ldr	r3, [pc, #32]	; (82640 <__libc_fini_array+0x24>)
   82620:	4d08      	ldr	r5, [pc, #32]	; (82644 <__libc_fini_array+0x28>)
   82622:	1aed      	subs	r5, r5, r3
   82624:	10ac      	asrs	r4, r5, #2
   82626:	bf18      	it	ne
   82628:	18ed      	addne	r5, r5, r3
   8262a:	d005      	beq.n	82638 <__libc_fini_array+0x1c>
   8262c:	3c01      	subs	r4, #1
   8262e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82632:	4798      	blx	r3
   82634:	2c00      	cmp	r4, #0
   82636:	d1f9      	bne.n	8262c <__libc_fini_array+0x10>
   82638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8263c:	f001 be0c 	b.w	84258 <_fini>
   82640:	00084264 	.word	0x00084264
   82644:	00084268 	.word	0x00084268

00082648 <__fputwc>:
   82648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8264c:	b082      	sub	sp, #8
   8264e:	4607      	mov	r7, r0
   82650:	460e      	mov	r6, r1
   82652:	4614      	mov	r4, r2
   82654:	f000 fb44 	bl	82ce0 <__locale_mb_cur_max>
   82658:	2801      	cmp	r0, #1
   8265a:	d040      	beq.n	826de <__fputwc+0x96>
   8265c:	4638      	mov	r0, r7
   8265e:	a901      	add	r1, sp, #4
   82660:	4632      	mov	r2, r6
   82662:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82666:	f001 f989 	bl	8397c <_wcrtomb_r>
   8266a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8266e:	4680      	mov	r8, r0
   82670:	d02e      	beq.n	826d0 <__fputwc+0x88>
   82672:	2800      	cmp	r0, #0
   82674:	d03b      	beq.n	826ee <__fputwc+0xa6>
   82676:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8267a:	2500      	movs	r5, #0
   8267c:	e009      	b.n	82692 <__fputwc+0x4a>
   8267e:	6823      	ldr	r3, [r4, #0]
   82680:	7019      	strb	r1, [r3, #0]
   82682:	6823      	ldr	r3, [r4, #0]
   82684:	3301      	adds	r3, #1
   82686:	6023      	str	r3, [r4, #0]
   82688:	3501      	adds	r5, #1
   8268a:	45a8      	cmp	r8, r5
   8268c:	d92f      	bls.n	826ee <__fputwc+0xa6>
   8268e:	ab01      	add	r3, sp, #4
   82690:	5d59      	ldrb	r1, [r3, r5]
   82692:	68a3      	ldr	r3, [r4, #8]
   82694:	3b01      	subs	r3, #1
   82696:	2b00      	cmp	r3, #0
   82698:	60a3      	str	r3, [r4, #8]
   8269a:	daf0      	bge.n	8267e <__fputwc+0x36>
   8269c:	69a2      	ldr	r2, [r4, #24]
   8269e:	4293      	cmp	r3, r2
   826a0:	db06      	blt.n	826b0 <__fputwc+0x68>
   826a2:	6823      	ldr	r3, [r4, #0]
   826a4:	7019      	strb	r1, [r3, #0]
   826a6:	6823      	ldr	r3, [r4, #0]
   826a8:	7819      	ldrb	r1, [r3, #0]
   826aa:	3301      	adds	r3, #1
   826ac:	290a      	cmp	r1, #10
   826ae:	d1ea      	bne.n	82686 <__fputwc+0x3e>
   826b0:	4638      	mov	r0, r7
   826b2:	4622      	mov	r2, r4
   826b4:	f001 f90e 	bl	838d4 <__swbuf_r>
   826b8:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   826bc:	fab0 f080 	clz	r0, r0
   826c0:	0940      	lsrs	r0, r0, #5
   826c2:	2800      	cmp	r0, #0
   826c4:	d0e0      	beq.n	82688 <__fputwc+0x40>
   826c6:	f04f 30ff 	mov.w	r0, #4294967295
   826ca:	b002      	add	sp, #8
   826cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826d0:	89a3      	ldrh	r3, [r4, #12]
   826d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   826d6:	81a3      	strh	r3, [r4, #12]
   826d8:	b002      	add	sp, #8
   826da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826de:	1e73      	subs	r3, r6, #1
   826e0:	2bfe      	cmp	r3, #254	; 0xfe
   826e2:	d8bb      	bhi.n	8265c <__fputwc+0x14>
   826e4:	b2f1      	uxtb	r1, r6
   826e6:	4680      	mov	r8, r0
   826e8:	f88d 1004 	strb.w	r1, [sp, #4]
   826ec:	e7c5      	b.n	8267a <__fputwc+0x32>
   826ee:	4630      	mov	r0, r6
   826f0:	b002      	add	sp, #8
   826f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826f6:	bf00      	nop

000826f8 <_fputwc_r>:
   826f8:	8993      	ldrh	r3, [r2, #12]
   826fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   826fe:	d10b      	bne.n	82718 <_fputwc_r+0x20>
   82700:	b410      	push	{r4}
   82702:	6e54      	ldr	r4, [r2, #100]	; 0x64
   82704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82708:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   8270c:	6654      	str	r4, [r2, #100]	; 0x64
   8270e:	8193      	strh	r3, [r2, #12]
   82710:	f85d 4b04 	ldr.w	r4, [sp], #4
   82714:	f7ff bf98 	b.w	82648 <__fputwc>
   82718:	f7ff bf96 	b.w	82648 <__fputwc>

0008271c <_malloc_trim_r>:
   8271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8271e:	460c      	mov	r4, r1
   82720:	4f22      	ldr	r7, [pc, #136]	; (827ac <_malloc_trim_r+0x90>)
   82722:	4606      	mov	r6, r0
   82724:	f000 fe8e 	bl	83444 <__malloc_lock>
   82728:	68bb      	ldr	r3, [r7, #8]
   8272a:	685d      	ldr	r5, [r3, #4]
   8272c:	f025 0503 	bic.w	r5, r5, #3
   82730:	1b29      	subs	r1, r5, r4
   82732:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82736:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8273a:	f021 010f 	bic.w	r1, r1, #15
   8273e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82742:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82746:	db07      	blt.n	82758 <_malloc_trim_r+0x3c>
   82748:	4630      	mov	r0, r6
   8274a:	2100      	movs	r1, #0
   8274c:	f001 f86e 	bl	8382c <_sbrk_r>
   82750:	68bb      	ldr	r3, [r7, #8]
   82752:	442b      	add	r3, r5
   82754:	4298      	cmp	r0, r3
   82756:	d004      	beq.n	82762 <_malloc_trim_r+0x46>
   82758:	4630      	mov	r0, r6
   8275a:	f000 fe75 	bl	83448 <__malloc_unlock>
   8275e:	2000      	movs	r0, #0
   82760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82762:	4630      	mov	r0, r6
   82764:	4261      	negs	r1, r4
   82766:	f001 f861 	bl	8382c <_sbrk_r>
   8276a:	3001      	adds	r0, #1
   8276c:	d00d      	beq.n	8278a <_malloc_trim_r+0x6e>
   8276e:	4b10      	ldr	r3, [pc, #64]	; (827b0 <_malloc_trim_r+0x94>)
   82770:	68ba      	ldr	r2, [r7, #8]
   82772:	6819      	ldr	r1, [r3, #0]
   82774:	1b2d      	subs	r5, r5, r4
   82776:	f045 0501 	orr.w	r5, r5, #1
   8277a:	4630      	mov	r0, r6
   8277c:	1b09      	subs	r1, r1, r4
   8277e:	6055      	str	r5, [r2, #4]
   82780:	6019      	str	r1, [r3, #0]
   82782:	f000 fe61 	bl	83448 <__malloc_unlock>
   82786:	2001      	movs	r0, #1
   82788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8278a:	4630      	mov	r0, r6
   8278c:	2100      	movs	r1, #0
   8278e:	f001 f84d 	bl	8382c <_sbrk_r>
   82792:	68ba      	ldr	r2, [r7, #8]
   82794:	1a83      	subs	r3, r0, r2
   82796:	2b0f      	cmp	r3, #15
   82798:	ddde      	ble.n	82758 <_malloc_trim_r+0x3c>
   8279a:	4c06      	ldr	r4, [pc, #24]	; (827b4 <_malloc_trim_r+0x98>)
   8279c:	4904      	ldr	r1, [pc, #16]	; (827b0 <_malloc_trim_r+0x94>)
   8279e:	6824      	ldr	r4, [r4, #0]
   827a0:	f043 0301 	orr.w	r3, r3, #1
   827a4:	1b00      	subs	r0, r0, r4
   827a6:	6053      	str	r3, [r2, #4]
   827a8:	6008      	str	r0, [r1, #0]
   827aa:	e7d5      	b.n	82758 <_malloc_trim_r+0x3c>
   827ac:	20070590 	.word	0x20070590
   827b0:	20070b30 	.word	0x20070b30
   827b4:	2007099c 	.word	0x2007099c

000827b8 <_free_r>:
   827b8:	2900      	cmp	r1, #0
   827ba:	d04e      	beq.n	8285a <_free_r+0xa2>
   827bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   827c0:	460c      	mov	r4, r1
   827c2:	4680      	mov	r8, r0
   827c4:	f000 fe3e 	bl	83444 <__malloc_lock>
   827c8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   827cc:	4962      	ldr	r1, [pc, #392]	; (82958 <_free_r+0x1a0>)
   827ce:	f1a4 0508 	sub.w	r5, r4, #8
   827d2:	f027 0201 	bic.w	r2, r7, #1
   827d6:	18ab      	adds	r3, r5, r2
   827d8:	688e      	ldr	r6, [r1, #8]
   827da:	6858      	ldr	r0, [r3, #4]
   827dc:	429e      	cmp	r6, r3
   827de:	f020 0003 	bic.w	r0, r0, #3
   827e2:	d05a      	beq.n	8289a <_free_r+0xe2>
   827e4:	07fe      	lsls	r6, r7, #31
   827e6:	6058      	str	r0, [r3, #4]
   827e8:	d40b      	bmi.n	82802 <_free_r+0x4a>
   827ea:	f854 7c08 	ldr.w	r7, [r4, #-8]
   827ee:	f101 0e08 	add.w	lr, r1, #8
   827f2:	1bed      	subs	r5, r5, r7
   827f4:	68ac      	ldr	r4, [r5, #8]
   827f6:	443a      	add	r2, r7
   827f8:	4574      	cmp	r4, lr
   827fa:	d067      	beq.n	828cc <_free_r+0x114>
   827fc:	68ef      	ldr	r7, [r5, #12]
   827fe:	60e7      	str	r7, [r4, #12]
   82800:	60bc      	str	r4, [r7, #8]
   82802:	181c      	adds	r4, r3, r0
   82804:	6864      	ldr	r4, [r4, #4]
   82806:	07e4      	lsls	r4, r4, #31
   82808:	d40c      	bmi.n	82824 <_free_r+0x6c>
   8280a:	4f54      	ldr	r7, [pc, #336]	; (8295c <_free_r+0x1a4>)
   8280c:	689c      	ldr	r4, [r3, #8]
   8280e:	4402      	add	r2, r0
   82810:	42bc      	cmp	r4, r7
   82812:	d07c      	beq.n	8290e <_free_r+0x156>
   82814:	68d8      	ldr	r0, [r3, #12]
   82816:	f042 0301 	orr.w	r3, r2, #1
   8281a:	60e0      	str	r0, [r4, #12]
   8281c:	6084      	str	r4, [r0, #8]
   8281e:	606b      	str	r3, [r5, #4]
   82820:	50aa      	str	r2, [r5, r2]
   82822:	e003      	b.n	8282c <_free_r+0x74>
   82824:	f042 0301 	orr.w	r3, r2, #1
   82828:	606b      	str	r3, [r5, #4]
   8282a:	50aa      	str	r2, [r5, r2]
   8282c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82830:	d214      	bcs.n	8285c <_free_r+0xa4>
   82832:	08d2      	lsrs	r2, r2, #3
   82834:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   82838:	2401      	movs	r4, #1
   8283a:	6848      	ldr	r0, [r1, #4]
   8283c:	1092      	asrs	r2, r2, #2
   8283e:	fa04 f202 	lsl.w	r2, r4, r2
   82842:	689c      	ldr	r4, [r3, #8]
   82844:	4310      	orrs	r0, r2
   82846:	60ac      	str	r4, [r5, #8]
   82848:	60eb      	str	r3, [r5, #12]
   8284a:	6048      	str	r0, [r1, #4]
   8284c:	609d      	str	r5, [r3, #8]
   8284e:	60e5      	str	r5, [r4, #12]
   82850:	4640      	mov	r0, r8
   82852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82856:	f000 bdf7 	b.w	83448 <__malloc_unlock>
   8285a:	4770      	bx	lr
   8285c:	0a53      	lsrs	r3, r2, #9
   8285e:	2b04      	cmp	r3, #4
   82860:	d847      	bhi.n	828f2 <_free_r+0x13a>
   82862:	0993      	lsrs	r3, r2, #6
   82864:	f103 0438 	add.w	r4, r3, #56	; 0x38
   82868:	0060      	lsls	r0, r4, #1
   8286a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   8286e:	6883      	ldr	r3, [r0, #8]
   82870:	4939      	ldr	r1, [pc, #228]	; (82958 <_free_r+0x1a0>)
   82872:	4283      	cmp	r3, r0
   82874:	d043      	beq.n	828fe <_free_r+0x146>
   82876:	6859      	ldr	r1, [r3, #4]
   82878:	f021 0103 	bic.w	r1, r1, #3
   8287c:	4291      	cmp	r1, r2
   8287e:	d902      	bls.n	82886 <_free_r+0xce>
   82880:	689b      	ldr	r3, [r3, #8]
   82882:	4298      	cmp	r0, r3
   82884:	d1f7      	bne.n	82876 <_free_r+0xbe>
   82886:	68da      	ldr	r2, [r3, #12]
   82888:	60ea      	str	r2, [r5, #12]
   8288a:	60ab      	str	r3, [r5, #8]
   8288c:	4640      	mov	r0, r8
   8288e:	6095      	str	r5, [r2, #8]
   82890:	60dd      	str	r5, [r3, #12]
   82892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82896:	f000 bdd7 	b.w	83448 <__malloc_unlock>
   8289a:	07ff      	lsls	r7, r7, #31
   8289c:	4402      	add	r2, r0
   8289e:	d407      	bmi.n	828b0 <_free_r+0xf8>
   828a0:	f854 4c08 	ldr.w	r4, [r4, #-8]
   828a4:	1b2d      	subs	r5, r5, r4
   828a6:	68eb      	ldr	r3, [r5, #12]
   828a8:	68a8      	ldr	r0, [r5, #8]
   828aa:	4422      	add	r2, r4
   828ac:	60c3      	str	r3, [r0, #12]
   828ae:	6098      	str	r0, [r3, #8]
   828b0:	4b2b      	ldr	r3, [pc, #172]	; (82960 <_free_r+0x1a8>)
   828b2:	f042 0001 	orr.w	r0, r2, #1
   828b6:	681b      	ldr	r3, [r3, #0]
   828b8:	6068      	str	r0, [r5, #4]
   828ba:	429a      	cmp	r2, r3
   828bc:	608d      	str	r5, [r1, #8]
   828be:	d3c7      	bcc.n	82850 <_free_r+0x98>
   828c0:	4b28      	ldr	r3, [pc, #160]	; (82964 <_free_r+0x1ac>)
   828c2:	4640      	mov	r0, r8
   828c4:	6819      	ldr	r1, [r3, #0]
   828c6:	f7ff ff29 	bl	8271c <_malloc_trim_r>
   828ca:	e7c1      	b.n	82850 <_free_r+0x98>
   828cc:	1819      	adds	r1, r3, r0
   828ce:	6849      	ldr	r1, [r1, #4]
   828d0:	07c9      	lsls	r1, r1, #31
   828d2:	d409      	bmi.n	828e8 <_free_r+0x130>
   828d4:	68d9      	ldr	r1, [r3, #12]
   828d6:	4402      	add	r2, r0
   828d8:	689b      	ldr	r3, [r3, #8]
   828da:	f042 0001 	orr.w	r0, r2, #1
   828de:	60d9      	str	r1, [r3, #12]
   828e0:	608b      	str	r3, [r1, #8]
   828e2:	6068      	str	r0, [r5, #4]
   828e4:	50aa      	str	r2, [r5, r2]
   828e6:	e7b3      	b.n	82850 <_free_r+0x98>
   828e8:	f042 0301 	orr.w	r3, r2, #1
   828ec:	606b      	str	r3, [r5, #4]
   828ee:	50aa      	str	r2, [r5, r2]
   828f0:	e7ae      	b.n	82850 <_free_r+0x98>
   828f2:	2b14      	cmp	r3, #20
   828f4:	d814      	bhi.n	82920 <_free_r+0x168>
   828f6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   828fa:	0060      	lsls	r0, r4, #1
   828fc:	e7b5      	b.n	8286a <_free_r+0xb2>
   828fe:	684a      	ldr	r2, [r1, #4]
   82900:	10a4      	asrs	r4, r4, #2
   82902:	2001      	movs	r0, #1
   82904:	40a0      	lsls	r0, r4
   82906:	4302      	orrs	r2, r0
   82908:	604a      	str	r2, [r1, #4]
   8290a:	461a      	mov	r2, r3
   8290c:	e7bc      	b.n	82888 <_free_r+0xd0>
   8290e:	f042 0301 	orr.w	r3, r2, #1
   82912:	614d      	str	r5, [r1, #20]
   82914:	610d      	str	r5, [r1, #16]
   82916:	60ec      	str	r4, [r5, #12]
   82918:	60ac      	str	r4, [r5, #8]
   8291a:	606b      	str	r3, [r5, #4]
   8291c:	50aa      	str	r2, [r5, r2]
   8291e:	e797      	b.n	82850 <_free_r+0x98>
   82920:	2b54      	cmp	r3, #84	; 0x54
   82922:	d804      	bhi.n	8292e <_free_r+0x176>
   82924:	0b13      	lsrs	r3, r2, #12
   82926:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8292a:	0060      	lsls	r0, r4, #1
   8292c:	e79d      	b.n	8286a <_free_r+0xb2>
   8292e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82932:	d804      	bhi.n	8293e <_free_r+0x186>
   82934:	0bd3      	lsrs	r3, r2, #15
   82936:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8293a:	0060      	lsls	r0, r4, #1
   8293c:	e795      	b.n	8286a <_free_r+0xb2>
   8293e:	f240 5054 	movw	r0, #1364	; 0x554
   82942:	4283      	cmp	r3, r0
   82944:	d804      	bhi.n	82950 <_free_r+0x198>
   82946:	0c93      	lsrs	r3, r2, #18
   82948:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8294c:	0060      	lsls	r0, r4, #1
   8294e:	e78c      	b.n	8286a <_free_r+0xb2>
   82950:	20fc      	movs	r0, #252	; 0xfc
   82952:	247e      	movs	r4, #126	; 0x7e
   82954:	e789      	b.n	8286a <_free_r+0xb2>
   82956:	bf00      	nop
   82958:	20070590 	.word	0x20070590
   8295c:	20070598 	.word	0x20070598
   82960:	20070998 	.word	0x20070998
   82964:	20070b2c 	.word	0x20070b2c

00082968 <__sfvwrite_r>:
   82968:	6893      	ldr	r3, [r2, #8]
   8296a:	2b00      	cmp	r3, #0
   8296c:	f000 80b1 	beq.w	82ad2 <__sfvwrite_r+0x16a>
   82970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82974:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   82978:	b083      	sub	sp, #12
   8297a:	f01e 0f08 	tst.w	lr, #8
   8297e:	460c      	mov	r4, r1
   82980:	4681      	mov	r9, r0
   82982:	4616      	mov	r6, r2
   82984:	d028      	beq.n	829d8 <__sfvwrite_r+0x70>
   82986:	690b      	ldr	r3, [r1, #16]
   82988:	b333      	cbz	r3, 829d8 <__sfvwrite_r+0x70>
   8298a:	f00e 0802 	and.w	r8, lr, #2
   8298e:	fa1f f088 	uxth.w	r0, r8
   82992:	6835      	ldr	r5, [r6, #0]
   82994:	b380      	cbz	r0, 829f8 <__sfvwrite_r+0x90>
   82996:	f04f 0b00 	mov.w	fp, #0
   8299a:	46d8      	mov	r8, fp
   8299c:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 82c84 <__sfvwrite_r+0x31c>
   829a0:	f1b8 0f00 	cmp.w	r8, #0
   829a4:	f000 808f 	beq.w	82ac6 <__sfvwrite_r+0x15e>
   829a8:	45d0      	cmp	r8, sl
   829aa:	4643      	mov	r3, r8
   829ac:	4648      	mov	r0, r9
   829ae:	bf28      	it	cs
   829b0:	4653      	movcs	r3, sl
   829b2:	69e1      	ldr	r1, [r4, #28]
   829b4:	465a      	mov	r2, fp
   829b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   829b8:	47b8      	blx	r7
   829ba:	2800      	cmp	r0, #0
   829bc:	f340 80a8 	ble.w	82b10 <__sfvwrite_r+0x1a8>
   829c0:	68b3      	ldr	r3, [r6, #8]
   829c2:	4483      	add	fp, r0
   829c4:	1a1b      	subs	r3, r3, r0
   829c6:	ebc0 0808 	rsb	r8, r0, r8
   829ca:	60b3      	str	r3, [r6, #8]
   829cc:	2b00      	cmp	r3, #0
   829ce:	d1e7      	bne.n	829a0 <__sfvwrite_r+0x38>
   829d0:	2000      	movs	r0, #0
   829d2:	b003      	add	sp, #12
   829d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829d8:	4648      	mov	r0, r9
   829da:	4621      	mov	r1, r4
   829dc:	f7ff fc6a 	bl	822b4 <__swsetup_r>
   829e0:	2800      	cmp	r0, #0
   829e2:	f040 8146 	bne.w	82c72 <__sfvwrite_r+0x30a>
   829e6:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   829ea:	6835      	ldr	r5, [r6, #0]
   829ec:	f00e 0802 	and.w	r8, lr, #2
   829f0:	fa1f f088 	uxth.w	r0, r8
   829f4:	2800      	cmp	r0, #0
   829f6:	d1ce      	bne.n	82996 <__sfvwrite_r+0x2e>
   829f8:	f01e 0b01 	ands.w	fp, lr, #1
   829fc:	f040 8091 	bne.w	82b22 <__sfvwrite_r+0x1ba>
   82a00:	46d8      	mov	r8, fp
   82a02:	f1b8 0f00 	cmp.w	r8, #0
   82a06:	d058      	beq.n	82aba <__sfvwrite_r+0x152>
   82a08:	f41e 7f00 	tst.w	lr, #512	; 0x200
   82a0c:	68a7      	ldr	r7, [r4, #8]
   82a0e:	d062      	beq.n	82ad6 <__sfvwrite_r+0x16e>
   82a10:	45b8      	cmp	r8, r7
   82a12:	46ba      	mov	sl, r7
   82a14:	f0c0 80c2 	bcc.w	82b9c <__sfvwrite_r+0x234>
   82a18:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   82a1c:	f000 80c0 	beq.w	82ba0 <__sfvwrite_r+0x238>
   82a20:	6967      	ldr	r7, [r4, #20]
   82a22:	6921      	ldr	r1, [r4, #16]
   82a24:	6823      	ldr	r3, [r4, #0]
   82a26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82a2a:	1a5b      	subs	r3, r3, r1
   82a2c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82a30:	1c58      	adds	r0, r3, #1
   82a32:	107f      	asrs	r7, r7, #1
   82a34:	4440      	add	r0, r8
   82a36:	4287      	cmp	r7, r0
   82a38:	463a      	mov	r2, r7
   82a3a:	bf3c      	itt	cc
   82a3c:	4607      	movcc	r7, r0
   82a3e:	463a      	movcc	r2, r7
   82a40:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   82a44:	9300      	str	r3, [sp, #0]
   82a46:	f000 80fb 	beq.w	82c40 <__sfvwrite_r+0x2d8>
   82a4a:	4611      	mov	r1, r2
   82a4c:	4648      	mov	r0, r9
   82a4e:	f000 f9c5 	bl	82ddc <_malloc_r>
   82a52:	9b00      	ldr	r3, [sp, #0]
   82a54:	4682      	mov	sl, r0
   82a56:	2800      	cmp	r0, #0
   82a58:	f000 810e 	beq.w	82c78 <__sfvwrite_r+0x310>
   82a5c:	461a      	mov	r2, r3
   82a5e:	6921      	ldr	r1, [r4, #16]
   82a60:	9300      	str	r3, [sp, #0]
   82a62:	f7fe fc2f 	bl	812c4 <memcpy>
   82a66:	89a2      	ldrh	r2, [r4, #12]
   82a68:	9b00      	ldr	r3, [sp, #0]
   82a6a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82a72:	81a2      	strh	r2, [r4, #12]
   82a74:	eb0a 0003 	add.w	r0, sl, r3
   82a78:	f8c4 a010 	str.w	sl, [r4, #16]
   82a7c:	1afb      	subs	r3, r7, r3
   82a7e:	6167      	str	r7, [r4, #20]
   82a80:	46c2      	mov	sl, r8
   82a82:	4647      	mov	r7, r8
   82a84:	6020      	str	r0, [r4, #0]
   82a86:	60a3      	str	r3, [r4, #8]
   82a88:	4652      	mov	r2, sl
   82a8a:	4659      	mov	r1, fp
   82a8c:	f000 fc76 	bl	8337c <memmove>
   82a90:	68a0      	ldr	r0, [r4, #8]
   82a92:	6822      	ldr	r2, [r4, #0]
   82a94:	1bc0      	subs	r0, r0, r7
   82a96:	60a0      	str	r0, [r4, #8]
   82a98:	4640      	mov	r0, r8
   82a9a:	eb02 030a 	add.w	r3, r2, sl
   82a9e:	6023      	str	r3, [r4, #0]
   82aa0:	68b3      	ldr	r3, [r6, #8]
   82aa2:	4483      	add	fp, r0
   82aa4:	1a1b      	subs	r3, r3, r0
   82aa6:	ebc0 0808 	rsb	r8, r0, r8
   82aaa:	60b3      	str	r3, [r6, #8]
   82aac:	2b00      	cmp	r3, #0
   82aae:	d08f      	beq.n	829d0 <__sfvwrite_r+0x68>
   82ab0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   82ab4:	f1b8 0f00 	cmp.w	r8, #0
   82ab8:	d1a6      	bne.n	82a08 <__sfvwrite_r+0xa0>
   82aba:	f8d5 b000 	ldr.w	fp, [r5]
   82abe:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82ac2:	3508      	adds	r5, #8
   82ac4:	e79d      	b.n	82a02 <__sfvwrite_r+0x9a>
   82ac6:	f8d5 b000 	ldr.w	fp, [r5]
   82aca:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82ace:	3508      	adds	r5, #8
   82ad0:	e766      	b.n	829a0 <__sfvwrite_r+0x38>
   82ad2:	2000      	movs	r0, #0
   82ad4:	4770      	bx	lr
   82ad6:	6820      	ldr	r0, [r4, #0]
   82ad8:	6923      	ldr	r3, [r4, #16]
   82ada:	4298      	cmp	r0, r3
   82adc:	d803      	bhi.n	82ae6 <__sfvwrite_r+0x17e>
   82ade:	6962      	ldr	r2, [r4, #20]
   82ae0:	4590      	cmp	r8, r2
   82ae2:	f080 8085 	bcs.w	82bf0 <__sfvwrite_r+0x288>
   82ae6:	4547      	cmp	r7, r8
   82ae8:	bf28      	it	cs
   82aea:	4647      	movcs	r7, r8
   82aec:	4659      	mov	r1, fp
   82aee:	463a      	mov	r2, r7
   82af0:	f000 fc44 	bl	8337c <memmove>
   82af4:	68a3      	ldr	r3, [r4, #8]
   82af6:	6822      	ldr	r2, [r4, #0]
   82af8:	1bdb      	subs	r3, r3, r7
   82afa:	443a      	add	r2, r7
   82afc:	60a3      	str	r3, [r4, #8]
   82afe:	6022      	str	r2, [r4, #0]
   82b00:	2b00      	cmp	r3, #0
   82b02:	d149      	bne.n	82b98 <__sfvwrite_r+0x230>
   82b04:	4648      	mov	r0, r9
   82b06:	4621      	mov	r1, r4
   82b08:	f7ff fcea 	bl	824e0 <_fflush_r>
   82b0c:	2800      	cmp	r0, #0
   82b0e:	d043      	beq.n	82b98 <__sfvwrite_r+0x230>
   82b10:	89a3      	ldrh	r3, [r4, #12]
   82b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82b16:	f04f 30ff 	mov.w	r0, #4294967295
   82b1a:	81a3      	strh	r3, [r4, #12]
   82b1c:	b003      	add	sp, #12
   82b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b22:	4680      	mov	r8, r0
   82b24:	4683      	mov	fp, r0
   82b26:	4682      	mov	sl, r0
   82b28:	9000      	str	r0, [sp, #0]
   82b2a:	f1ba 0f00 	cmp.w	sl, #0
   82b2e:	d02b      	beq.n	82b88 <__sfvwrite_r+0x220>
   82b30:	9b00      	ldr	r3, [sp, #0]
   82b32:	2b00      	cmp	r3, #0
   82b34:	d04f      	beq.n	82bd6 <__sfvwrite_r+0x26e>
   82b36:	45d0      	cmp	r8, sl
   82b38:	4643      	mov	r3, r8
   82b3a:	bf28      	it	cs
   82b3c:	4653      	movcs	r3, sl
   82b3e:	6820      	ldr	r0, [r4, #0]
   82b40:	6921      	ldr	r1, [r4, #16]
   82b42:	461f      	mov	r7, r3
   82b44:	4288      	cmp	r0, r1
   82b46:	f8d4 e008 	ldr.w	lr, [r4, #8]
   82b4a:	6962      	ldr	r2, [r4, #20]
   82b4c:	d903      	bls.n	82b56 <__sfvwrite_r+0x1ee>
   82b4e:	eb0e 0c02 	add.w	ip, lr, r2
   82b52:	4563      	cmp	r3, ip
   82b54:	dc5e      	bgt.n	82c14 <__sfvwrite_r+0x2ac>
   82b56:	4293      	cmp	r3, r2
   82b58:	db24      	blt.n	82ba4 <__sfvwrite_r+0x23c>
   82b5a:	4613      	mov	r3, r2
   82b5c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82b5e:	4648      	mov	r0, r9
   82b60:	69e1      	ldr	r1, [r4, #28]
   82b62:	465a      	mov	r2, fp
   82b64:	47b8      	blx	r7
   82b66:	1e07      	subs	r7, r0, #0
   82b68:	ddd2      	ble.n	82b10 <__sfvwrite_r+0x1a8>
   82b6a:	ebb8 0807 	subs.w	r8, r8, r7
   82b6e:	d029      	beq.n	82bc4 <__sfvwrite_r+0x25c>
   82b70:	68b3      	ldr	r3, [r6, #8]
   82b72:	44bb      	add	fp, r7
   82b74:	1bdb      	subs	r3, r3, r7
   82b76:	ebc7 0a0a 	rsb	sl, r7, sl
   82b7a:	60b3      	str	r3, [r6, #8]
   82b7c:	2b00      	cmp	r3, #0
   82b7e:	f43f af27 	beq.w	829d0 <__sfvwrite_r+0x68>
   82b82:	f1ba 0f00 	cmp.w	sl, #0
   82b86:	d1d3      	bne.n	82b30 <__sfvwrite_r+0x1c8>
   82b88:	2300      	movs	r3, #0
   82b8a:	f8d5 b000 	ldr.w	fp, [r5]
   82b8e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   82b92:	9300      	str	r3, [sp, #0]
   82b94:	3508      	adds	r5, #8
   82b96:	e7c8      	b.n	82b2a <__sfvwrite_r+0x1c2>
   82b98:	4638      	mov	r0, r7
   82b9a:	e781      	b.n	82aa0 <__sfvwrite_r+0x138>
   82b9c:	4647      	mov	r7, r8
   82b9e:	46c2      	mov	sl, r8
   82ba0:	6820      	ldr	r0, [r4, #0]
   82ba2:	e771      	b.n	82a88 <__sfvwrite_r+0x120>
   82ba4:	461a      	mov	r2, r3
   82ba6:	4659      	mov	r1, fp
   82ba8:	9301      	str	r3, [sp, #4]
   82baa:	f000 fbe7 	bl	8337c <memmove>
   82bae:	68a2      	ldr	r2, [r4, #8]
   82bb0:	6821      	ldr	r1, [r4, #0]
   82bb2:	9b01      	ldr	r3, [sp, #4]
   82bb4:	ebb8 0807 	subs.w	r8, r8, r7
   82bb8:	eba2 0203 	sub.w	r2, r2, r3
   82bbc:	440b      	add	r3, r1
   82bbe:	60a2      	str	r2, [r4, #8]
   82bc0:	6023      	str	r3, [r4, #0]
   82bc2:	d1d5      	bne.n	82b70 <__sfvwrite_r+0x208>
   82bc4:	4648      	mov	r0, r9
   82bc6:	4621      	mov	r1, r4
   82bc8:	f7ff fc8a 	bl	824e0 <_fflush_r>
   82bcc:	2800      	cmp	r0, #0
   82bce:	d19f      	bne.n	82b10 <__sfvwrite_r+0x1a8>
   82bd0:	f8cd 8000 	str.w	r8, [sp]
   82bd4:	e7cc      	b.n	82b70 <__sfvwrite_r+0x208>
   82bd6:	4658      	mov	r0, fp
   82bd8:	210a      	movs	r1, #10
   82bda:	4652      	mov	r2, sl
   82bdc:	f000 fb84 	bl	832e8 <memchr>
   82be0:	2800      	cmp	r0, #0
   82be2:	d041      	beq.n	82c68 <__sfvwrite_r+0x300>
   82be4:	3001      	adds	r0, #1
   82be6:	2301      	movs	r3, #1
   82be8:	ebcb 0800 	rsb	r8, fp, r0
   82bec:	9300      	str	r3, [sp, #0]
   82bee:	e7a2      	b.n	82b36 <__sfvwrite_r+0x1ce>
   82bf0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   82bf4:	4543      	cmp	r3, r8
   82bf6:	bf28      	it	cs
   82bf8:	4643      	movcs	r3, r8
   82bfa:	fb93 f3f2 	sdiv	r3, r3, r2
   82bfe:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82c00:	fb03 f302 	mul.w	r3, r3, r2
   82c04:	4648      	mov	r0, r9
   82c06:	69e1      	ldr	r1, [r4, #28]
   82c08:	465a      	mov	r2, fp
   82c0a:	47b8      	blx	r7
   82c0c:	2800      	cmp	r0, #0
   82c0e:	f73f af47 	bgt.w	82aa0 <__sfvwrite_r+0x138>
   82c12:	e77d      	b.n	82b10 <__sfvwrite_r+0x1a8>
   82c14:	4662      	mov	r2, ip
   82c16:	4659      	mov	r1, fp
   82c18:	f8cd c004 	str.w	ip, [sp, #4]
   82c1c:	f000 fbae 	bl	8337c <memmove>
   82c20:	6823      	ldr	r3, [r4, #0]
   82c22:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c26:	4648      	mov	r0, r9
   82c28:	4463      	add	r3, ip
   82c2a:	6023      	str	r3, [r4, #0]
   82c2c:	4621      	mov	r1, r4
   82c2e:	f7ff fc57 	bl	824e0 <_fflush_r>
   82c32:	f8dd c004 	ldr.w	ip, [sp, #4]
   82c36:	2800      	cmp	r0, #0
   82c38:	f47f af6a 	bne.w	82b10 <__sfvwrite_r+0x1a8>
   82c3c:	4667      	mov	r7, ip
   82c3e:	e794      	b.n	82b6a <__sfvwrite_r+0x202>
   82c40:	4648      	mov	r0, r9
   82c42:	f000 fc03 	bl	8344c <_realloc_r>
   82c46:	9b00      	ldr	r3, [sp, #0]
   82c48:	4682      	mov	sl, r0
   82c4a:	2800      	cmp	r0, #0
   82c4c:	f47f af12 	bne.w	82a74 <__sfvwrite_r+0x10c>
   82c50:	4648      	mov	r0, r9
   82c52:	6921      	ldr	r1, [r4, #16]
   82c54:	f7ff fdb0 	bl	827b8 <_free_r>
   82c58:	89a3      	ldrh	r3, [r4, #12]
   82c5a:	220c      	movs	r2, #12
   82c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82c60:	b29b      	uxth	r3, r3
   82c62:	f8c9 2000 	str.w	r2, [r9]
   82c66:	e754      	b.n	82b12 <__sfvwrite_r+0x1aa>
   82c68:	2301      	movs	r3, #1
   82c6a:	f10a 0801 	add.w	r8, sl, #1
   82c6e:	9300      	str	r3, [sp, #0]
   82c70:	e761      	b.n	82b36 <__sfvwrite_r+0x1ce>
   82c72:	f04f 30ff 	mov.w	r0, #4294967295
   82c76:	e6ac      	b.n	829d2 <__sfvwrite_r+0x6a>
   82c78:	230c      	movs	r3, #12
   82c7a:	f8c9 3000 	str.w	r3, [r9]
   82c7e:	89a3      	ldrh	r3, [r4, #12]
   82c80:	e747      	b.n	82b12 <__sfvwrite_r+0x1aa>
   82c82:	bf00      	nop
   82c84:	7ffffc00 	.word	0x7ffffc00

00082c88 <_fwalk_reent>:
   82c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82c8c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82c90:	d01e      	beq.n	82cd0 <_fwalk_reent+0x48>
   82c92:	4688      	mov	r8, r1
   82c94:	4607      	mov	r7, r0
   82c96:	f04f 0900 	mov.w	r9, #0
   82c9a:	6875      	ldr	r5, [r6, #4]
   82c9c:	68b4      	ldr	r4, [r6, #8]
   82c9e:	3d01      	subs	r5, #1
   82ca0:	d410      	bmi.n	82cc4 <_fwalk_reent+0x3c>
   82ca2:	89a3      	ldrh	r3, [r4, #12]
   82ca4:	3d01      	subs	r5, #1
   82ca6:	2b01      	cmp	r3, #1
   82ca8:	d908      	bls.n	82cbc <_fwalk_reent+0x34>
   82caa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82cae:	3301      	adds	r3, #1
   82cb0:	d004      	beq.n	82cbc <_fwalk_reent+0x34>
   82cb2:	4638      	mov	r0, r7
   82cb4:	4621      	mov	r1, r4
   82cb6:	47c0      	blx	r8
   82cb8:	ea49 0900 	orr.w	r9, r9, r0
   82cbc:	1c6b      	adds	r3, r5, #1
   82cbe:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82cc2:	d1ee      	bne.n	82ca2 <_fwalk_reent+0x1a>
   82cc4:	6836      	ldr	r6, [r6, #0]
   82cc6:	2e00      	cmp	r6, #0
   82cc8:	d1e7      	bne.n	82c9a <_fwalk_reent+0x12>
   82cca:	4648      	mov	r0, r9
   82ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82cd0:	46b1      	mov	r9, r6
   82cd2:	4648      	mov	r0, r9
   82cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082cd8 <__locale_charset>:
   82cd8:	4800      	ldr	r0, [pc, #0]	; (82cdc <__locale_charset+0x4>)
   82cda:	4770      	bx	lr
   82cdc:	2007056c 	.word	0x2007056c

00082ce0 <__locale_mb_cur_max>:
   82ce0:	4b01      	ldr	r3, [pc, #4]	; (82ce8 <__locale_mb_cur_max+0x8>)
   82ce2:	6818      	ldr	r0, [r3, #0]
   82ce4:	4770      	bx	lr
   82ce6:	bf00      	nop
   82ce8:	2007058c 	.word	0x2007058c

00082cec <__smakebuf_r>:
   82cec:	898b      	ldrh	r3, [r1, #12]
   82cee:	b29a      	uxth	r2, r3
   82cf0:	f012 0f02 	tst.w	r2, #2
   82cf4:	d13c      	bne.n	82d70 <__smakebuf_r+0x84>
   82cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
   82cf8:	460c      	mov	r4, r1
   82cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82cfe:	b091      	sub	sp, #68	; 0x44
   82d00:	2900      	cmp	r1, #0
   82d02:	4605      	mov	r5, r0
   82d04:	db19      	blt.n	82d3a <__smakebuf_r+0x4e>
   82d06:	aa01      	add	r2, sp, #4
   82d08:	f000 ff2a 	bl	83b60 <_fstat_r>
   82d0c:	2800      	cmp	r0, #0
   82d0e:	db12      	blt.n	82d36 <__smakebuf_r+0x4a>
   82d10:	9b02      	ldr	r3, [sp, #8]
   82d12:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82d16:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   82d1a:	fab7 f787 	clz	r7, r7
   82d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82d22:	ea4f 1757 	mov.w	r7, r7, lsr #5
   82d26:	d02a      	beq.n	82d7e <__smakebuf_r+0x92>
   82d28:	89a3      	ldrh	r3, [r4, #12]
   82d2a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82d2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82d32:	81a3      	strh	r3, [r4, #12]
   82d34:	e00b      	b.n	82d4e <__smakebuf_r+0x62>
   82d36:	89a3      	ldrh	r3, [r4, #12]
   82d38:	b29a      	uxth	r2, r3
   82d3a:	f012 0f80 	tst.w	r2, #128	; 0x80
   82d3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82d42:	81a3      	strh	r3, [r4, #12]
   82d44:	bf0c      	ite	eq
   82d46:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82d4a:	2640      	movne	r6, #64	; 0x40
   82d4c:	2700      	movs	r7, #0
   82d4e:	4628      	mov	r0, r5
   82d50:	4631      	mov	r1, r6
   82d52:	f000 f843 	bl	82ddc <_malloc_r>
   82d56:	89a3      	ldrh	r3, [r4, #12]
   82d58:	b340      	cbz	r0, 82dac <__smakebuf_r+0xc0>
   82d5a:	4a1a      	ldr	r2, [pc, #104]	; (82dc4 <__smakebuf_r+0xd8>)
   82d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82d60:	63ea      	str	r2, [r5, #60]	; 0x3c
   82d62:	81a3      	strh	r3, [r4, #12]
   82d64:	6020      	str	r0, [r4, #0]
   82d66:	6120      	str	r0, [r4, #16]
   82d68:	6166      	str	r6, [r4, #20]
   82d6a:	b99f      	cbnz	r7, 82d94 <__smakebuf_r+0xa8>
   82d6c:	b011      	add	sp, #68	; 0x44
   82d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82d70:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82d74:	2201      	movs	r2, #1
   82d76:	600b      	str	r3, [r1, #0]
   82d78:	610b      	str	r3, [r1, #16]
   82d7a:	614a      	str	r2, [r1, #20]
   82d7c:	4770      	bx	lr
   82d7e:	4b12      	ldr	r3, [pc, #72]	; (82dc8 <__smakebuf_r+0xdc>)
   82d80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   82d82:	429a      	cmp	r2, r3
   82d84:	d1d0      	bne.n	82d28 <__smakebuf_r+0x3c>
   82d86:	89a3      	ldrh	r3, [r4, #12]
   82d88:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82d8c:	4333      	orrs	r3, r6
   82d8e:	81a3      	strh	r3, [r4, #12]
   82d90:	64e6      	str	r6, [r4, #76]	; 0x4c
   82d92:	e7dc      	b.n	82d4e <__smakebuf_r+0x62>
   82d94:	4628      	mov	r0, r5
   82d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82d9a:	f000 fef5 	bl	83b88 <_isatty_r>
   82d9e:	2800      	cmp	r0, #0
   82da0:	d0e4      	beq.n	82d6c <__smakebuf_r+0x80>
   82da2:	89a3      	ldrh	r3, [r4, #12]
   82da4:	f043 0301 	orr.w	r3, r3, #1
   82da8:	81a3      	strh	r3, [r4, #12]
   82daa:	e7df      	b.n	82d6c <__smakebuf_r+0x80>
   82dac:	059a      	lsls	r2, r3, #22
   82dae:	d4dd      	bmi.n	82d6c <__smakebuf_r+0x80>
   82db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82db4:	f043 0302 	orr.w	r3, r3, #2
   82db8:	2101      	movs	r1, #1
   82dba:	81a3      	strh	r3, [r4, #12]
   82dbc:	6022      	str	r2, [r4, #0]
   82dbe:	6122      	str	r2, [r4, #16]
   82dc0:	6161      	str	r1, [r4, #20]
   82dc2:	e7d3      	b.n	82d6c <__smakebuf_r+0x80>
   82dc4:	0008250d 	.word	0x0008250d
   82dc8:	000838ad 	.word	0x000838ad

00082dcc <malloc>:
   82dcc:	4b02      	ldr	r3, [pc, #8]	; (82dd8 <malloc+0xc>)
   82dce:	4601      	mov	r1, r0
   82dd0:	6818      	ldr	r0, [r3, #0]
   82dd2:	f000 b803 	b.w	82ddc <_malloc_r>
   82dd6:	bf00      	nop
   82dd8:	20070568 	.word	0x20070568

00082ddc <_malloc_r>:
   82ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82de0:	f101 050b 	add.w	r5, r1, #11
   82de4:	2d16      	cmp	r5, #22
   82de6:	b083      	sub	sp, #12
   82de8:	4606      	mov	r6, r0
   82dea:	d927      	bls.n	82e3c <_malloc_r+0x60>
   82dec:	f035 0507 	bics.w	r5, r5, #7
   82df0:	f100 80b6 	bmi.w	82f60 <_malloc_r+0x184>
   82df4:	42a9      	cmp	r1, r5
   82df6:	f200 80b3 	bhi.w	82f60 <_malloc_r+0x184>
   82dfa:	f000 fb23 	bl	83444 <__malloc_lock>
   82dfe:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82e02:	d222      	bcs.n	82e4a <_malloc_r+0x6e>
   82e04:	4fbc      	ldr	r7, [pc, #752]	; (830f8 <_malloc_r+0x31c>)
   82e06:	08e8      	lsrs	r0, r5, #3
   82e08:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   82e0c:	68dc      	ldr	r4, [r3, #12]
   82e0e:	429c      	cmp	r4, r3
   82e10:	f000 81bc 	beq.w	8318c <_malloc_r+0x3b0>
   82e14:	6863      	ldr	r3, [r4, #4]
   82e16:	68e1      	ldr	r1, [r4, #12]
   82e18:	f023 0303 	bic.w	r3, r3, #3
   82e1c:	4423      	add	r3, r4
   82e1e:	685a      	ldr	r2, [r3, #4]
   82e20:	68a5      	ldr	r5, [r4, #8]
   82e22:	f042 0201 	orr.w	r2, r2, #1
   82e26:	60e9      	str	r1, [r5, #12]
   82e28:	4630      	mov	r0, r6
   82e2a:	608d      	str	r5, [r1, #8]
   82e2c:	605a      	str	r2, [r3, #4]
   82e2e:	f000 fb0b 	bl	83448 <__malloc_unlock>
   82e32:	3408      	adds	r4, #8
   82e34:	4620      	mov	r0, r4
   82e36:	b003      	add	sp, #12
   82e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e3c:	2910      	cmp	r1, #16
   82e3e:	f200 808f 	bhi.w	82f60 <_malloc_r+0x184>
   82e42:	f000 faff 	bl	83444 <__malloc_lock>
   82e46:	2510      	movs	r5, #16
   82e48:	e7dc      	b.n	82e04 <_malloc_r+0x28>
   82e4a:	0a68      	lsrs	r0, r5, #9
   82e4c:	f000 808f 	beq.w	82f6e <_malloc_r+0x192>
   82e50:	2804      	cmp	r0, #4
   82e52:	f200 8147 	bhi.w	830e4 <_malloc_r+0x308>
   82e56:	09a8      	lsrs	r0, r5, #6
   82e58:	3038      	adds	r0, #56	; 0x38
   82e5a:	0041      	lsls	r1, r0, #1
   82e5c:	4fa6      	ldr	r7, [pc, #664]	; (830f8 <_malloc_r+0x31c>)
   82e5e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82e62:	68cc      	ldr	r4, [r1, #12]
   82e64:	42a1      	cmp	r1, r4
   82e66:	d106      	bne.n	82e76 <_malloc_r+0x9a>
   82e68:	e00c      	b.n	82e84 <_malloc_r+0xa8>
   82e6a:	2a00      	cmp	r2, #0
   82e6c:	f280 8082 	bge.w	82f74 <_malloc_r+0x198>
   82e70:	68e4      	ldr	r4, [r4, #12]
   82e72:	42a1      	cmp	r1, r4
   82e74:	d006      	beq.n	82e84 <_malloc_r+0xa8>
   82e76:	6863      	ldr	r3, [r4, #4]
   82e78:	f023 0303 	bic.w	r3, r3, #3
   82e7c:	1b5a      	subs	r2, r3, r5
   82e7e:	2a0f      	cmp	r2, #15
   82e80:	ddf3      	ble.n	82e6a <_malloc_r+0x8e>
   82e82:	3801      	subs	r0, #1
   82e84:	3001      	adds	r0, #1
   82e86:	499c      	ldr	r1, [pc, #624]	; (830f8 <_malloc_r+0x31c>)
   82e88:	693c      	ldr	r4, [r7, #16]
   82e8a:	f101 0e08 	add.w	lr, r1, #8
   82e8e:	4574      	cmp	r4, lr
   82e90:	f000 8171 	beq.w	83176 <_malloc_r+0x39a>
   82e94:	6863      	ldr	r3, [r4, #4]
   82e96:	f023 0303 	bic.w	r3, r3, #3
   82e9a:	1b5a      	subs	r2, r3, r5
   82e9c:	2a0f      	cmp	r2, #15
   82e9e:	f300 8157 	bgt.w	83150 <_malloc_r+0x374>
   82ea2:	2a00      	cmp	r2, #0
   82ea4:	f8c1 e014 	str.w	lr, [r1, #20]
   82ea8:	f8c1 e010 	str.w	lr, [r1, #16]
   82eac:	da66      	bge.n	82f7c <_malloc_r+0x1a0>
   82eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82eb2:	f080 812d 	bcs.w	83110 <_malloc_r+0x334>
   82eb6:	08db      	lsrs	r3, r3, #3
   82eb8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   82ebc:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82ec0:	684a      	ldr	r2, [r1, #4]
   82ec2:	2301      	movs	r3, #1
   82ec4:	fa03 f30c 	lsl.w	r3, r3, ip
   82ec8:	f8d8 c008 	ldr.w	ip, [r8, #8]
   82ecc:	4313      	orrs	r3, r2
   82ece:	f8c4 c008 	str.w	ip, [r4, #8]
   82ed2:	f8c4 800c 	str.w	r8, [r4, #12]
   82ed6:	604b      	str	r3, [r1, #4]
   82ed8:	f8c8 4008 	str.w	r4, [r8, #8]
   82edc:	f8cc 400c 	str.w	r4, [ip, #12]
   82ee0:	1082      	asrs	r2, r0, #2
   82ee2:	2401      	movs	r4, #1
   82ee4:	4094      	lsls	r4, r2
   82ee6:	429c      	cmp	r4, r3
   82ee8:	d855      	bhi.n	82f96 <_malloc_r+0x1ba>
   82eea:	4223      	tst	r3, r4
   82eec:	d106      	bne.n	82efc <_malloc_r+0x120>
   82eee:	f020 0003 	bic.w	r0, r0, #3
   82ef2:	0064      	lsls	r4, r4, #1
   82ef4:	4223      	tst	r3, r4
   82ef6:	f100 0004 	add.w	r0, r0, #4
   82efa:	d0fa      	beq.n	82ef2 <_malloc_r+0x116>
   82efc:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   82f00:	46c4      	mov	ip, r8
   82f02:	4681      	mov	r9, r0
   82f04:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82f08:	459c      	cmp	ip, r3
   82f0a:	d107      	bne.n	82f1c <_malloc_r+0x140>
   82f0c:	e135      	b.n	8317a <_malloc_r+0x39e>
   82f0e:	2900      	cmp	r1, #0
   82f10:	f280 8145 	bge.w	8319e <_malloc_r+0x3c2>
   82f14:	68db      	ldr	r3, [r3, #12]
   82f16:	459c      	cmp	ip, r3
   82f18:	f000 812f 	beq.w	8317a <_malloc_r+0x39e>
   82f1c:	685a      	ldr	r2, [r3, #4]
   82f1e:	f022 0203 	bic.w	r2, r2, #3
   82f22:	1b51      	subs	r1, r2, r5
   82f24:	290f      	cmp	r1, #15
   82f26:	ddf2      	ble.n	82f0e <_malloc_r+0x132>
   82f28:	461c      	mov	r4, r3
   82f2a:	68da      	ldr	r2, [r3, #12]
   82f2c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82f30:	f045 0901 	orr.w	r9, r5, #1
   82f34:	f041 0801 	orr.w	r8, r1, #1
   82f38:	441d      	add	r5, r3
   82f3a:	f8c3 9004 	str.w	r9, [r3, #4]
   82f3e:	4630      	mov	r0, r6
   82f40:	f8cc 200c 	str.w	r2, [ip, #12]
   82f44:	f8c2 c008 	str.w	ip, [r2, #8]
   82f48:	617d      	str	r5, [r7, #20]
   82f4a:	613d      	str	r5, [r7, #16]
   82f4c:	f8c5 e00c 	str.w	lr, [r5, #12]
   82f50:	f8c5 e008 	str.w	lr, [r5, #8]
   82f54:	f8c5 8004 	str.w	r8, [r5, #4]
   82f58:	5069      	str	r1, [r5, r1]
   82f5a:	f000 fa75 	bl	83448 <__malloc_unlock>
   82f5e:	e769      	b.n	82e34 <_malloc_r+0x58>
   82f60:	2400      	movs	r4, #0
   82f62:	4620      	mov	r0, r4
   82f64:	230c      	movs	r3, #12
   82f66:	6033      	str	r3, [r6, #0]
   82f68:	b003      	add	sp, #12
   82f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f6e:	217e      	movs	r1, #126	; 0x7e
   82f70:	203f      	movs	r0, #63	; 0x3f
   82f72:	e773      	b.n	82e5c <_malloc_r+0x80>
   82f74:	4423      	add	r3, r4
   82f76:	685a      	ldr	r2, [r3, #4]
   82f78:	68e1      	ldr	r1, [r4, #12]
   82f7a:	e751      	b.n	82e20 <_malloc_r+0x44>
   82f7c:	4423      	add	r3, r4
   82f7e:	685a      	ldr	r2, [r3, #4]
   82f80:	4630      	mov	r0, r6
   82f82:	f042 0201 	orr.w	r2, r2, #1
   82f86:	605a      	str	r2, [r3, #4]
   82f88:	3408      	adds	r4, #8
   82f8a:	f000 fa5d 	bl	83448 <__malloc_unlock>
   82f8e:	4620      	mov	r0, r4
   82f90:	b003      	add	sp, #12
   82f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f96:	68bc      	ldr	r4, [r7, #8]
   82f98:	6863      	ldr	r3, [r4, #4]
   82f9a:	f023 0803 	bic.w	r8, r3, #3
   82f9e:	4545      	cmp	r5, r8
   82fa0:	d804      	bhi.n	82fac <_malloc_r+0x1d0>
   82fa2:	ebc5 0308 	rsb	r3, r5, r8
   82fa6:	2b0f      	cmp	r3, #15
   82fa8:	f300 808c 	bgt.w	830c4 <_malloc_r+0x2e8>
   82fac:	4b53      	ldr	r3, [pc, #332]	; (830fc <_malloc_r+0x320>)
   82fae:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8310c <_malloc_r+0x330>
   82fb2:	681a      	ldr	r2, [r3, #0]
   82fb4:	f8da 3000 	ldr.w	r3, [sl]
   82fb8:	442a      	add	r2, r5
   82fba:	3301      	adds	r3, #1
   82fbc:	eb04 0b08 	add.w	fp, r4, r8
   82fc0:	f000 8151 	beq.w	83266 <_malloc_r+0x48a>
   82fc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   82fc8:	320f      	adds	r2, #15
   82fca:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   82fce:	f022 020f 	bic.w	r2, r2, #15
   82fd2:	4611      	mov	r1, r2
   82fd4:	4630      	mov	r0, r6
   82fd6:	9201      	str	r2, [sp, #4]
   82fd8:	f000 fc28 	bl	8382c <_sbrk_r>
   82fdc:	f1b0 3fff 	cmp.w	r0, #4294967295
   82fe0:	4681      	mov	r9, r0
   82fe2:	9a01      	ldr	r2, [sp, #4]
   82fe4:	f000 8148 	beq.w	83278 <_malloc_r+0x49c>
   82fe8:	4583      	cmp	fp, r0
   82fea:	f200 80ef 	bhi.w	831cc <_malloc_r+0x3f0>
   82fee:	4b44      	ldr	r3, [pc, #272]	; (83100 <_malloc_r+0x324>)
   82ff0:	45cb      	cmp	fp, r9
   82ff2:	6819      	ldr	r1, [r3, #0]
   82ff4:	4411      	add	r1, r2
   82ff6:	6019      	str	r1, [r3, #0]
   82ff8:	f000 8143 	beq.w	83282 <_malloc_r+0x4a6>
   82ffc:	f8da 0000 	ldr.w	r0, [sl]
   83000:	f8df e108 	ldr.w	lr, [pc, #264]	; 8310c <_malloc_r+0x330>
   83004:	3001      	adds	r0, #1
   83006:	bf1b      	ittet	ne
   83008:	ebcb 0b09 	rsbne	fp, fp, r9
   8300c:	4459      	addne	r1, fp
   8300e:	f8ce 9000 	streq.w	r9, [lr]
   83012:	6019      	strne	r1, [r3, #0]
   83014:	f019 0107 	ands.w	r1, r9, #7
   83018:	f000 8108 	beq.w	8322c <_malloc_r+0x450>
   8301c:	f1c1 0008 	rsb	r0, r1, #8
   83020:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83024:	4481      	add	r9, r0
   83026:	3108      	adds	r1, #8
   83028:	444a      	add	r2, r9
   8302a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   8302e:	ebc2 0a01 	rsb	sl, r2, r1
   83032:	4651      	mov	r1, sl
   83034:	4630      	mov	r0, r6
   83036:	9301      	str	r3, [sp, #4]
   83038:	f000 fbf8 	bl	8382c <_sbrk_r>
   8303c:	1c43      	adds	r3, r0, #1
   8303e:	9b01      	ldr	r3, [sp, #4]
   83040:	f000 812d 	beq.w	8329e <_malloc_r+0x4c2>
   83044:	ebc9 0200 	rsb	r2, r9, r0
   83048:	4452      	add	r2, sl
   8304a:	f042 0201 	orr.w	r2, r2, #1
   8304e:	6819      	ldr	r1, [r3, #0]
   83050:	42bc      	cmp	r4, r7
   83052:	4451      	add	r1, sl
   83054:	f8c7 9008 	str.w	r9, [r7, #8]
   83058:	6019      	str	r1, [r3, #0]
   8305a:	f8c9 2004 	str.w	r2, [r9, #4]
   8305e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 83100 <_malloc_r+0x324>
   83062:	d016      	beq.n	83092 <_malloc_r+0x2b6>
   83064:	f1b8 0f0f 	cmp.w	r8, #15
   83068:	f240 80ef 	bls.w	8324a <_malloc_r+0x46e>
   8306c:	6862      	ldr	r2, [r4, #4]
   8306e:	f1a8 030c 	sub.w	r3, r8, #12
   83072:	f023 0307 	bic.w	r3, r3, #7
   83076:	f002 0201 	and.w	r2, r2, #1
   8307a:	18e0      	adds	r0, r4, r3
   8307c:	f04f 0e05 	mov.w	lr, #5
   83080:	431a      	orrs	r2, r3
   83082:	2b0f      	cmp	r3, #15
   83084:	6062      	str	r2, [r4, #4]
   83086:	f8c0 e004 	str.w	lr, [r0, #4]
   8308a:	f8c0 e008 	str.w	lr, [r0, #8]
   8308e:	f200 810a 	bhi.w	832a6 <_malloc_r+0x4ca>
   83092:	4b1c      	ldr	r3, [pc, #112]	; (83104 <_malloc_r+0x328>)
   83094:	68bc      	ldr	r4, [r7, #8]
   83096:	681a      	ldr	r2, [r3, #0]
   83098:	4291      	cmp	r1, r2
   8309a:	bf88      	it	hi
   8309c:	6019      	strhi	r1, [r3, #0]
   8309e:	4b1a      	ldr	r3, [pc, #104]	; (83108 <_malloc_r+0x32c>)
   830a0:	681a      	ldr	r2, [r3, #0]
   830a2:	4291      	cmp	r1, r2
   830a4:	6862      	ldr	r2, [r4, #4]
   830a6:	bf88      	it	hi
   830a8:	6019      	strhi	r1, [r3, #0]
   830aa:	f022 0203 	bic.w	r2, r2, #3
   830ae:	4295      	cmp	r5, r2
   830b0:	eba2 0305 	sub.w	r3, r2, r5
   830b4:	d801      	bhi.n	830ba <_malloc_r+0x2de>
   830b6:	2b0f      	cmp	r3, #15
   830b8:	dc04      	bgt.n	830c4 <_malloc_r+0x2e8>
   830ba:	4630      	mov	r0, r6
   830bc:	f000 f9c4 	bl	83448 <__malloc_unlock>
   830c0:	2400      	movs	r4, #0
   830c2:	e6b7      	b.n	82e34 <_malloc_r+0x58>
   830c4:	f045 0201 	orr.w	r2, r5, #1
   830c8:	f043 0301 	orr.w	r3, r3, #1
   830cc:	4425      	add	r5, r4
   830ce:	6062      	str	r2, [r4, #4]
   830d0:	4630      	mov	r0, r6
   830d2:	60bd      	str	r5, [r7, #8]
   830d4:	3408      	adds	r4, #8
   830d6:	606b      	str	r3, [r5, #4]
   830d8:	f000 f9b6 	bl	83448 <__malloc_unlock>
   830dc:	4620      	mov	r0, r4
   830de:	b003      	add	sp, #12
   830e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830e4:	2814      	cmp	r0, #20
   830e6:	d969      	bls.n	831bc <_malloc_r+0x3e0>
   830e8:	2854      	cmp	r0, #84	; 0x54
   830ea:	f200 8098 	bhi.w	8321e <_malloc_r+0x442>
   830ee:	0b28      	lsrs	r0, r5, #12
   830f0:	306e      	adds	r0, #110	; 0x6e
   830f2:	0041      	lsls	r1, r0, #1
   830f4:	e6b2      	b.n	82e5c <_malloc_r+0x80>
   830f6:	bf00      	nop
   830f8:	20070590 	.word	0x20070590
   830fc:	20070b2c 	.word	0x20070b2c
   83100:	20070b30 	.word	0x20070b30
   83104:	20070b28 	.word	0x20070b28
   83108:	20070b24 	.word	0x20070b24
   8310c:	2007099c 	.word	0x2007099c
   83110:	0a5a      	lsrs	r2, r3, #9
   83112:	2a04      	cmp	r2, #4
   83114:	d955      	bls.n	831c2 <_malloc_r+0x3e6>
   83116:	2a14      	cmp	r2, #20
   83118:	f200 80a7 	bhi.w	8326a <_malloc_r+0x48e>
   8311c:	325b      	adds	r2, #91	; 0x5b
   8311e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83122:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   83126:	f8dc 1008 	ldr.w	r1, [ip, #8]
   8312a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 832e4 <_malloc_r+0x508>
   8312e:	4561      	cmp	r1, ip
   83130:	d07f      	beq.n	83232 <_malloc_r+0x456>
   83132:	684a      	ldr	r2, [r1, #4]
   83134:	f022 0203 	bic.w	r2, r2, #3
   83138:	4293      	cmp	r3, r2
   8313a:	d202      	bcs.n	83142 <_malloc_r+0x366>
   8313c:	6889      	ldr	r1, [r1, #8]
   8313e:	458c      	cmp	ip, r1
   83140:	d1f7      	bne.n	83132 <_malloc_r+0x356>
   83142:	68ca      	ldr	r2, [r1, #12]
   83144:	687b      	ldr	r3, [r7, #4]
   83146:	60e2      	str	r2, [r4, #12]
   83148:	60a1      	str	r1, [r4, #8]
   8314a:	6094      	str	r4, [r2, #8]
   8314c:	60cc      	str	r4, [r1, #12]
   8314e:	e6c7      	b.n	82ee0 <_malloc_r+0x104>
   83150:	f045 0701 	orr.w	r7, r5, #1
   83154:	f042 0301 	orr.w	r3, r2, #1
   83158:	4425      	add	r5, r4
   8315a:	6067      	str	r7, [r4, #4]
   8315c:	4630      	mov	r0, r6
   8315e:	614d      	str	r5, [r1, #20]
   83160:	610d      	str	r5, [r1, #16]
   83162:	f8c5 e00c 	str.w	lr, [r5, #12]
   83166:	f8c5 e008 	str.w	lr, [r5, #8]
   8316a:	606b      	str	r3, [r5, #4]
   8316c:	50aa      	str	r2, [r5, r2]
   8316e:	3408      	adds	r4, #8
   83170:	f000 f96a 	bl	83448 <__malloc_unlock>
   83174:	e65e      	b.n	82e34 <_malloc_r+0x58>
   83176:	684b      	ldr	r3, [r1, #4]
   83178:	e6b2      	b.n	82ee0 <_malloc_r+0x104>
   8317a:	f109 0901 	add.w	r9, r9, #1
   8317e:	f019 0f03 	tst.w	r9, #3
   83182:	f10c 0c08 	add.w	ip, ip, #8
   83186:	f47f aebd 	bne.w	82f04 <_malloc_r+0x128>
   8318a:	e02c      	b.n	831e6 <_malloc_r+0x40a>
   8318c:	f104 0308 	add.w	r3, r4, #8
   83190:	6964      	ldr	r4, [r4, #20]
   83192:	42a3      	cmp	r3, r4
   83194:	bf08      	it	eq
   83196:	3002      	addeq	r0, #2
   83198:	f43f ae75 	beq.w	82e86 <_malloc_r+0xaa>
   8319c:	e63a      	b.n	82e14 <_malloc_r+0x38>
   8319e:	461c      	mov	r4, r3
   831a0:	441a      	add	r2, r3
   831a2:	6851      	ldr	r1, [r2, #4]
   831a4:	68db      	ldr	r3, [r3, #12]
   831a6:	f854 5f08 	ldr.w	r5, [r4, #8]!
   831aa:	f041 0101 	orr.w	r1, r1, #1
   831ae:	6051      	str	r1, [r2, #4]
   831b0:	4630      	mov	r0, r6
   831b2:	60eb      	str	r3, [r5, #12]
   831b4:	609d      	str	r5, [r3, #8]
   831b6:	f000 f947 	bl	83448 <__malloc_unlock>
   831ba:	e63b      	b.n	82e34 <_malloc_r+0x58>
   831bc:	305b      	adds	r0, #91	; 0x5b
   831be:	0041      	lsls	r1, r0, #1
   831c0:	e64c      	b.n	82e5c <_malloc_r+0x80>
   831c2:	099a      	lsrs	r2, r3, #6
   831c4:	3238      	adds	r2, #56	; 0x38
   831c6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   831ca:	e7aa      	b.n	83122 <_malloc_r+0x346>
   831cc:	42bc      	cmp	r4, r7
   831ce:	4b45      	ldr	r3, [pc, #276]	; (832e4 <_malloc_r+0x508>)
   831d0:	f43f af0d 	beq.w	82fee <_malloc_r+0x212>
   831d4:	689c      	ldr	r4, [r3, #8]
   831d6:	6862      	ldr	r2, [r4, #4]
   831d8:	f022 0203 	bic.w	r2, r2, #3
   831dc:	e767      	b.n	830ae <_malloc_r+0x2d2>
   831de:	f8d8 8000 	ldr.w	r8, [r8]
   831e2:	4598      	cmp	r8, r3
   831e4:	d17c      	bne.n	832e0 <_malloc_r+0x504>
   831e6:	f010 0f03 	tst.w	r0, #3
   831ea:	f1a8 0308 	sub.w	r3, r8, #8
   831ee:	f100 30ff 	add.w	r0, r0, #4294967295
   831f2:	d1f4      	bne.n	831de <_malloc_r+0x402>
   831f4:	687b      	ldr	r3, [r7, #4]
   831f6:	ea23 0304 	bic.w	r3, r3, r4
   831fa:	607b      	str	r3, [r7, #4]
   831fc:	0064      	lsls	r4, r4, #1
   831fe:	429c      	cmp	r4, r3
   83200:	f63f aec9 	bhi.w	82f96 <_malloc_r+0x1ba>
   83204:	2c00      	cmp	r4, #0
   83206:	f43f aec6 	beq.w	82f96 <_malloc_r+0x1ba>
   8320a:	4223      	tst	r3, r4
   8320c:	4648      	mov	r0, r9
   8320e:	f47f ae75 	bne.w	82efc <_malloc_r+0x120>
   83212:	0064      	lsls	r4, r4, #1
   83214:	4223      	tst	r3, r4
   83216:	f100 0004 	add.w	r0, r0, #4
   8321a:	d0fa      	beq.n	83212 <_malloc_r+0x436>
   8321c:	e66e      	b.n	82efc <_malloc_r+0x120>
   8321e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   83222:	d818      	bhi.n	83256 <_malloc_r+0x47a>
   83224:	0be8      	lsrs	r0, r5, #15
   83226:	3077      	adds	r0, #119	; 0x77
   83228:	0041      	lsls	r1, r0, #1
   8322a:	e617      	b.n	82e5c <_malloc_r+0x80>
   8322c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83230:	e6fa      	b.n	83028 <_malloc_r+0x24c>
   83232:	f8d8 3004 	ldr.w	r3, [r8, #4]
   83236:	1092      	asrs	r2, r2, #2
   83238:	f04f 0c01 	mov.w	ip, #1
   8323c:	fa0c f202 	lsl.w	r2, ip, r2
   83240:	4313      	orrs	r3, r2
   83242:	f8c8 3004 	str.w	r3, [r8, #4]
   83246:	460a      	mov	r2, r1
   83248:	e77d      	b.n	83146 <_malloc_r+0x36a>
   8324a:	2301      	movs	r3, #1
   8324c:	f8c9 3004 	str.w	r3, [r9, #4]
   83250:	464c      	mov	r4, r9
   83252:	2200      	movs	r2, #0
   83254:	e72b      	b.n	830ae <_malloc_r+0x2d2>
   83256:	f240 5354 	movw	r3, #1364	; 0x554
   8325a:	4298      	cmp	r0, r3
   8325c:	d81c      	bhi.n	83298 <_malloc_r+0x4bc>
   8325e:	0ca8      	lsrs	r0, r5, #18
   83260:	307c      	adds	r0, #124	; 0x7c
   83262:	0041      	lsls	r1, r0, #1
   83264:	e5fa      	b.n	82e5c <_malloc_r+0x80>
   83266:	3210      	adds	r2, #16
   83268:	e6b3      	b.n	82fd2 <_malloc_r+0x1f6>
   8326a:	2a54      	cmp	r2, #84	; 0x54
   8326c:	d823      	bhi.n	832b6 <_malloc_r+0x4da>
   8326e:	0b1a      	lsrs	r2, r3, #12
   83270:	326e      	adds	r2, #110	; 0x6e
   83272:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83276:	e754      	b.n	83122 <_malloc_r+0x346>
   83278:	68bc      	ldr	r4, [r7, #8]
   8327a:	6862      	ldr	r2, [r4, #4]
   8327c:	f022 0203 	bic.w	r2, r2, #3
   83280:	e715      	b.n	830ae <_malloc_r+0x2d2>
   83282:	f3cb 000b 	ubfx	r0, fp, #0, #12
   83286:	2800      	cmp	r0, #0
   83288:	f47f aeb8 	bne.w	82ffc <_malloc_r+0x220>
   8328c:	4442      	add	r2, r8
   8328e:	68bb      	ldr	r3, [r7, #8]
   83290:	f042 0201 	orr.w	r2, r2, #1
   83294:	605a      	str	r2, [r3, #4]
   83296:	e6fc      	b.n	83092 <_malloc_r+0x2b6>
   83298:	21fc      	movs	r1, #252	; 0xfc
   8329a:	207e      	movs	r0, #126	; 0x7e
   8329c:	e5de      	b.n	82e5c <_malloc_r+0x80>
   8329e:	2201      	movs	r2, #1
   832a0:	f04f 0a00 	mov.w	sl, #0
   832a4:	e6d3      	b.n	8304e <_malloc_r+0x272>
   832a6:	f104 0108 	add.w	r1, r4, #8
   832aa:	4630      	mov	r0, r6
   832ac:	f7ff fa84 	bl	827b8 <_free_r>
   832b0:	f8da 1000 	ldr.w	r1, [sl]
   832b4:	e6ed      	b.n	83092 <_malloc_r+0x2b6>
   832b6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   832ba:	d804      	bhi.n	832c6 <_malloc_r+0x4ea>
   832bc:	0bda      	lsrs	r2, r3, #15
   832be:	3277      	adds	r2, #119	; 0x77
   832c0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   832c4:	e72d      	b.n	83122 <_malloc_r+0x346>
   832c6:	f240 5154 	movw	r1, #1364	; 0x554
   832ca:	428a      	cmp	r2, r1
   832cc:	d804      	bhi.n	832d8 <_malloc_r+0x4fc>
   832ce:	0c9a      	lsrs	r2, r3, #18
   832d0:	327c      	adds	r2, #124	; 0x7c
   832d2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   832d6:	e724      	b.n	83122 <_malloc_r+0x346>
   832d8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   832dc:	227e      	movs	r2, #126	; 0x7e
   832de:	e720      	b.n	83122 <_malloc_r+0x346>
   832e0:	687b      	ldr	r3, [r7, #4]
   832e2:	e78b      	b.n	831fc <_malloc_r+0x420>
   832e4:	20070590 	.word	0x20070590

000832e8 <memchr>:
   832e8:	0783      	lsls	r3, r0, #30
   832ea:	b470      	push	{r4, r5, r6}
   832ec:	b2c9      	uxtb	r1, r1
   832ee:	d040      	beq.n	83372 <memchr+0x8a>
   832f0:	1e54      	subs	r4, r2, #1
   832f2:	2a00      	cmp	r2, #0
   832f4:	d03f      	beq.n	83376 <memchr+0x8e>
   832f6:	7803      	ldrb	r3, [r0, #0]
   832f8:	428b      	cmp	r3, r1
   832fa:	bf18      	it	ne
   832fc:	1c43      	addne	r3, r0, #1
   832fe:	d105      	bne.n	8330c <memchr+0x24>
   83300:	e01c      	b.n	8333c <memchr+0x54>
   83302:	b1ec      	cbz	r4, 83340 <memchr+0x58>
   83304:	7802      	ldrb	r2, [r0, #0]
   83306:	3c01      	subs	r4, #1
   83308:	428a      	cmp	r2, r1
   8330a:	d017      	beq.n	8333c <memchr+0x54>
   8330c:	f013 0f03 	tst.w	r3, #3
   83310:	4618      	mov	r0, r3
   83312:	f103 0301 	add.w	r3, r3, #1
   83316:	d1f4      	bne.n	83302 <memchr+0x1a>
   83318:	2c03      	cmp	r4, #3
   8331a:	d814      	bhi.n	83346 <memchr+0x5e>
   8331c:	b184      	cbz	r4, 83340 <memchr+0x58>
   8331e:	7803      	ldrb	r3, [r0, #0]
   83320:	428b      	cmp	r3, r1
   83322:	d00b      	beq.n	8333c <memchr+0x54>
   83324:	1905      	adds	r5, r0, r4
   83326:	1c43      	adds	r3, r0, #1
   83328:	e002      	b.n	83330 <memchr+0x48>
   8332a:	7802      	ldrb	r2, [r0, #0]
   8332c:	428a      	cmp	r2, r1
   8332e:	d005      	beq.n	8333c <memchr+0x54>
   83330:	42ab      	cmp	r3, r5
   83332:	4618      	mov	r0, r3
   83334:	f103 0301 	add.w	r3, r3, #1
   83338:	d1f7      	bne.n	8332a <memchr+0x42>
   8333a:	2000      	movs	r0, #0
   8333c:	bc70      	pop	{r4, r5, r6}
   8333e:	4770      	bx	lr
   83340:	4620      	mov	r0, r4
   83342:	bc70      	pop	{r4, r5, r6}
   83344:	4770      	bx	lr
   83346:	4602      	mov	r2, r0
   83348:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   8334c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83350:	6813      	ldr	r3, [r2, #0]
   83352:	4610      	mov	r0, r2
   83354:	4073      	eors	r3, r6
   83356:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   8335a:	ea25 0303 	bic.w	r3, r5, r3
   8335e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83362:	f102 0204 	add.w	r2, r2, #4
   83366:	d1d9      	bne.n	8331c <memchr+0x34>
   83368:	3c04      	subs	r4, #4
   8336a:	2c03      	cmp	r4, #3
   8336c:	4610      	mov	r0, r2
   8336e:	d8ef      	bhi.n	83350 <memchr+0x68>
   83370:	e7d4      	b.n	8331c <memchr+0x34>
   83372:	4614      	mov	r4, r2
   83374:	e7d0      	b.n	83318 <memchr+0x30>
   83376:	4610      	mov	r0, r2
   83378:	e7e0      	b.n	8333c <memchr+0x54>
   8337a:	bf00      	nop

0008337c <memmove>:
   8337c:	4288      	cmp	r0, r1
   8337e:	b5f0      	push	{r4, r5, r6, r7, lr}
   83380:	d90d      	bls.n	8339e <memmove+0x22>
   83382:	188b      	adds	r3, r1, r2
   83384:	4298      	cmp	r0, r3
   83386:	d20a      	bcs.n	8339e <memmove+0x22>
   83388:	1881      	adds	r1, r0, r2
   8338a:	2a00      	cmp	r2, #0
   8338c:	d054      	beq.n	83438 <memmove+0xbc>
   8338e:	1a9a      	subs	r2, r3, r2
   83390:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83394:	4293      	cmp	r3, r2
   83396:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8339a:	d1f9      	bne.n	83390 <memmove+0x14>
   8339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8339e:	2a0f      	cmp	r2, #15
   833a0:	d948      	bls.n	83434 <memmove+0xb8>
   833a2:	ea40 0301 	orr.w	r3, r0, r1
   833a6:	079b      	lsls	r3, r3, #30
   833a8:	d147      	bne.n	8343a <memmove+0xbe>
   833aa:	4615      	mov	r5, r2
   833ac:	f100 0410 	add.w	r4, r0, #16
   833b0:	f101 0310 	add.w	r3, r1, #16
   833b4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   833b8:	3d10      	subs	r5, #16
   833ba:	f844 6c10 	str.w	r6, [r4, #-16]
   833be:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   833c2:	2d0f      	cmp	r5, #15
   833c4:	f844 6c0c 	str.w	r6, [r4, #-12]
   833c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   833cc:	f104 0410 	add.w	r4, r4, #16
   833d0:	f844 6c18 	str.w	r6, [r4, #-24]
   833d4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   833d8:	f103 0310 	add.w	r3, r3, #16
   833dc:	f844 6c14 	str.w	r6, [r4, #-20]
   833e0:	d8e8      	bhi.n	833b4 <memmove+0x38>
   833e2:	f1a2 0310 	sub.w	r3, r2, #16
   833e6:	f023 030f 	bic.w	r3, r3, #15
   833ea:	f002 0e0f 	and.w	lr, r2, #15
   833ee:	3310      	adds	r3, #16
   833f0:	f1be 0f03 	cmp.w	lr, #3
   833f4:	4419      	add	r1, r3
   833f6:	4403      	add	r3, r0
   833f8:	d921      	bls.n	8343e <memmove+0xc2>
   833fa:	460e      	mov	r6, r1
   833fc:	4674      	mov	r4, lr
   833fe:	1f1d      	subs	r5, r3, #4
   83400:	f856 7b04 	ldr.w	r7, [r6], #4
   83404:	3c04      	subs	r4, #4
   83406:	2c03      	cmp	r4, #3
   83408:	f845 7f04 	str.w	r7, [r5, #4]!
   8340c:	d8f8      	bhi.n	83400 <memmove+0x84>
   8340e:	f1ae 0404 	sub.w	r4, lr, #4
   83412:	f024 0403 	bic.w	r4, r4, #3
   83416:	3404      	adds	r4, #4
   83418:	4423      	add	r3, r4
   8341a:	4421      	add	r1, r4
   8341c:	f002 0203 	and.w	r2, r2, #3
   83420:	b152      	cbz	r2, 83438 <memmove+0xbc>
   83422:	3b01      	subs	r3, #1
   83424:	440a      	add	r2, r1
   83426:	f811 4b01 	ldrb.w	r4, [r1], #1
   8342a:	4291      	cmp	r1, r2
   8342c:	f803 4f01 	strb.w	r4, [r3, #1]!
   83430:	d1f9      	bne.n	83426 <memmove+0xaa>
   83432:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83434:	4603      	mov	r3, r0
   83436:	e7f3      	b.n	83420 <memmove+0xa4>
   83438:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8343a:	4603      	mov	r3, r0
   8343c:	e7f1      	b.n	83422 <memmove+0xa6>
   8343e:	4672      	mov	r2, lr
   83440:	e7ee      	b.n	83420 <memmove+0xa4>
   83442:	bf00      	nop

00083444 <__malloc_lock>:
   83444:	4770      	bx	lr
   83446:	bf00      	nop

00083448 <__malloc_unlock>:
   83448:	4770      	bx	lr
   8344a:	bf00      	nop

0008344c <_realloc_r>:
   8344c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83450:	4617      	mov	r7, r2
   83452:	b083      	sub	sp, #12
   83454:	460d      	mov	r5, r1
   83456:	2900      	cmp	r1, #0
   83458:	f000 80e2 	beq.w	83620 <_realloc_r+0x1d4>
   8345c:	4681      	mov	r9, r0
   8345e:	f107 040b 	add.w	r4, r7, #11
   83462:	f7ff ffef 	bl	83444 <__malloc_lock>
   83466:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8346a:	2c16      	cmp	r4, #22
   8346c:	f023 0603 	bic.w	r6, r3, #3
   83470:	f1a5 0808 	sub.w	r8, r5, #8
   83474:	d84b      	bhi.n	8350e <_realloc_r+0xc2>
   83476:	2210      	movs	r2, #16
   83478:	4614      	mov	r4, r2
   8347a:	42a7      	cmp	r7, r4
   8347c:	d84c      	bhi.n	83518 <_realloc_r+0xcc>
   8347e:	4296      	cmp	r6, r2
   83480:	da51      	bge.n	83526 <_realloc_r+0xda>
   83482:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 83828 <_realloc_r+0x3dc>
   83486:	eb08 0106 	add.w	r1, r8, r6
   8348a:	f8db 0008 	ldr.w	r0, [fp, #8]
   8348e:	4288      	cmp	r0, r1
   83490:	f000 80d3 	beq.w	8363a <_realloc_r+0x1ee>
   83494:	6848      	ldr	r0, [r1, #4]
   83496:	f020 0e01 	bic.w	lr, r0, #1
   8349a:	448e      	add	lr, r1
   8349c:	f8de e004 	ldr.w	lr, [lr, #4]
   834a0:	f01e 0f01 	tst.w	lr, #1
   834a4:	d154      	bne.n	83550 <_realloc_r+0x104>
   834a6:	f020 0003 	bic.w	r0, r0, #3
   834aa:	4430      	add	r0, r6
   834ac:	4290      	cmp	r0, r2
   834ae:	f280 80bd 	bge.w	8362c <_realloc_r+0x1e0>
   834b2:	07db      	lsls	r3, r3, #31
   834b4:	f100 8090 	bmi.w	835d8 <_realloc_r+0x18c>
   834b8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   834bc:	ebc3 0a08 	rsb	sl, r3, r8
   834c0:	f8da 3004 	ldr.w	r3, [sl, #4]
   834c4:	f023 0303 	bic.w	r3, r3, #3
   834c8:	eb00 0e03 	add.w	lr, r0, r3
   834cc:	4596      	cmp	lr, r2
   834ce:	db49      	blt.n	83564 <_realloc_r+0x118>
   834d0:	4657      	mov	r7, sl
   834d2:	68cb      	ldr	r3, [r1, #12]
   834d4:	6889      	ldr	r1, [r1, #8]
   834d6:	1f32      	subs	r2, r6, #4
   834d8:	60cb      	str	r3, [r1, #12]
   834da:	6099      	str	r1, [r3, #8]
   834dc:	f857 1f08 	ldr.w	r1, [r7, #8]!
   834e0:	f8da 300c 	ldr.w	r3, [sl, #12]
   834e4:	2a24      	cmp	r2, #36	; 0x24
   834e6:	60cb      	str	r3, [r1, #12]
   834e8:	6099      	str	r1, [r3, #8]
   834ea:	f200 8133 	bhi.w	83754 <_realloc_r+0x308>
   834ee:	2a13      	cmp	r2, #19
   834f0:	f240 80fa 	bls.w	836e8 <_realloc_r+0x29c>
   834f4:	682b      	ldr	r3, [r5, #0]
   834f6:	2a1b      	cmp	r2, #27
   834f8:	f8ca 3008 	str.w	r3, [sl, #8]
   834fc:	686b      	ldr	r3, [r5, #4]
   834fe:	f8ca 300c 	str.w	r3, [sl, #12]
   83502:	f200 813b 	bhi.w	8377c <_realloc_r+0x330>
   83506:	3508      	adds	r5, #8
   83508:	f10a 0310 	add.w	r3, sl, #16
   8350c:	e0ed      	b.n	836ea <_realloc_r+0x29e>
   8350e:	f024 0407 	bic.w	r4, r4, #7
   83512:	2c00      	cmp	r4, #0
   83514:	4622      	mov	r2, r4
   83516:	dab0      	bge.n	8347a <_realloc_r+0x2e>
   83518:	230c      	movs	r3, #12
   8351a:	2000      	movs	r0, #0
   8351c:	f8c9 3000 	str.w	r3, [r9]
   83520:	b003      	add	sp, #12
   83522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83526:	462f      	mov	r7, r5
   83528:	1b32      	subs	r2, r6, r4
   8352a:	2a0f      	cmp	r2, #15
   8352c:	f003 0301 	and.w	r3, r3, #1
   83530:	d840      	bhi.n	835b4 <_realloc_r+0x168>
   83532:	4333      	orrs	r3, r6
   83534:	f8c8 3004 	str.w	r3, [r8, #4]
   83538:	4446      	add	r6, r8
   8353a:	6873      	ldr	r3, [r6, #4]
   8353c:	f043 0301 	orr.w	r3, r3, #1
   83540:	6073      	str	r3, [r6, #4]
   83542:	4648      	mov	r0, r9
   83544:	f7ff ff80 	bl	83448 <__malloc_unlock>
   83548:	4638      	mov	r0, r7
   8354a:	b003      	add	sp, #12
   8354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83550:	07d9      	lsls	r1, r3, #31
   83552:	d441      	bmi.n	835d8 <_realloc_r+0x18c>
   83554:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83558:	ebc3 0a08 	rsb	sl, r3, r8
   8355c:	f8da 3004 	ldr.w	r3, [sl, #4]
   83560:	f023 0303 	bic.w	r3, r3, #3
   83564:	4433      	add	r3, r6
   83566:	4293      	cmp	r3, r2
   83568:	db36      	blt.n	835d8 <_realloc_r+0x18c>
   8356a:	4657      	mov	r7, sl
   8356c:	f8da 100c 	ldr.w	r1, [sl, #12]
   83570:	f857 0f08 	ldr.w	r0, [r7, #8]!
   83574:	1f32      	subs	r2, r6, #4
   83576:	2a24      	cmp	r2, #36	; 0x24
   83578:	60c1      	str	r1, [r0, #12]
   8357a:	6088      	str	r0, [r1, #8]
   8357c:	f200 80f5 	bhi.w	8376a <_realloc_r+0x31e>
   83580:	2a13      	cmp	r2, #19
   83582:	f240 80f0 	bls.w	83766 <_realloc_r+0x31a>
   83586:	6829      	ldr	r1, [r5, #0]
   83588:	2a1b      	cmp	r2, #27
   8358a:	f8ca 1008 	str.w	r1, [sl, #8]
   8358e:	6869      	ldr	r1, [r5, #4]
   83590:	f8ca 100c 	str.w	r1, [sl, #12]
   83594:	f200 8107 	bhi.w	837a6 <_realloc_r+0x35a>
   83598:	3508      	adds	r5, #8
   8359a:	f10a 0210 	add.w	r2, sl, #16
   8359e:	6829      	ldr	r1, [r5, #0]
   835a0:	461e      	mov	r6, r3
   835a2:	6011      	str	r1, [r2, #0]
   835a4:	6869      	ldr	r1, [r5, #4]
   835a6:	46d0      	mov	r8, sl
   835a8:	6051      	str	r1, [r2, #4]
   835aa:	68ab      	ldr	r3, [r5, #8]
   835ac:	6093      	str	r3, [r2, #8]
   835ae:	f8da 3004 	ldr.w	r3, [sl, #4]
   835b2:	e7b9      	b.n	83528 <_realloc_r+0xdc>
   835b4:	eb08 0104 	add.w	r1, r8, r4
   835b8:	4323      	orrs	r3, r4
   835ba:	f042 0001 	orr.w	r0, r2, #1
   835be:	f8c8 3004 	str.w	r3, [r8, #4]
   835c2:	440a      	add	r2, r1
   835c4:	6048      	str	r0, [r1, #4]
   835c6:	6853      	ldr	r3, [r2, #4]
   835c8:	3108      	adds	r1, #8
   835ca:	f043 0301 	orr.w	r3, r3, #1
   835ce:	6053      	str	r3, [r2, #4]
   835d0:	4648      	mov	r0, r9
   835d2:	f7ff f8f1 	bl	827b8 <_free_r>
   835d6:	e7b4      	b.n	83542 <_realloc_r+0xf6>
   835d8:	4639      	mov	r1, r7
   835da:	4648      	mov	r0, r9
   835dc:	f7ff fbfe 	bl	82ddc <_malloc_r>
   835e0:	4607      	mov	r7, r0
   835e2:	2800      	cmp	r0, #0
   835e4:	d0ad      	beq.n	83542 <_realloc_r+0xf6>
   835e6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   835ea:	f1a0 0108 	sub.w	r1, r0, #8
   835ee:	f023 0201 	bic.w	r2, r3, #1
   835f2:	4442      	add	r2, r8
   835f4:	4291      	cmp	r1, r2
   835f6:	f000 80a6 	beq.w	83746 <_realloc_r+0x2fa>
   835fa:	1f32      	subs	r2, r6, #4
   835fc:	2a24      	cmp	r2, #36	; 0x24
   835fe:	f200 8093 	bhi.w	83728 <_realloc_r+0x2dc>
   83602:	2a13      	cmp	r2, #19
   83604:	d865      	bhi.n	836d2 <_realloc_r+0x286>
   83606:	4603      	mov	r3, r0
   83608:	462a      	mov	r2, r5
   8360a:	6811      	ldr	r1, [r2, #0]
   8360c:	6019      	str	r1, [r3, #0]
   8360e:	6851      	ldr	r1, [r2, #4]
   83610:	6059      	str	r1, [r3, #4]
   83612:	6892      	ldr	r2, [r2, #8]
   83614:	609a      	str	r2, [r3, #8]
   83616:	4629      	mov	r1, r5
   83618:	4648      	mov	r0, r9
   8361a:	f7ff f8cd 	bl	827b8 <_free_r>
   8361e:	e790      	b.n	83542 <_realloc_r+0xf6>
   83620:	4611      	mov	r1, r2
   83622:	b003      	add	sp, #12
   83624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83628:	f7ff bbd8 	b.w	82ddc <_malloc_r>
   8362c:	68ca      	ldr	r2, [r1, #12]
   8362e:	6889      	ldr	r1, [r1, #8]
   83630:	462f      	mov	r7, r5
   83632:	60ca      	str	r2, [r1, #12]
   83634:	4606      	mov	r6, r0
   83636:	6091      	str	r1, [r2, #8]
   83638:	e776      	b.n	83528 <_realloc_r+0xdc>
   8363a:	6841      	ldr	r1, [r0, #4]
   8363c:	f104 0010 	add.w	r0, r4, #16
   83640:	f021 0103 	bic.w	r1, r1, #3
   83644:	4431      	add	r1, r6
   83646:	4281      	cmp	r1, r0
   83648:	da5a      	bge.n	83700 <_realloc_r+0x2b4>
   8364a:	07db      	lsls	r3, r3, #31
   8364c:	d4c4      	bmi.n	835d8 <_realloc_r+0x18c>
   8364e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83652:	ebc3 0a08 	rsb	sl, r3, r8
   83656:	f8da 3004 	ldr.w	r3, [sl, #4]
   8365a:	f023 0303 	bic.w	r3, r3, #3
   8365e:	eb01 0c03 	add.w	ip, r1, r3
   83662:	4560      	cmp	r0, ip
   83664:	f73f af7e 	bgt.w	83564 <_realloc_r+0x118>
   83668:	4657      	mov	r7, sl
   8366a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8366e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83672:	1f32      	subs	r2, r6, #4
   83674:	2a24      	cmp	r2, #36	; 0x24
   83676:	60cb      	str	r3, [r1, #12]
   83678:	6099      	str	r1, [r3, #8]
   8367a:	f200 80b6 	bhi.w	837ea <_realloc_r+0x39e>
   8367e:	2a13      	cmp	r2, #19
   83680:	f240 80a7 	bls.w	837d2 <_realloc_r+0x386>
   83684:	682b      	ldr	r3, [r5, #0]
   83686:	2a1b      	cmp	r2, #27
   83688:	f8ca 3008 	str.w	r3, [sl, #8]
   8368c:	686b      	ldr	r3, [r5, #4]
   8368e:	f8ca 300c 	str.w	r3, [sl, #12]
   83692:	f200 80b3 	bhi.w	837fc <_realloc_r+0x3b0>
   83696:	3508      	adds	r5, #8
   83698:	f10a 0310 	add.w	r3, sl, #16
   8369c:	682a      	ldr	r2, [r5, #0]
   8369e:	601a      	str	r2, [r3, #0]
   836a0:	686a      	ldr	r2, [r5, #4]
   836a2:	605a      	str	r2, [r3, #4]
   836a4:	68aa      	ldr	r2, [r5, #8]
   836a6:	609a      	str	r2, [r3, #8]
   836a8:	ebc4 030c 	rsb	r3, r4, ip
   836ac:	eb0a 0204 	add.w	r2, sl, r4
   836b0:	f043 0301 	orr.w	r3, r3, #1
   836b4:	f8cb 2008 	str.w	r2, [fp, #8]
   836b8:	6053      	str	r3, [r2, #4]
   836ba:	f8da 3004 	ldr.w	r3, [sl, #4]
   836be:	4648      	mov	r0, r9
   836c0:	f003 0301 	and.w	r3, r3, #1
   836c4:	431c      	orrs	r4, r3
   836c6:	f8ca 4004 	str.w	r4, [sl, #4]
   836ca:	f7ff febd 	bl	83448 <__malloc_unlock>
   836ce:	4638      	mov	r0, r7
   836d0:	e73b      	b.n	8354a <_realloc_r+0xfe>
   836d2:	682b      	ldr	r3, [r5, #0]
   836d4:	2a1b      	cmp	r2, #27
   836d6:	6003      	str	r3, [r0, #0]
   836d8:	686b      	ldr	r3, [r5, #4]
   836da:	6043      	str	r3, [r0, #4]
   836dc:	d828      	bhi.n	83730 <_realloc_r+0x2e4>
   836de:	f100 0308 	add.w	r3, r0, #8
   836e2:	f105 0208 	add.w	r2, r5, #8
   836e6:	e790      	b.n	8360a <_realloc_r+0x1be>
   836e8:	463b      	mov	r3, r7
   836ea:	682a      	ldr	r2, [r5, #0]
   836ec:	4676      	mov	r6, lr
   836ee:	601a      	str	r2, [r3, #0]
   836f0:	686a      	ldr	r2, [r5, #4]
   836f2:	46d0      	mov	r8, sl
   836f4:	605a      	str	r2, [r3, #4]
   836f6:	68aa      	ldr	r2, [r5, #8]
   836f8:	609a      	str	r2, [r3, #8]
   836fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   836fe:	e713      	b.n	83528 <_realloc_r+0xdc>
   83700:	1b0b      	subs	r3, r1, r4
   83702:	eb08 0204 	add.w	r2, r8, r4
   83706:	f043 0301 	orr.w	r3, r3, #1
   8370a:	f8cb 2008 	str.w	r2, [fp, #8]
   8370e:	6053      	str	r3, [r2, #4]
   83710:	f855 3c04 	ldr.w	r3, [r5, #-4]
   83714:	4648      	mov	r0, r9
   83716:	f003 0301 	and.w	r3, r3, #1
   8371a:	431c      	orrs	r4, r3
   8371c:	f845 4c04 	str.w	r4, [r5, #-4]
   83720:	f7ff fe92 	bl	83448 <__malloc_unlock>
   83724:	4628      	mov	r0, r5
   83726:	e710      	b.n	8354a <_realloc_r+0xfe>
   83728:	4629      	mov	r1, r5
   8372a:	f7ff fe27 	bl	8337c <memmove>
   8372e:	e772      	b.n	83616 <_realloc_r+0x1ca>
   83730:	68ab      	ldr	r3, [r5, #8]
   83732:	2a24      	cmp	r2, #36	; 0x24
   83734:	6083      	str	r3, [r0, #8]
   83736:	68eb      	ldr	r3, [r5, #12]
   83738:	60c3      	str	r3, [r0, #12]
   8373a:	d02b      	beq.n	83794 <_realloc_r+0x348>
   8373c:	f100 0310 	add.w	r3, r0, #16
   83740:	f105 0210 	add.w	r2, r5, #16
   83744:	e761      	b.n	8360a <_realloc_r+0x1be>
   83746:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8374a:	462f      	mov	r7, r5
   8374c:	f022 0203 	bic.w	r2, r2, #3
   83750:	4416      	add	r6, r2
   83752:	e6e9      	b.n	83528 <_realloc_r+0xdc>
   83754:	4629      	mov	r1, r5
   83756:	4638      	mov	r0, r7
   83758:	4676      	mov	r6, lr
   8375a:	46d0      	mov	r8, sl
   8375c:	f7ff fe0e 	bl	8337c <memmove>
   83760:	f8da 3004 	ldr.w	r3, [sl, #4]
   83764:	e6e0      	b.n	83528 <_realloc_r+0xdc>
   83766:	463a      	mov	r2, r7
   83768:	e719      	b.n	8359e <_realloc_r+0x152>
   8376a:	4629      	mov	r1, r5
   8376c:	4638      	mov	r0, r7
   8376e:	461e      	mov	r6, r3
   83770:	46d0      	mov	r8, sl
   83772:	f7ff fe03 	bl	8337c <memmove>
   83776:	f8da 3004 	ldr.w	r3, [sl, #4]
   8377a:	e6d5      	b.n	83528 <_realloc_r+0xdc>
   8377c:	68ab      	ldr	r3, [r5, #8]
   8377e:	2a24      	cmp	r2, #36	; 0x24
   83780:	f8ca 3010 	str.w	r3, [sl, #16]
   83784:	68eb      	ldr	r3, [r5, #12]
   83786:	f8ca 3014 	str.w	r3, [sl, #20]
   8378a:	d018      	beq.n	837be <_realloc_r+0x372>
   8378c:	3510      	adds	r5, #16
   8378e:	f10a 0318 	add.w	r3, sl, #24
   83792:	e7aa      	b.n	836ea <_realloc_r+0x29e>
   83794:	692a      	ldr	r2, [r5, #16]
   83796:	f100 0318 	add.w	r3, r0, #24
   8379a:	6102      	str	r2, [r0, #16]
   8379c:	6969      	ldr	r1, [r5, #20]
   8379e:	f105 0218 	add.w	r2, r5, #24
   837a2:	6141      	str	r1, [r0, #20]
   837a4:	e731      	b.n	8360a <_realloc_r+0x1be>
   837a6:	68a9      	ldr	r1, [r5, #8]
   837a8:	2a24      	cmp	r2, #36	; 0x24
   837aa:	f8ca 1010 	str.w	r1, [sl, #16]
   837ae:	68e9      	ldr	r1, [r5, #12]
   837b0:	f8ca 1014 	str.w	r1, [sl, #20]
   837b4:	d00f      	beq.n	837d6 <_realloc_r+0x38a>
   837b6:	3510      	adds	r5, #16
   837b8:	f10a 0218 	add.w	r2, sl, #24
   837bc:	e6ef      	b.n	8359e <_realloc_r+0x152>
   837be:	692a      	ldr	r2, [r5, #16]
   837c0:	f10a 0320 	add.w	r3, sl, #32
   837c4:	f8ca 2018 	str.w	r2, [sl, #24]
   837c8:	696a      	ldr	r2, [r5, #20]
   837ca:	3518      	adds	r5, #24
   837cc:	f8ca 201c 	str.w	r2, [sl, #28]
   837d0:	e78b      	b.n	836ea <_realloc_r+0x29e>
   837d2:	463b      	mov	r3, r7
   837d4:	e762      	b.n	8369c <_realloc_r+0x250>
   837d6:	6929      	ldr	r1, [r5, #16]
   837d8:	f10a 0220 	add.w	r2, sl, #32
   837dc:	f8ca 1018 	str.w	r1, [sl, #24]
   837e0:	6969      	ldr	r1, [r5, #20]
   837e2:	3518      	adds	r5, #24
   837e4:	f8ca 101c 	str.w	r1, [sl, #28]
   837e8:	e6d9      	b.n	8359e <_realloc_r+0x152>
   837ea:	4629      	mov	r1, r5
   837ec:	4638      	mov	r0, r7
   837ee:	f8cd c004 	str.w	ip, [sp, #4]
   837f2:	f7ff fdc3 	bl	8337c <memmove>
   837f6:	f8dd c004 	ldr.w	ip, [sp, #4]
   837fa:	e755      	b.n	836a8 <_realloc_r+0x25c>
   837fc:	68ab      	ldr	r3, [r5, #8]
   837fe:	2a24      	cmp	r2, #36	; 0x24
   83800:	f8ca 3010 	str.w	r3, [sl, #16]
   83804:	68eb      	ldr	r3, [r5, #12]
   83806:	f8ca 3014 	str.w	r3, [sl, #20]
   8380a:	d003      	beq.n	83814 <_realloc_r+0x3c8>
   8380c:	3510      	adds	r5, #16
   8380e:	f10a 0318 	add.w	r3, sl, #24
   83812:	e743      	b.n	8369c <_realloc_r+0x250>
   83814:	692a      	ldr	r2, [r5, #16]
   83816:	f10a 0320 	add.w	r3, sl, #32
   8381a:	f8ca 2018 	str.w	r2, [sl, #24]
   8381e:	696a      	ldr	r2, [r5, #20]
   83820:	3518      	adds	r5, #24
   83822:	f8ca 201c 	str.w	r2, [sl, #28]
   83826:	e739      	b.n	8369c <_realloc_r+0x250>
   83828:	20070590 	.word	0x20070590

0008382c <_sbrk_r>:
   8382c:	b538      	push	{r3, r4, r5, lr}
   8382e:	4c07      	ldr	r4, [pc, #28]	; (8384c <_sbrk_r+0x20>)
   83830:	2300      	movs	r3, #0
   83832:	4605      	mov	r5, r0
   83834:	4608      	mov	r0, r1
   83836:	6023      	str	r3, [r4, #0]
   83838:	f7fd fcb2 	bl	811a0 <_sbrk>
   8383c:	1c43      	adds	r3, r0, #1
   8383e:	d000      	beq.n	83842 <_sbrk_r+0x16>
   83840:	bd38      	pop	{r3, r4, r5, pc}
   83842:	6823      	ldr	r3, [r4, #0]
   83844:	2b00      	cmp	r3, #0
   83846:	d0fb      	beq.n	83840 <_sbrk_r+0x14>
   83848:	602b      	str	r3, [r5, #0]
   8384a:	bd38      	pop	{r3, r4, r5, pc}
   8384c:	20070c00 	.word	0x20070c00

00083850 <__sread>:
   83850:	b510      	push	{r4, lr}
   83852:	460c      	mov	r4, r1
   83854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83858:	f000 f9bc 	bl	83bd4 <_read_r>
   8385c:	2800      	cmp	r0, #0
   8385e:	db03      	blt.n	83868 <__sread+0x18>
   83860:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83862:	4403      	add	r3, r0
   83864:	6523      	str	r3, [r4, #80]	; 0x50
   83866:	bd10      	pop	{r4, pc}
   83868:	89a3      	ldrh	r3, [r4, #12]
   8386a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8386e:	81a3      	strh	r3, [r4, #12]
   83870:	bd10      	pop	{r4, pc}
   83872:	bf00      	nop

00083874 <__swrite>:
   83874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83878:	460c      	mov	r4, r1
   8387a:	8989      	ldrh	r1, [r1, #12]
   8387c:	461d      	mov	r5, r3
   8387e:	05cb      	lsls	r3, r1, #23
   83880:	4616      	mov	r6, r2
   83882:	4607      	mov	r7, r0
   83884:	d506      	bpl.n	83894 <__swrite+0x20>
   83886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8388a:	2200      	movs	r2, #0
   8388c:	2302      	movs	r3, #2
   8388e:	f000 f98d 	bl	83bac <_lseek_r>
   83892:	89a1      	ldrh	r1, [r4, #12]
   83894:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83898:	81a1      	strh	r1, [r4, #12]
   8389a:	4638      	mov	r0, r7
   8389c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   838a0:	4632      	mov	r2, r6
   838a2:	462b      	mov	r3, r5
   838a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   838a8:	f000 b8a0 	b.w	839ec <_write_r>

000838ac <__sseek>:
   838ac:	b510      	push	{r4, lr}
   838ae:	460c      	mov	r4, r1
   838b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838b4:	f000 f97a 	bl	83bac <_lseek_r>
   838b8:	89a3      	ldrh	r3, [r4, #12]
   838ba:	1c42      	adds	r2, r0, #1
   838bc:	bf0e      	itee	eq
   838be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   838c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   838c6:	6520      	strne	r0, [r4, #80]	; 0x50
   838c8:	81a3      	strh	r3, [r4, #12]
   838ca:	bd10      	pop	{r4, pc}

000838cc <__sclose>:
   838cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838d0:	f000 b8f2 	b.w	83ab8 <_close_r>

000838d4 <__swbuf_r>:
   838d4:	b570      	push	{r4, r5, r6, lr}
   838d6:	460d      	mov	r5, r1
   838d8:	4614      	mov	r4, r2
   838da:	4606      	mov	r6, r0
   838dc:	b110      	cbz	r0, 838e4 <__swbuf_r+0x10>
   838de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   838e0:	2b00      	cmp	r3, #0
   838e2:	d048      	beq.n	83976 <__swbuf_r+0xa2>
   838e4:	89a2      	ldrh	r2, [r4, #12]
   838e6:	69a3      	ldr	r3, [r4, #24]
   838e8:	b291      	uxth	r1, r2
   838ea:	0708      	lsls	r0, r1, #28
   838ec:	60a3      	str	r3, [r4, #8]
   838ee:	d538      	bpl.n	83962 <__swbuf_r+0x8e>
   838f0:	6923      	ldr	r3, [r4, #16]
   838f2:	2b00      	cmp	r3, #0
   838f4:	d035      	beq.n	83962 <__swbuf_r+0x8e>
   838f6:	0489      	lsls	r1, r1, #18
   838f8:	b2ed      	uxtb	r5, r5
   838fa:	d515      	bpl.n	83928 <__swbuf_r+0x54>
   838fc:	6822      	ldr	r2, [r4, #0]
   838fe:	6961      	ldr	r1, [r4, #20]
   83900:	1ad3      	subs	r3, r2, r3
   83902:	428b      	cmp	r3, r1
   83904:	da1c      	bge.n	83940 <__swbuf_r+0x6c>
   83906:	3301      	adds	r3, #1
   83908:	68a1      	ldr	r1, [r4, #8]
   8390a:	1c50      	adds	r0, r2, #1
   8390c:	3901      	subs	r1, #1
   8390e:	60a1      	str	r1, [r4, #8]
   83910:	6020      	str	r0, [r4, #0]
   83912:	7015      	strb	r5, [r2, #0]
   83914:	6962      	ldr	r2, [r4, #20]
   83916:	429a      	cmp	r2, r3
   83918:	d01a      	beq.n	83950 <__swbuf_r+0x7c>
   8391a:	89a3      	ldrh	r3, [r4, #12]
   8391c:	07db      	lsls	r3, r3, #31
   8391e:	d501      	bpl.n	83924 <__swbuf_r+0x50>
   83920:	2d0a      	cmp	r5, #10
   83922:	d015      	beq.n	83950 <__swbuf_r+0x7c>
   83924:	4628      	mov	r0, r5
   83926:	bd70      	pop	{r4, r5, r6, pc}
   83928:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8392a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8392e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83932:	81a2      	strh	r2, [r4, #12]
   83934:	6822      	ldr	r2, [r4, #0]
   83936:	6661      	str	r1, [r4, #100]	; 0x64
   83938:	6961      	ldr	r1, [r4, #20]
   8393a:	1ad3      	subs	r3, r2, r3
   8393c:	428b      	cmp	r3, r1
   8393e:	dbe2      	blt.n	83906 <__swbuf_r+0x32>
   83940:	4630      	mov	r0, r6
   83942:	4621      	mov	r1, r4
   83944:	f7fe fdcc 	bl	824e0 <_fflush_r>
   83948:	b940      	cbnz	r0, 8395c <__swbuf_r+0x88>
   8394a:	6822      	ldr	r2, [r4, #0]
   8394c:	2301      	movs	r3, #1
   8394e:	e7db      	b.n	83908 <__swbuf_r+0x34>
   83950:	4630      	mov	r0, r6
   83952:	4621      	mov	r1, r4
   83954:	f7fe fdc4 	bl	824e0 <_fflush_r>
   83958:	2800      	cmp	r0, #0
   8395a:	d0e3      	beq.n	83924 <__swbuf_r+0x50>
   8395c:	f04f 30ff 	mov.w	r0, #4294967295
   83960:	bd70      	pop	{r4, r5, r6, pc}
   83962:	4630      	mov	r0, r6
   83964:	4621      	mov	r1, r4
   83966:	f7fe fca5 	bl	822b4 <__swsetup_r>
   8396a:	2800      	cmp	r0, #0
   8396c:	d1f6      	bne.n	8395c <__swbuf_r+0x88>
   8396e:	89a2      	ldrh	r2, [r4, #12]
   83970:	6923      	ldr	r3, [r4, #16]
   83972:	b291      	uxth	r1, r2
   83974:	e7bf      	b.n	838f6 <__swbuf_r+0x22>
   83976:	f7fe fe47 	bl	82608 <__sinit>
   8397a:	e7b3      	b.n	838e4 <__swbuf_r+0x10>

0008397c <_wcrtomb_r>:
   8397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83980:	4605      	mov	r5, r0
   83982:	b086      	sub	sp, #24
   83984:	461e      	mov	r6, r3
   83986:	460c      	mov	r4, r1
   83988:	b1a1      	cbz	r1, 839b4 <_wcrtomb_r+0x38>
   8398a:	4b10      	ldr	r3, [pc, #64]	; (839cc <_wcrtomb_r+0x50>)
   8398c:	4617      	mov	r7, r2
   8398e:	f8d3 8000 	ldr.w	r8, [r3]
   83992:	f7ff f9a1 	bl	82cd8 <__locale_charset>
   83996:	9600      	str	r6, [sp, #0]
   83998:	4603      	mov	r3, r0
   8399a:	4621      	mov	r1, r4
   8399c:	463a      	mov	r2, r7
   8399e:	4628      	mov	r0, r5
   839a0:	47c0      	blx	r8
   839a2:	1c43      	adds	r3, r0, #1
   839a4:	d103      	bne.n	839ae <_wcrtomb_r+0x32>
   839a6:	2200      	movs	r2, #0
   839a8:	238a      	movs	r3, #138	; 0x8a
   839aa:	6032      	str	r2, [r6, #0]
   839ac:	602b      	str	r3, [r5, #0]
   839ae:	b006      	add	sp, #24
   839b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839b4:	4b05      	ldr	r3, [pc, #20]	; (839cc <_wcrtomb_r+0x50>)
   839b6:	681f      	ldr	r7, [r3, #0]
   839b8:	f7ff f98e 	bl	82cd8 <__locale_charset>
   839bc:	9600      	str	r6, [sp, #0]
   839be:	4603      	mov	r3, r0
   839c0:	4622      	mov	r2, r4
   839c2:	4628      	mov	r0, r5
   839c4:	a903      	add	r1, sp, #12
   839c6:	47b8      	blx	r7
   839c8:	e7eb      	b.n	839a2 <_wcrtomb_r+0x26>
   839ca:	bf00      	nop
   839cc:	200709a0 	.word	0x200709a0

000839d0 <__ascii_wctomb>:
   839d0:	b121      	cbz	r1, 839dc <__ascii_wctomb+0xc>
   839d2:	2aff      	cmp	r2, #255	; 0xff
   839d4:	d804      	bhi.n	839e0 <__ascii_wctomb+0x10>
   839d6:	700a      	strb	r2, [r1, #0]
   839d8:	2001      	movs	r0, #1
   839da:	4770      	bx	lr
   839dc:	4608      	mov	r0, r1
   839de:	4770      	bx	lr
   839e0:	238a      	movs	r3, #138	; 0x8a
   839e2:	6003      	str	r3, [r0, #0]
   839e4:	f04f 30ff 	mov.w	r0, #4294967295
   839e8:	4770      	bx	lr
   839ea:	bf00      	nop

000839ec <_write_r>:
   839ec:	b570      	push	{r4, r5, r6, lr}
   839ee:	4c08      	ldr	r4, [pc, #32]	; (83a10 <_write_r+0x24>)
   839f0:	4606      	mov	r6, r0
   839f2:	2500      	movs	r5, #0
   839f4:	4608      	mov	r0, r1
   839f6:	4611      	mov	r1, r2
   839f8:	461a      	mov	r2, r3
   839fa:	6025      	str	r5, [r4, #0]
   839fc:	f7fc fc26 	bl	8024c <_write>
   83a00:	1c43      	adds	r3, r0, #1
   83a02:	d000      	beq.n	83a06 <_write_r+0x1a>
   83a04:	bd70      	pop	{r4, r5, r6, pc}
   83a06:	6823      	ldr	r3, [r4, #0]
   83a08:	2b00      	cmp	r3, #0
   83a0a:	d0fb      	beq.n	83a04 <_write_r+0x18>
   83a0c:	6033      	str	r3, [r6, #0]
   83a0e:	bd70      	pop	{r4, r5, r6, pc}
   83a10:	20070c00 	.word	0x20070c00

00083a14 <__register_exitproc>:
   83a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83a18:	4c25      	ldr	r4, [pc, #148]	; (83ab0 <__register_exitproc+0x9c>)
   83a1a:	4606      	mov	r6, r0
   83a1c:	6825      	ldr	r5, [r4, #0]
   83a1e:	4688      	mov	r8, r1
   83a20:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83a24:	4692      	mov	sl, r2
   83a26:	4699      	mov	r9, r3
   83a28:	b3c4      	cbz	r4, 83a9c <__register_exitproc+0x88>
   83a2a:	6860      	ldr	r0, [r4, #4]
   83a2c:	281f      	cmp	r0, #31
   83a2e:	dc17      	bgt.n	83a60 <__register_exitproc+0x4c>
   83a30:	1c41      	adds	r1, r0, #1
   83a32:	b176      	cbz	r6, 83a52 <__register_exitproc+0x3e>
   83a34:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83a38:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   83a3c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   83a40:	2201      	movs	r2, #1
   83a42:	4082      	lsls	r2, r0
   83a44:	4315      	orrs	r5, r2
   83a46:	2e02      	cmp	r6, #2
   83a48:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   83a4c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   83a50:	d01e      	beq.n	83a90 <__register_exitproc+0x7c>
   83a52:	1c83      	adds	r3, r0, #2
   83a54:	6061      	str	r1, [r4, #4]
   83a56:	2000      	movs	r0, #0
   83a58:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   83a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a60:	4b14      	ldr	r3, [pc, #80]	; (83ab4 <__register_exitproc+0xa0>)
   83a62:	b303      	cbz	r3, 83aa6 <__register_exitproc+0x92>
   83a64:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83a68:	f7ff f9b0 	bl	82dcc <malloc>
   83a6c:	4604      	mov	r4, r0
   83a6e:	b1d0      	cbz	r0, 83aa6 <__register_exitproc+0x92>
   83a70:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83a74:	2700      	movs	r7, #0
   83a76:	e884 0088 	stmia.w	r4, {r3, r7}
   83a7a:	4638      	mov	r0, r7
   83a7c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83a80:	2101      	movs	r1, #1
   83a82:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   83a86:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   83a8a:	2e00      	cmp	r6, #0
   83a8c:	d0e1      	beq.n	83a52 <__register_exitproc+0x3e>
   83a8e:	e7d1      	b.n	83a34 <__register_exitproc+0x20>
   83a90:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83a94:	431a      	orrs	r2, r3
   83a96:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   83a9a:	e7da      	b.n	83a52 <__register_exitproc+0x3e>
   83a9c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83aa0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83aa4:	e7c1      	b.n	83a2a <__register_exitproc+0x16>
   83aa6:	f04f 30ff 	mov.w	r0, #4294967295
   83aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83aae:	bf00      	nop
   83ab0:	000841f0 	.word	0x000841f0
   83ab4:	00082dcd 	.word	0x00082dcd

00083ab8 <_close_r>:
   83ab8:	b538      	push	{r3, r4, r5, lr}
   83aba:	4c07      	ldr	r4, [pc, #28]	; (83ad8 <_close_r+0x20>)
   83abc:	2300      	movs	r3, #0
   83abe:	4605      	mov	r5, r0
   83ac0:	4608      	mov	r0, r1
   83ac2:	6023      	str	r3, [r4, #0]
   83ac4:	f7fd fb86 	bl	811d4 <_close>
   83ac8:	1c43      	adds	r3, r0, #1
   83aca:	d000      	beq.n	83ace <_close_r+0x16>
   83acc:	bd38      	pop	{r3, r4, r5, pc}
   83ace:	6823      	ldr	r3, [r4, #0]
   83ad0:	2b00      	cmp	r3, #0
   83ad2:	d0fb      	beq.n	83acc <_close_r+0x14>
   83ad4:	602b      	str	r3, [r5, #0]
   83ad6:	bd38      	pop	{r3, r4, r5, pc}
   83ad8:	20070c00 	.word	0x20070c00

00083adc <_fclose_r>:
   83adc:	2900      	cmp	r1, #0
   83ade:	d03d      	beq.n	83b5c <_fclose_r+0x80>
   83ae0:	b570      	push	{r4, r5, r6, lr}
   83ae2:	4605      	mov	r5, r0
   83ae4:	460c      	mov	r4, r1
   83ae6:	b108      	cbz	r0, 83aec <_fclose_r+0x10>
   83ae8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83aea:	b37b      	cbz	r3, 83b4c <_fclose_r+0x70>
   83aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83af0:	b90b      	cbnz	r3, 83af6 <_fclose_r+0x1a>
   83af2:	2000      	movs	r0, #0
   83af4:	bd70      	pop	{r4, r5, r6, pc}
   83af6:	4628      	mov	r0, r5
   83af8:	4621      	mov	r1, r4
   83afa:	f7fe fc4d 	bl	82398 <__sflush_r>
   83afe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83b00:	4606      	mov	r6, r0
   83b02:	b133      	cbz	r3, 83b12 <_fclose_r+0x36>
   83b04:	4628      	mov	r0, r5
   83b06:	69e1      	ldr	r1, [r4, #28]
   83b08:	4798      	blx	r3
   83b0a:	2800      	cmp	r0, #0
   83b0c:	bfb8      	it	lt
   83b0e:	f04f 36ff 	movlt.w	r6, #4294967295
   83b12:	89a3      	ldrh	r3, [r4, #12]
   83b14:	061b      	lsls	r3, r3, #24
   83b16:	d41c      	bmi.n	83b52 <_fclose_r+0x76>
   83b18:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83b1a:	b141      	cbz	r1, 83b2e <_fclose_r+0x52>
   83b1c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83b20:	4299      	cmp	r1, r3
   83b22:	d002      	beq.n	83b2a <_fclose_r+0x4e>
   83b24:	4628      	mov	r0, r5
   83b26:	f7fe fe47 	bl	827b8 <_free_r>
   83b2a:	2300      	movs	r3, #0
   83b2c:	6323      	str	r3, [r4, #48]	; 0x30
   83b2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83b30:	b121      	cbz	r1, 83b3c <_fclose_r+0x60>
   83b32:	4628      	mov	r0, r5
   83b34:	f7fe fe40 	bl	827b8 <_free_r>
   83b38:	2300      	movs	r3, #0
   83b3a:	6463      	str	r3, [r4, #68]	; 0x44
   83b3c:	f7fe fd6a 	bl	82614 <__sfp_lock_acquire>
   83b40:	2300      	movs	r3, #0
   83b42:	81a3      	strh	r3, [r4, #12]
   83b44:	f7fe fd68 	bl	82618 <__sfp_lock_release>
   83b48:	4630      	mov	r0, r6
   83b4a:	bd70      	pop	{r4, r5, r6, pc}
   83b4c:	f7fe fd5c 	bl	82608 <__sinit>
   83b50:	e7cc      	b.n	83aec <_fclose_r+0x10>
   83b52:	4628      	mov	r0, r5
   83b54:	6921      	ldr	r1, [r4, #16]
   83b56:	f7fe fe2f 	bl	827b8 <_free_r>
   83b5a:	e7dd      	b.n	83b18 <_fclose_r+0x3c>
   83b5c:	2000      	movs	r0, #0
   83b5e:	4770      	bx	lr

00083b60 <_fstat_r>:
   83b60:	b538      	push	{r3, r4, r5, lr}
   83b62:	4c08      	ldr	r4, [pc, #32]	; (83b84 <_fstat_r+0x24>)
   83b64:	2300      	movs	r3, #0
   83b66:	4605      	mov	r5, r0
   83b68:	4608      	mov	r0, r1
   83b6a:	4611      	mov	r1, r2
   83b6c:	6023      	str	r3, [r4, #0]
   83b6e:	f7fd fb35 	bl	811dc <_fstat>
   83b72:	1c43      	adds	r3, r0, #1
   83b74:	d000      	beq.n	83b78 <_fstat_r+0x18>
   83b76:	bd38      	pop	{r3, r4, r5, pc}
   83b78:	6823      	ldr	r3, [r4, #0]
   83b7a:	2b00      	cmp	r3, #0
   83b7c:	d0fb      	beq.n	83b76 <_fstat_r+0x16>
   83b7e:	602b      	str	r3, [r5, #0]
   83b80:	bd38      	pop	{r3, r4, r5, pc}
   83b82:	bf00      	nop
   83b84:	20070c00 	.word	0x20070c00

00083b88 <_isatty_r>:
   83b88:	b538      	push	{r3, r4, r5, lr}
   83b8a:	4c07      	ldr	r4, [pc, #28]	; (83ba8 <_isatty_r+0x20>)
   83b8c:	2300      	movs	r3, #0
   83b8e:	4605      	mov	r5, r0
   83b90:	4608      	mov	r0, r1
   83b92:	6023      	str	r3, [r4, #0]
   83b94:	f7fd fb28 	bl	811e8 <_isatty>
   83b98:	1c43      	adds	r3, r0, #1
   83b9a:	d000      	beq.n	83b9e <_isatty_r+0x16>
   83b9c:	bd38      	pop	{r3, r4, r5, pc}
   83b9e:	6823      	ldr	r3, [r4, #0]
   83ba0:	2b00      	cmp	r3, #0
   83ba2:	d0fb      	beq.n	83b9c <_isatty_r+0x14>
   83ba4:	602b      	str	r3, [r5, #0]
   83ba6:	bd38      	pop	{r3, r4, r5, pc}
   83ba8:	20070c00 	.word	0x20070c00

00083bac <_lseek_r>:
   83bac:	b570      	push	{r4, r5, r6, lr}
   83bae:	4c08      	ldr	r4, [pc, #32]	; (83bd0 <_lseek_r+0x24>)
   83bb0:	4606      	mov	r6, r0
   83bb2:	2500      	movs	r5, #0
   83bb4:	4608      	mov	r0, r1
   83bb6:	4611      	mov	r1, r2
   83bb8:	461a      	mov	r2, r3
   83bba:	6025      	str	r5, [r4, #0]
   83bbc:	f7fd fb16 	bl	811ec <_lseek>
   83bc0:	1c43      	adds	r3, r0, #1
   83bc2:	d000      	beq.n	83bc6 <_lseek_r+0x1a>
   83bc4:	bd70      	pop	{r4, r5, r6, pc}
   83bc6:	6823      	ldr	r3, [r4, #0]
   83bc8:	2b00      	cmp	r3, #0
   83bca:	d0fb      	beq.n	83bc4 <_lseek_r+0x18>
   83bcc:	6033      	str	r3, [r6, #0]
   83bce:	bd70      	pop	{r4, r5, r6, pc}
   83bd0:	20070c00 	.word	0x20070c00

00083bd4 <_read_r>:
   83bd4:	b570      	push	{r4, r5, r6, lr}
   83bd6:	4c08      	ldr	r4, [pc, #32]	; (83bf8 <_read_r+0x24>)
   83bd8:	4606      	mov	r6, r0
   83bda:	2500      	movs	r5, #0
   83bdc:	4608      	mov	r0, r1
   83bde:	4611      	mov	r1, r2
   83be0:	461a      	mov	r2, r3
   83be2:	6025      	str	r5, [r4, #0]
   83be4:	f7fc fafe 	bl	801e4 <_read>
   83be8:	1c43      	adds	r3, r0, #1
   83bea:	d000      	beq.n	83bee <_read_r+0x1a>
   83bec:	bd70      	pop	{r4, r5, r6, pc}
   83bee:	6823      	ldr	r3, [r4, #0]
   83bf0:	2b00      	cmp	r3, #0
   83bf2:	d0fb      	beq.n	83bec <_read_r+0x18>
   83bf4:	6033      	str	r3, [r6, #0]
   83bf6:	bd70      	pop	{r4, r5, r6, pc}
   83bf8:	20070c00 	.word	0x20070c00

00083bfc <__aeabi_uldivmod>:
   83bfc:	b953      	cbnz	r3, 83c14 <__aeabi_uldivmod+0x18>
   83bfe:	b94a      	cbnz	r2, 83c14 <__aeabi_uldivmod+0x18>
   83c00:	2900      	cmp	r1, #0
   83c02:	bf08      	it	eq
   83c04:	2800      	cmpeq	r0, #0
   83c06:	bf1c      	itt	ne
   83c08:	f04f 31ff 	movne.w	r1, #4294967295
   83c0c:	f04f 30ff 	movne.w	r0, #4294967295
   83c10:	f000 b83c 	b.w	83c8c <__aeabi_idiv0>
   83c14:	b082      	sub	sp, #8
   83c16:	46ec      	mov	ip, sp
   83c18:	e92d 5000 	stmdb	sp!, {ip, lr}
   83c1c:	f000 f81e 	bl	83c5c <__gnu_uldivmod_helper>
   83c20:	f8dd e004 	ldr.w	lr, [sp, #4]
   83c24:	b002      	add	sp, #8
   83c26:	bc0c      	pop	{r2, r3}
   83c28:	4770      	bx	lr
   83c2a:	bf00      	nop

00083c2c <__gnu_ldivmod_helper>:
   83c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c30:	9c06      	ldr	r4, [sp, #24]
   83c32:	4690      	mov	r8, r2
   83c34:	4606      	mov	r6, r0
   83c36:	460f      	mov	r7, r1
   83c38:	461d      	mov	r5, r3
   83c3a:	f000 f829 	bl	83c90 <__divdi3>
   83c3e:	fb08 fc01 	mul.w	ip, r8, r1
   83c42:	fba8 2300 	umull	r2, r3, r8, r0
   83c46:	fb00 c505 	mla	r5, r0, r5, ip
   83c4a:	1ab2      	subs	r2, r6, r2
   83c4c:	442b      	add	r3, r5
   83c4e:	eb67 0303 	sbc.w	r3, r7, r3
   83c52:	4686      	mov	lr, r0
   83c54:	e9c4 2300 	strd	r2, r3, [r4]
   83c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083c5c <__gnu_uldivmod_helper>:
   83c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83c60:	9e08      	ldr	r6, [sp, #32]
   83c62:	4617      	mov	r7, r2
   83c64:	4680      	mov	r8, r0
   83c66:	4689      	mov	r9, r1
   83c68:	461d      	mov	r5, r3
   83c6a:	f000 f967 	bl	83f3c <__udivdi3>
   83c6e:	fb00 f305 	mul.w	r3, r0, r5
   83c72:	fba0 4507 	umull	r4, r5, r0, r7
   83c76:	fb07 3701 	mla	r7, r7, r1, r3
   83c7a:	ebb8 0404 	subs.w	r4, r8, r4
   83c7e:	443d      	add	r5, r7
   83c80:	eb69 0505 	sbc.w	r5, r9, r5
   83c84:	e9c6 4500 	strd	r4, r5, [r6]
   83c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083c8c <__aeabi_idiv0>:
   83c8c:	4770      	bx	lr
   83c8e:	bf00      	nop

00083c90 <__divdi3>:
   83c90:	2900      	cmp	r1, #0
   83c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83c96:	f2c0 80a8 	blt.w	83dea <__divdi3+0x15a>
   83c9a:	2600      	movs	r6, #0
   83c9c:	2b00      	cmp	r3, #0
   83c9e:	f2c0 809e 	blt.w	83dde <__divdi3+0x14e>
   83ca2:	4681      	mov	r9, r0
   83ca4:	468e      	mov	lr, r1
   83ca6:	4690      	mov	r8, r2
   83ca8:	469c      	mov	ip, r3
   83caa:	4617      	mov	r7, r2
   83cac:	4604      	mov	r4, r0
   83cae:	460d      	mov	r5, r1
   83cb0:	2b00      	cmp	r3, #0
   83cb2:	d13d      	bne.n	83d30 <__divdi3+0xa0>
   83cb4:	428a      	cmp	r2, r1
   83cb6:	d959      	bls.n	83d6c <__divdi3+0xdc>
   83cb8:	fab2 f382 	clz	r3, r2
   83cbc:	b13b      	cbz	r3, 83cce <__divdi3+0x3e>
   83cbe:	f1c3 0220 	rsb	r2, r3, #32
   83cc2:	409d      	lsls	r5, r3
   83cc4:	fa20 f202 	lsr.w	r2, r0, r2
   83cc8:	409f      	lsls	r7, r3
   83cca:	4315      	orrs	r5, r2
   83ccc:	409c      	lsls	r4, r3
   83cce:	0c39      	lsrs	r1, r7, #16
   83cd0:	fbb5 f0f1 	udiv	r0, r5, r1
   83cd4:	fa1f fe87 	uxth.w	lr, r7
   83cd8:	fb01 5510 	mls	r5, r1, r0, r5
   83cdc:	fb0e f300 	mul.w	r3, lr, r0
   83ce0:	0c22      	lsrs	r2, r4, #16
   83ce2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   83ce6:	42ab      	cmp	r3, r5
   83ce8:	d909      	bls.n	83cfe <__divdi3+0x6e>
   83cea:	19ed      	adds	r5, r5, r7
   83cec:	f100 32ff 	add.w	r2, r0, #4294967295
   83cf0:	f080 810b 	bcs.w	83f0a <__divdi3+0x27a>
   83cf4:	42ab      	cmp	r3, r5
   83cf6:	f240 8108 	bls.w	83f0a <__divdi3+0x27a>
   83cfa:	3802      	subs	r0, #2
   83cfc:	443d      	add	r5, r7
   83cfe:	1aed      	subs	r5, r5, r3
   83d00:	fbb5 f3f1 	udiv	r3, r5, r1
   83d04:	fb01 5513 	mls	r5, r1, r3, r5
   83d08:	fb0e fe03 	mul.w	lr, lr, r3
   83d0c:	b2a4      	uxth	r4, r4
   83d0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83d12:	45ae      	cmp	lr, r5
   83d14:	d908      	bls.n	83d28 <__divdi3+0x98>
   83d16:	19ed      	adds	r5, r5, r7
   83d18:	f103 32ff 	add.w	r2, r3, #4294967295
   83d1c:	f080 80f7 	bcs.w	83f0e <__divdi3+0x27e>
   83d20:	45ae      	cmp	lr, r5
   83d22:	f240 80f4 	bls.w	83f0e <__divdi3+0x27e>
   83d26:	3b02      	subs	r3, #2
   83d28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   83d2c:	2200      	movs	r2, #0
   83d2e:	e003      	b.n	83d38 <__divdi3+0xa8>
   83d30:	428b      	cmp	r3, r1
   83d32:	d90f      	bls.n	83d54 <__divdi3+0xc4>
   83d34:	2200      	movs	r2, #0
   83d36:	4613      	mov	r3, r2
   83d38:	1c34      	adds	r4, r6, #0
   83d3a:	bf18      	it	ne
   83d3c:	2401      	movne	r4, #1
   83d3e:	4260      	negs	r0, r4
   83d40:	f04f 0500 	mov.w	r5, #0
   83d44:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   83d48:	4058      	eors	r0, r3
   83d4a:	4051      	eors	r1, r2
   83d4c:	1900      	adds	r0, r0, r4
   83d4e:	4169      	adcs	r1, r5
   83d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83d54:	fab3 f283 	clz	r2, r3
   83d58:	2a00      	cmp	r2, #0
   83d5a:	f040 8089 	bne.w	83e70 <__divdi3+0x1e0>
   83d5e:	428b      	cmp	r3, r1
   83d60:	d302      	bcc.n	83d68 <__divdi3+0xd8>
   83d62:	4580      	cmp	r8, r0
   83d64:	f200 80e2 	bhi.w	83f2c <__divdi3+0x29c>
   83d68:	2301      	movs	r3, #1
   83d6a:	e7e5      	b.n	83d38 <__divdi3+0xa8>
   83d6c:	b912      	cbnz	r2, 83d74 <__divdi3+0xe4>
   83d6e:	2301      	movs	r3, #1
   83d70:	fbb3 f7f2 	udiv	r7, r3, r2
   83d74:	fab7 f887 	clz	r8, r7
   83d78:	f1b8 0f00 	cmp.w	r8, #0
   83d7c:	d13b      	bne.n	83df6 <__divdi3+0x166>
   83d7e:	1bed      	subs	r5, r5, r7
   83d80:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83d84:	fa1f fe87 	uxth.w	lr, r7
   83d88:	2201      	movs	r2, #1
   83d8a:	fbb5 f0fc 	udiv	r0, r5, ip
   83d8e:	fb0c 5510 	mls	r5, ip, r0, r5
   83d92:	fb0e f300 	mul.w	r3, lr, r0
   83d96:	0c21      	lsrs	r1, r4, #16
   83d98:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   83d9c:	42ab      	cmp	r3, r5
   83d9e:	d907      	bls.n	83db0 <__divdi3+0x120>
   83da0:	19ed      	adds	r5, r5, r7
   83da2:	f100 31ff 	add.w	r1, r0, #4294967295
   83da6:	d202      	bcs.n	83dae <__divdi3+0x11e>
   83da8:	42ab      	cmp	r3, r5
   83daa:	f200 80c3 	bhi.w	83f34 <__divdi3+0x2a4>
   83dae:	4608      	mov	r0, r1
   83db0:	1aed      	subs	r5, r5, r3
   83db2:	fbb5 f3fc 	udiv	r3, r5, ip
   83db6:	fb0c 5513 	mls	r5, ip, r3, r5
   83dba:	fb0e fe03 	mul.w	lr, lr, r3
   83dbe:	b2a4      	uxth	r4, r4
   83dc0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83dc4:	45ae      	cmp	lr, r5
   83dc6:	d907      	bls.n	83dd8 <__divdi3+0x148>
   83dc8:	19ed      	adds	r5, r5, r7
   83dca:	f103 31ff 	add.w	r1, r3, #4294967295
   83dce:	d202      	bcs.n	83dd6 <__divdi3+0x146>
   83dd0:	45ae      	cmp	lr, r5
   83dd2:	f200 80ad 	bhi.w	83f30 <__divdi3+0x2a0>
   83dd6:	460b      	mov	r3, r1
   83dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   83ddc:	e7ac      	b.n	83d38 <__divdi3+0xa8>
   83dde:	4252      	negs	r2, r2
   83de0:	ea6f 0606 	mvn.w	r6, r6
   83de4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83de8:	e75b      	b.n	83ca2 <__divdi3+0x12>
   83dea:	4240      	negs	r0, r0
   83dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83df0:	f04f 36ff 	mov.w	r6, #4294967295
   83df4:	e752      	b.n	83c9c <__divdi3+0xc>
   83df6:	fa07 f708 	lsl.w	r7, r7, r8
   83dfa:	f1c8 0220 	rsb	r2, r8, #32
   83dfe:	fa25 f302 	lsr.w	r3, r5, r2
   83e02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83e06:	fbb3 f1fc 	udiv	r1, r3, ip
   83e0a:	fa1f fe87 	uxth.w	lr, r7
   83e0e:	fb0c 3311 	mls	r3, ip, r1, r3
   83e12:	fa24 f202 	lsr.w	r2, r4, r2
   83e16:	fa05 f508 	lsl.w	r5, r5, r8
   83e1a:	fb0e f901 	mul.w	r9, lr, r1
   83e1e:	432a      	orrs	r2, r5
   83e20:	0c10      	lsrs	r0, r2, #16
   83e22:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   83e26:	4599      	cmp	r9, r3
   83e28:	fa04 f408 	lsl.w	r4, r4, r8
   83e2c:	d907      	bls.n	83e3e <__divdi3+0x1ae>
   83e2e:	19db      	adds	r3, r3, r7
   83e30:	f101 30ff 	add.w	r0, r1, #4294967295
   83e34:	d278      	bcs.n	83f28 <__divdi3+0x298>
   83e36:	4599      	cmp	r9, r3
   83e38:	d976      	bls.n	83f28 <__divdi3+0x298>
   83e3a:	3902      	subs	r1, #2
   83e3c:	443b      	add	r3, r7
   83e3e:	ebc9 0303 	rsb	r3, r9, r3
   83e42:	fbb3 f0fc 	udiv	r0, r3, ip
   83e46:	fb0c 3310 	mls	r3, ip, r0, r3
   83e4a:	fb0e f500 	mul.w	r5, lr, r0
   83e4e:	b292      	uxth	r2, r2
   83e50:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83e54:	429d      	cmp	r5, r3
   83e56:	d907      	bls.n	83e68 <__divdi3+0x1d8>
   83e58:	19db      	adds	r3, r3, r7
   83e5a:	f100 32ff 	add.w	r2, r0, #4294967295
   83e5e:	d25f      	bcs.n	83f20 <__divdi3+0x290>
   83e60:	429d      	cmp	r5, r3
   83e62:	d95d      	bls.n	83f20 <__divdi3+0x290>
   83e64:	3802      	subs	r0, #2
   83e66:	443b      	add	r3, r7
   83e68:	1b5d      	subs	r5, r3, r5
   83e6a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   83e6e:	e78c      	b.n	83d8a <__divdi3+0xfa>
   83e70:	f1c2 0320 	rsb	r3, r2, #32
   83e74:	fa28 f103 	lsr.w	r1, r8, r3
   83e78:	fa0c fc02 	lsl.w	ip, ip, r2
   83e7c:	ea41 0c0c 	orr.w	ip, r1, ip
   83e80:	ea4f 401c 	mov.w	r0, ip, lsr #16
   83e84:	fa2e f103 	lsr.w	r1, lr, r3
   83e88:	fbb1 f5f0 	udiv	r5, r1, r0
   83e8c:	fa1f f78c 	uxth.w	r7, ip
   83e90:	fb00 1115 	mls	r1, r0, r5, r1
   83e94:	fa29 f303 	lsr.w	r3, r9, r3
   83e98:	fa0e fe02 	lsl.w	lr, lr, r2
   83e9c:	fb07 f905 	mul.w	r9, r7, r5
   83ea0:	ea43 0e0e 	orr.w	lr, r3, lr
   83ea4:	ea4f 431e 	mov.w	r3, lr, lsr #16
   83ea8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   83eac:	4589      	cmp	r9, r1
   83eae:	fa08 f802 	lsl.w	r8, r8, r2
   83eb2:	d908      	bls.n	83ec6 <__divdi3+0x236>
   83eb4:	eb11 010c 	adds.w	r1, r1, ip
   83eb8:	f105 33ff 	add.w	r3, r5, #4294967295
   83ebc:	d232      	bcs.n	83f24 <__divdi3+0x294>
   83ebe:	4589      	cmp	r9, r1
   83ec0:	d930      	bls.n	83f24 <__divdi3+0x294>
   83ec2:	3d02      	subs	r5, #2
   83ec4:	4461      	add	r1, ip
   83ec6:	ebc9 0101 	rsb	r1, r9, r1
   83eca:	fbb1 f3f0 	udiv	r3, r1, r0
   83ece:	fb00 1113 	mls	r1, r0, r3, r1
   83ed2:	fb07 f703 	mul.w	r7, r7, r3
   83ed6:	fa1f fe8e 	uxth.w	lr, lr
   83eda:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   83ede:	4577      	cmp	r7, lr
   83ee0:	d908      	bls.n	83ef4 <__divdi3+0x264>
   83ee2:	eb1e 0e0c 	adds.w	lr, lr, ip
   83ee6:	f103 31ff 	add.w	r1, r3, #4294967295
   83eea:	d217      	bcs.n	83f1c <__divdi3+0x28c>
   83eec:	4577      	cmp	r7, lr
   83eee:	d915      	bls.n	83f1c <__divdi3+0x28c>
   83ef0:	3b02      	subs	r3, #2
   83ef2:	44e6      	add	lr, ip
   83ef4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   83ef8:	fba3 8908 	umull	r8, r9, r3, r8
   83efc:	ebc7 0e0e 	rsb	lr, r7, lr
   83f00:	45ce      	cmp	lr, r9
   83f02:	d309      	bcc.n	83f18 <__divdi3+0x288>
   83f04:	d005      	beq.n	83f12 <__divdi3+0x282>
   83f06:	2200      	movs	r2, #0
   83f08:	e716      	b.n	83d38 <__divdi3+0xa8>
   83f0a:	4610      	mov	r0, r2
   83f0c:	e6f7      	b.n	83cfe <__divdi3+0x6e>
   83f0e:	4613      	mov	r3, r2
   83f10:	e70a      	b.n	83d28 <__divdi3+0x98>
   83f12:	4094      	lsls	r4, r2
   83f14:	4544      	cmp	r4, r8
   83f16:	d2f6      	bcs.n	83f06 <__divdi3+0x276>
   83f18:	3b01      	subs	r3, #1
   83f1a:	e7f4      	b.n	83f06 <__divdi3+0x276>
   83f1c:	460b      	mov	r3, r1
   83f1e:	e7e9      	b.n	83ef4 <__divdi3+0x264>
   83f20:	4610      	mov	r0, r2
   83f22:	e7a1      	b.n	83e68 <__divdi3+0x1d8>
   83f24:	461d      	mov	r5, r3
   83f26:	e7ce      	b.n	83ec6 <__divdi3+0x236>
   83f28:	4601      	mov	r1, r0
   83f2a:	e788      	b.n	83e3e <__divdi3+0x1ae>
   83f2c:	4613      	mov	r3, r2
   83f2e:	e703      	b.n	83d38 <__divdi3+0xa8>
   83f30:	3b02      	subs	r3, #2
   83f32:	e751      	b.n	83dd8 <__divdi3+0x148>
   83f34:	3802      	subs	r0, #2
   83f36:	443d      	add	r5, r7
   83f38:	e73a      	b.n	83db0 <__divdi3+0x120>
   83f3a:	bf00      	nop

00083f3c <__udivdi3>:
   83f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83f40:	2b00      	cmp	r3, #0
   83f42:	d144      	bne.n	83fce <__udivdi3+0x92>
   83f44:	428a      	cmp	r2, r1
   83f46:	4615      	mov	r5, r2
   83f48:	4604      	mov	r4, r0
   83f4a:	d94f      	bls.n	83fec <__udivdi3+0xb0>
   83f4c:	fab2 f782 	clz	r7, r2
   83f50:	460e      	mov	r6, r1
   83f52:	b14f      	cbz	r7, 83f68 <__udivdi3+0x2c>
   83f54:	f1c7 0320 	rsb	r3, r7, #32
   83f58:	40b9      	lsls	r1, r7
   83f5a:	fa20 f603 	lsr.w	r6, r0, r3
   83f5e:	fa02 f507 	lsl.w	r5, r2, r7
   83f62:	430e      	orrs	r6, r1
   83f64:	fa00 f407 	lsl.w	r4, r0, r7
   83f68:	0c2f      	lsrs	r7, r5, #16
   83f6a:	fbb6 f0f7 	udiv	r0, r6, r7
   83f6e:	fa1f fe85 	uxth.w	lr, r5
   83f72:	fb07 6210 	mls	r2, r7, r0, r6
   83f76:	fb0e f100 	mul.w	r1, lr, r0
   83f7a:	0c26      	lsrs	r6, r4, #16
   83f7c:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   83f80:	4299      	cmp	r1, r3
   83f82:	d909      	bls.n	83f98 <__udivdi3+0x5c>
   83f84:	195b      	adds	r3, r3, r5
   83f86:	f100 32ff 	add.w	r2, r0, #4294967295
   83f8a:	f080 80ee 	bcs.w	8416a <__udivdi3+0x22e>
   83f8e:	4299      	cmp	r1, r3
   83f90:	f240 80eb 	bls.w	8416a <__udivdi3+0x22e>
   83f94:	3802      	subs	r0, #2
   83f96:	442b      	add	r3, r5
   83f98:	1a59      	subs	r1, r3, r1
   83f9a:	fbb1 f3f7 	udiv	r3, r1, r7
   83f9e:	fb07 1113 	mls	r1, r7, r3, r1
   83fa2:	fb0e fe03 	mul.w	lr, lr, r3
   83fa6:	b2a4      	uxth	r4, r4
   83fa8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   83fac:	458e      	cmp	lr, r1
   83fae:	d908      	bls.n	83fc2 <__udivdi3+0x86>
   83fb0:	1949      	adds	r1, r1, r5
   83fb2:	f103 32ff 	add.w	r2, r3, #4294967295
   83fb6:	f080 80da 	bcs.w	8416e <__udivdi3+0x232>
   83fba:	458e      	cmp	lr, r1
   83fbc:	f240 80d7 	bls.w	8416e <__udivdi3+0x232>
   83fc0:	3b02      	subs	r3, #2
   83fc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83fc6:	2600      	movs	r6, #0
   83fc8:	4631      	mov	r1, r6
   83fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83fce:	428b      	cmp	r3, r1
   83fd0:	d847      	bhi.n	84062 <__udivdi3+0x126>
   83fd2:	fab3 f683 	clz	r6, r3
   83fd6:	2e00      	cmp	r6, #0
   83fd8:	d148      	bne.n	8406c <__udivdi3+0x130>
   83fda:	428b      	cmp	r3, r1
   83fdc:	d302      	bcc.n	83fe4 <__udivdi3+0xa8>
   83fde:	4282      	cmp	r2, r0
   83fe0:	f200 80cf 	bhi.w	84182 <__udivdi3+0x246>
   83fe4:	2001      	movs	r0, #1
   83fe6:	4631      	mov	r1, r6
   83fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83fec:	b912      	cbnz	r2, 83ff4 <__udivdi3+0xb8>
   83fee:	2501      	movs	r5, #1
   83ff0:	fbb5 f5f2 	udiv	r5, r5, r2
   83ff4:	fab5 fc85 	clz	ip, r5
   83ff8:	f1bc 0f00 	cmp.w	ip, #0
   83ffc:	d178      	bne.n	840f0 <__udivdi3+0x1b4>
   83ffe:	1b49      	subs	r1, r1, r5
   84000:	0c2f      	lsrs	r7, r5, #16
   84002:	fa1f fe85 	uxth.w	lr, r5
   84006:	2601      	movs	r6, #1
   84008:	fbb1 f0f7 	udiv	r0, r1, r7
   8400c:	fb07 1110 	mls	r1, r7, r0, r1
   84010:	fb0e f200 	mul.w	r2, lr, r0
   84014:	0c23      	lsrs	r3, r4, #16
   84016:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8401a:	428a      	cmp	r2, r1
   8401c:	d907      	bls.n	8402e <__udivdi3+0xf2>
   8401e:	1949      	adds	r1, r1, r5
   84020:	f100 33ff 	add.w	r3, r0, #4294967295
   84024:	d202      	bcs.n	8402c <__udivdi3+0xf0>
   84026:	428a      	cmp	r2, r1
   84028:	f200 80bc 	bhi.w	841a4 <__udivdi3+0x268>
   8402c:	4618      	mov	r0, r3
   8402e:	1a89      	subs	r1, r1, r2
   84030:	fbb1 f3f7 	udiv	r3, r1, r7
   84034:	fb07 1113 	mls	r1, r7, r3, r1
   84038:	fb0e fe03 	mul.w	lr, lr, r3
   8403c:	b2a4      	uxth	r4, r4
   8403e:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   84042:	4596      	cmp	lr, r2
   84044:	d908      	bls.n	84058 <__udivdi3+0x11c>
   84046:	1952      	adds	r2, r2, r5
   84048:	f103 31ff 	add.w	r1, r3, #4294967295
   8404c:	f080 8091 	bcs.w	84172 <__udivdi3+0x236>
   84050:	4596      	cmp	lr, r2
   84052:	f240 808e 	bls.w	84172 <__udivdi3+0x236>
   84056:	3b02      	subs	r3, #2
   84058:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8405c:	4631      	mov	r1, r6
   8405e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84062:	2600      	movs	r6, #0
   84064:	4630      	mov	r0, r6
   84066:	4631      	mov	r1, r6
   84068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8406c:	f1c6 0420 	rsb	r4, r6, #32
   84070:	fa22 f504 	lsr.w	r5, r2, r4
   84074:	40b3      	lsls	r3, r6
   84076:	432b      	orrs	r3, r5
   84078:	fa21 f704 	lsr.w	r7, r1, r4
   8407c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   84080:	fbb7 fcf8 	udiv	ip, r7, r8
   84084:	fa1f f983 	uxth.w	r9, r3
   84088:	fb08 771c 	mls	r7, r8, ip, r7
   8408c:	fa20 fe04 	lsr.w	lr, r0, r4
   84090:	fa01 f506 	lsl.w	r5, r1, r6
   84094:	fb09 f40c 	mul.w	r4, r9, ip
   84098:	ea4e 0505 	orr.w	r5, lr, r5
   8409c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   840a0:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   840a4:	42bc      	cmp	r4, r7
   840a6:	fa02 f206 	lsl.w	r2, r2, r6
   840aa:	d904      	bls.n	840b6 <__udivdi3+0x17a>
   840ac:	18ff      	adds	r7, r7, r3
   840ae:	f10c 31ff 	add.w	r1, ip, #4294967295
   840b2:	d368      	bcc.n	84186 <__udivdi3+0x24a>
   840b4:	468c      	mov	ip, r1
   840b6:	1b3f      	subs	r7, r7, r4
   840b8:	fbb7 f4f8 	udiv	r4, r7, r8
   840bc:	fb08 7714 	mls	r7, r8, r4, r7
   840c0:	fb09 f904 	mul.w	r9, r9, r4
   840c4:	b2ad      	uxth	r5, r5
   840c6:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   840ca:	4589      	cmp	r9, r1
   840cc:	d904      	bls.n	840d8 <__udivdi3+0x19c>
   840ce:	18c9      	adds	r1, r1, r3
   840d0:	f104 35ff 	add.w	r5, r4, #4294967295
   840d4:	d35d      	bcc.n	84192 <__udivdi3+0x256>
   840d6:	462c      	mov	r4, r5
   840d8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   840dc:	fba4 2302 	umull	r2, r3, r4, r2
   840e0:	ebc9 0101 	rsb	r1, r9, r1
   840e4:	4299      	cmp	r1, r3
   840e6:	d349      	bcc.n	8417c <__udivdi3+0x240>
   840e8:	d045      	beq.n	84176 <__udivdi3+0x23a>
   840ea:	4620      	mov	r0, r4
   840ec:	2600      	movs	r6, #0
   840ee:	e76b      	b.n	83fc8 <__udivdi3+0x8c>
   840f0:	f1cc 0420 	rsb	r4, ip, #32
   840f4:	fa05 f50c 	lsl.w	r5, r5, ip
   840f8:	fa21 f304 	lsr.w	r3, r1, r4
   840fc:	0c2a      	lsrs	r2, r5, #16
   840fe:	fbb3 f6f2 	udiv	r6, r3, r2
   84102:	fa1f fe85 	uxth.w	lr, r5
   84106:	fb02 3816 	mls	r8, r2, r6, r3
   8410a:	fa20 f704 	lsr.w	r7, r0, r4
   8410e:	fa01 f10c 	lsl.w	r1, r1, ip
   84112:	fb0e f906 	mul.w	r9, lr, r6
   84116:	430f      	orrs	r7, r1
   84118:	0c3c      	lsrs	r4, r7, #16
   8411a:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   8411e:	4599      	cmp	r9, r3
   84120:	fa00 f40c 	lsl.w	r4, r0, ip
   84124:	d907      	bls.n	84136 <__udivdi3+0x1fa>
   84126:	195b      	adds	r3, r3, r5
   84128:	f106 31ff 	add.w	r1, r6, #4294967295
   8412c:	d238      	bcs.n	841a0 <__udivdi3+0x264>
   8412e:	4599      	cmp	r9, r3
   84130:	d936      	bls.n	841a0 <__udivdi3+0x264>
   84132:	3e02      	subs	r6, #2
   84134:	442b      	add	r3, r5
   84136:	ebc9 0303 	rsb	r3, r9, r3
   8413a:	fbb3 f0f2 	udiv	r0, r3, r2
   8413e:	fb02 3310 	mls	r3, r2, r0, r3
   84142:	fb0e f100 	mul.w	r1, lr, r0
   84146:	b2bf      	uxth	r7, r7
   84148:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   8414c:	4299      	cmp	r1, r3
   8414e:	d907      	bls.n	84160 <__udivdi3+0x224>
   84150:	195b      	adds	r3, r3, r5
   84152:	f100 37ff 	add.w	r7, r0, #4294967295
   84156:	d221      	bcs.n	8419c <__udivdi3+0x260>
   84158:	4299      	cmp	r1, r3
   8415a:	d91f      	bls.n	8419c <__udivdi3+0x260>
   8415c:	3802      	subs	r0, #2
   8415e:	442b      	add	r3, r5
   84160:	4617      	mov	r7, r2
   84162:	1a59      	subs	r1, r3, r1
   84164:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   84168:	e74e      	b.n	84008 <__udivdi3+0xcc>
   8416a:	4610      	mov	r0, r2
   8416c:	e714      	b.n	83f98 <__udivdi3+0x5c>
   8416e:	4613      	mov	r3, r2
   84170:	e727      	b.n	83fc2 <__udivdi3+0x86>
   84172:	460b      	mov	r3, r1
   84174:	e770      	b.n	84058 <__udivdi3+0x11c>
   84176:	40b0      	lsls	r0, r6
   84178:	4290      	cmp	r0, r2
   8417a:	d2b6      	bcs.n	840ea <__udivdi3+0x1ae>
   8417c:	1e60      	subs	r0, r4, #1
   8417e:	2600      	movs	r6, #0
   84180:	e722      	b.n	83fc8 <__udivdi3+0x8c>
   84182:	4630      	mov	r0, r6
   84184:	e720      	b.n	83fc8 <__udivdi3+0x8c>
   84186:	42bc      	cmp	r4, r7
   84188:	d994      	bls.n	840b4 <__udivdi3+0x178>
   8418a:	f1ac 0c02 	sub.w	ip, ip, #2
   8418e:	441f      	add	r7, r3
   84190:	e791      	b.n	840b6 <__udivdi3+0x17a>
   84192:	4589      	cmp	r9, r1
   84194:	d99f      	bls.n	840d6 <__udivdi3+0x19a>
   84196:	3c02      	subs	r4, #2
   84198:	4419      	add	r1, r3
   8419a:	e79d      	b.n	840d8 <__udivdi3+0x19c>
   8419c:	4638      	mov	r0, r7
   8419e:	e7df      	b.n	84160 <__udivdi3+0x224>
   841a0:	460e      	mov	r6, r1
   841a2:	e7c8      	b.n	84136 <__udivdi3+0x1fa>
   841a4:	3802      	subs	r0, #2
   841a6:	4429      	add	r1, r5
   841a8:	e741      	b.n	8402e <__udivdi3+0xf2>
   841aa:	bf00      	nop
   841ac:	00000001 	.word	0x00000001
   841b0:	00000002 	.word	0x00000002
   841b4:	00000004 	.word	0x00000004
   841b8:	00000008 	.word	0x00000008
   841bc:	00000010 	.word	0x00000010
   841c0:	00000020 	.word	0x00000020
   841c4:	00000040 	.word	0x00000040
   841c8:	00000080 	.word	0x00000080
   841cc:	00000100 	.word	0x00000100
   841d0:	00000200 	.word	0x00000200
   841d4:	00000400 	.word	0x00000400
   841d8:	0a303031 	.word	0x0a303031
   841dc:	00000000 	.word	0x00000000
   841e0:	00000a30 	.word	0x00000a30
   841e4:	000a3035 	.word	0x000a3035
   841e8:	000a6925 	.word	0x000a6925
   841ec:	00000043 	.word	0x00000043

000841f0 <_global_impure_ptr>:
   841f0:	20070140                                @.. 

000841f4 <zeroes.6869>:
   841f4:	30303030 30303030 30303030 30303030     0000000000000000
   84204:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   84214:	00000000 33323130 37363534 62613938     ....0123456789ab
   84224:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00084234 <blanks.6868>:
   84234:	20202020 20202020 20202020 20202020                     

00084244 <_init>:
   84244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84246:	bf00      	nop
   84248:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8424a:	bc08      	pop	{r3}
   8424c:	469e      	mov	lr, r3
   8424e:	4770      	bx	lr

00084250 <__init_array_start>:
   84250:	00082379 	.word	0x00082379

00084254 <__frame_dummy_init_array_entry>:
   84254:	00080119                                ....

00084258 <_fini>:
   84258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8425a:	bf00      	nop
   8425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8425e:	bc08      	pop	{r3}
   84260:	469e      	mov	lr, r3
   84262:	4770      	bx	lr

00084264 <__fini_array_start>:
   84264:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <xNextTaskUnblockTime>:
20070138:	0000ffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000841ec 00000000 00000000 00000000     .A..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	000839d1                                .9..
