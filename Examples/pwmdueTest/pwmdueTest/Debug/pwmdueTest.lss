
pwmdueTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e70  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083e70  00083e70  0000be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00083e78  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000fc  200709a4  0008481c  000109a4  2**2
                  ALLOC
  4 .stack        00002000  20070aa0  00084918  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000aecf  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c64  00000000  00000000  0001b8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004607  00000000  00000000  0001d55b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a48  00000000  00000000  00021b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000948  00000000  00000000  000225aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00016c30  00000000  00000000  00022ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c4b5  00000000  00000000  00039b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062485  00000000  00000000  00045fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002020  00000000  00000000  000a845c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072aa0 	.word	0x20072aa0
   80004:	00080945 	.word	0x00080945
   80008:	00080941 	.word	0x00080941
   8000c:	00080941 	.word	0x00080941
   80010:	00080941 	.word	0x00080941
   80014:	00080941 	.word	0x00080941
   80018:	00080941 	.word	0x00080941
	...
   8002c:	00080941 	.word	0x00080941
   80030:	00080941 	.word	0x00080941
   80034:	00000000 	.word	0x00000000
   80038:	00080941 	.word	0x00080941
   8003c:	00080941 	.word	0x00080941
   80040:	00080941 	.word	0x00080941
   80044:	00080941 	.word	0x00080941
   80048:	00080941 	.word	0x00080941
   8004c:	00080941 	.word	0x00080941
   80050:	00080941 	.word	0x00080941
   80054:	00080941 	.word	0x00080941
   80058:	00080941 	.word	0x00080941
   8005c:	00080941 	.word	0x00080941
   80060:	00080941 	.word	0x00080941
   80064:	00080941 	.word	0x00080941
   80068:	00000000 	.word	0x00000000
   8006c:	00080551 	.word	0x00080551
   80070:	00080565 	.word	0x00080565
   80074:	00080579 	.word	0x00080579
   80078:	0008058d 	.word	0x0008058d
	...
   80084:	00080941 	.word	0x00080941
   80088:	00080941 	.word	0x00080941
   8008c:	00080941 	.word	0x00080941
   80090:	00080941 	.word	0x00080941
   80094:	00080941 	.word	0x00080941
   80098:	00080941 	.word	0x00080941
   8009c:	00080941 	.word	0x00080941
   800a0:	00080941 	.word	0x00080941
   800a4:	00000000 	.word	0x00000000
   800a8:	00080941 	.word	0x00080941
   800ac:	00080941 	.word	0x00080941
   800b0:	00080941 	.word	0x00080941
   800b4:	00080941 	.word	0x00080941
   800b8:	00080941 	.word	0x00080941
   800bc:	00080941 	.word	0x00080941
   800c0:	00080941 	.word	0x00080941
   800c4:	00080941 	.word	0x00080941
   800c8:	00080941 	.word	0x00080941
   800cc:	00080941 	.word	0x00080941
   800d0:	00080941 	.word	0x00080941
   800d4:	00080941 	.word	0x00080941
   800d8:	00080941 	.word	0x00080941
   800dc:	00080941 	.word	0x00080941
   800e0:	00080941 	.word	0x00080941
   800e4:	00080941 	.word	0x00080941
   800e8:	00080941 	.word	0x00080941
   800ec:	00080941 	.word	0x00080941
   800f0:	00080941 	.word	0x00080941

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a4 	.word	0x200709a4
   80110:	00000000 	.word	0x00000000
   80114:	00083e78 	.word	0x00083e78

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083e78 	.word	0x00083e78
   8013c:	200709a8 	.word	0x200709a8
   80140:	00083e78 	.word	0x00083e78
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700b1 	.word	0x200700b1
   8018c:	00080605 	.word	0x00080605
   80190:	00080659 	.word	0x00080659
   80194:	00080669 	.word	0x00080669
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	00080679 	.word	0x00080679
   801a4:	000805a1 	.word	0x000805a1
   801a8:	000809f5 	.word	0x000809f5

000801ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801b0:	460c      	mov	r4, r1
   801b2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   801b4:	b960      	cbnz	r0, 801d0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   801b6:	2a00      	cmp	r2, #0
   801b8:	dd0e      	ble.n	801d8 <_read+0x2c>
   801ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801bc:	4e09      	ldr	r6, [pc, #36]	; (801e4 <_read+0x38>)
   801be:	4d0a      	ldr	r5, [pc, #40]	; (801e8 <_read+0x3c>)
   801c0:	6830      	ldr	r0, [r6, #0]
   801c2:	4621      	mov	r1, r4
   801c4:	682b      	ldr	r3, [r5, #0]
   801c6:	4798      	blx	r3
		ptr++;
   801c8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801ca:	42bc      	cmp	r4, r7
   801cc:	d1f8      	bne.n	801c0 <_read+0x14>
   801ce:	e006      	b.n	801de <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801d0:	f04f 30ff 	mov.w	r0, #4294967295
   801d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   801d8:	2000      	movs	r0, #0
   801da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   801de:	4640      	mov	r0, r8
	}
	return nChars;
}
   801e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e4:	20070a70 	.word	0x20070a70
   801e8:	20070a68 	.word	0x20070a68

000801ec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801f0:	460e      	mov	r6, r1
   801f2:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f4:	3801      	subs	r0, #1
   801f6:	2802      	cmp	r0, #2
   801f8:	d80f      	bhi.n	8021a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   801fa:	b192      	cbz	r2, 80222 <_write+0x36>
   801fc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801fe:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8023c <_write+0x50>
   80202:	4f0d      	ldr	r7, [pc, #52]	; (80238 <_write+0x4c>)
   80204:	f8d8 0000 	ldr.w	r0, [r8]
   80208:	5d31      	ldrb	r1, [r6, r4]
   8020a:	683b      	ldr	r3, [r7, #0]
   8020c:	4798      	blx	r3
   8020e:	2800      	cmp	r0, #0
   80210:	db0a      	blt.n	80228 <_write+0x3c>
			return -1;
		}
		++nChars;
   80212:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80214:	42a5      	cmp	r5, r4
   80216:	d1f5      	bne.n	80204 <_write+0x18>
   80218:	e00a      	b.n	80230 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8021a:	f04f 30ff 	mov.w	r0, #4294967295
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80222:	2000      	movs	r0, #0
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
   8022c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80230:	4620      	mov	r0, r4
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a6c 	.word	0x20070a6c
   8023c:	20070a70 	.word	0x20070a70

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b1e      	ldr	r3, [pc, #120]	; (802c0 <board_init+0x80>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c1d      	ldr	r4, [pc, #116]	; (802c4 <board_init+0x84>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c19      	ldr	r4, [pc, #100]	; (802c8 <board_init+0x88>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	4914      	ldr	r1, [pc, #80]	; (802cc <board_init+0x8c>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	4914      	ldr	r1, [pc, #80]	; (802d0 <board_init+0x90>)
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	4814      	ldr	r0, [pc, #80]	; (802d4 <board_init+0x94>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4a13      	ldr	r2, [pc, #76]	; (802d8 <board_init+0x98>)
   8028a:	4b14      	ldr	r3, [pc, #80]	; (802dc <board_init+0x9c>)
   8028c:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   8028e:	2039      	movs	r0, #57	; 0x39
   80290:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80294:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   80296:	200b      	movs	r0, #11
   80298:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8029c:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   8029e:	202c      	movs	r0, #44	; 0x2c
   802a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802a4:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED2
	/* Configure PWM LED2 pin */
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
   802a6:	2057      	movs	r0, #87	; 0x57
   802a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802ac:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   802ae:	202b      	movs	r0, #43	; 0x2b
   802b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802b4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   802b6:	202a      	movs	r0, #42	; 0x2a
   802b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802bc:	47a0      	blx	r4
   802be:	bd10      	pop	{r4, pc}
   802c0:	400e1a50 	.word	0x400e1a50
   802c4:	00080689 	.word	0x00080689
   802c8:	00080385 	.word	0x00080385
   802cc:	28000079 	.word	0x28000079
   802d0:	28000001 	.word	0x28000001
   802d4:	400e0e00 	.word	0x400e0e00
   802d8:	08000001 	.word	0x08000001
   802dc:	00080459 	.word	0x00080459

000802e0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   802e0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   802e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   802e6:	d016      	beq.n	80316 <pio_set_peripheral+0x36>
   802e8:	d804      	bhi.n	802f4 <pio_set_peripheral+0x14>
   802ea:	b1c1      	cbz	r1, 8031e <pio_set_peripheral+0x3e>
   802ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   802f0:	d00a      	beq.n	80308 <pio_set_peripheral+0x28>
   802f2:	e013      	b.n	8031c <pio_set_peripheral+0x3c>
   802f4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   802f8:	d011      	beq.n	8031e <pio_set_peripheral+0x3e>
   802fa:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802fe:	d00e      	beq.n	8031e <pio_set_peripheral+0x3e>
   80300:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80304:	d10a      	bne.n	8031c <pio_set_peripheral+0x3c>
   80306:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80308:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8030a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8030c:	400b      	ands	r3, r1
   8030e:	ea23 0302 	bic.w	r3, r3, r2
   80312:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80314:	e002      	b.n	8031c <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80316:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80318:	4313      	orrs	r3, r2
   8031a:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8031c:	6042      	str	r2, [r0, #4]
   8031e:	4770      	bx	lr

00080320 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80320:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80322:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80326:	bf14      	ite	ne
   80328:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8032a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8032c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80330:	bf14      	ite	ne
   80332:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80334:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80336:	f012 0f02 	tst.w	r2, #2
   8033a:	d002      	beq.n	80342 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8033c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80340:	e004      	b.n	8034c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80342:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80346:	bf18      	it	ne
   80348:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8034c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8034e:	6001      	str	r1, [r0, #0]
   80350:	4770      	bx	lr
   80352:	bf00      	nop

00080354 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80354:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80356:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80358:	9c01      	ldr	r4, [sp, #4]
   8035a:	b10c      	cbz	r4, 80360 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8035c:	6641      	str	r1, [r0, #100]	; 0x64
   8035e:	e000      	b.n	80362 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80360:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80362:	b10b      	cbz	r3, 80368 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80364:	6501      	str	r1, [r0, #80]	; 0x50
   80366:	e000      	b.n	8036a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80368:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8036a:	b10a      	cbz	r2, 80370 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8036c:	6301      	str	r1, [r0, #48]	; 0x30
   8036e:	e000      	b.n	80372 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80370:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80372:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80374:	6001      	str	r1, [r0, #0]
}
   80376:	f85d 4b04 	ldr.w	r4, [sp], #4
   8037a:	4770      	bx	lr

0008037c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8037c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8037e:	4770      	bx	lr

00080380 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80380:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80382:	4770      	bx	lr

00080384 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80384:	b570      	push	{r4, r5, r6, lr}
   80386:	b082      	sub	sp, #8
   80388:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8038a:	0944      	lsrs	r4, r0, #5
   8038c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80390:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80394:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80396:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8039a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8039e:	d030      	beq.n	80402 <pio_configure_pin+0x7e>
   803a0:	d806      	bhi.n	803b0 <pio_configure_pin+0x2c>
   803a2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   803a6:	d00a      	beq.n	803be <pio_configure_pin+0x3a>
   803a8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   803ac:	d018      	beq.n	803e0 <pio_configure_pin+0x5c>
   803ae:	e049      	b.n	80444 <pio_configure_pin+0xc0>
   803b0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   803b4:	d030      	beq.n	80418 <pio_configure_pin+0x94>
   803b6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   803ba:	d02d      	beq.n	80418 <pio_configure_pin+0x94>
   803bc:	e042      	b.n	80444 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   803be:	f000 001f 	and.w	r0, r0, #31
   803c2:	2401      	movs	r4, #1
   803c4:	4084      	lsls	r4, r0
   803c6:	4630      	mov	r0, r6
   803c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803cc:	4622      	mov	r2, r4
   803ce:	4b1f      	ldr	r3, [pc, #124]	; (8044c <pio_configure_pin+0xc8>)
   803d0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803d2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803d6:	bf14      	ite	ne
   803d8:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803da:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803dc:	2001      	movs	r0, #1
   803de:	e032      	b.n	80446 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   803e0:	f000 001f 	and.w	r0, r0, #31
   803e4:	2401      	movs	r4, #1
   803e6:	4084      	lsls	r4, r0
   803e8:	4630      	mov	r0, r6
   803ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803ee:	4622      	mov	r2, r4
   803f0:	4b16      	ldr	r3, [pc, #88]	; (8044c <pio_configure_pin+0xc8>)
   803f2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803f4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803f8:	bf14      	ite	ne
   803fa:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803fc:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803fe:	2001      	movs	r0, #1
   80400:	e021      	b.n	80446 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80402:	f000 011f 	and.w	r1, r0, #31
   80406:	2401      	movs	r4, #1
   80408:	4630      	mov	r0, r6
   8040a:	fa04 f101 	lsl.w	r1, r4, r1
   8040e:	462a      	mov	r2, r5
   80410:	4b0f      	ldr	r3, [pc, #60]	; (80450 <pio_configure_pin+0xcc>)
   80412:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80414:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80416:	e016      	b.n	80446 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80418:	f000 011f 	and.w	r1, r0, #31
   8041c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8041e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80422:	ea05 0304 	and.w	r3, r5, r4
   80426:	9300      	str	r3, [sp, #0]
   80428:	4630      	mov	r0, r6
   8042a:	fa04 f101 	lsl.w	r1, r4, r1
   8042e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80432:	bf14      	ite	ne
   80434:	2200      	movne	r2, #0
   80436:	2201      	moveq	r2, #1
   80438:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8043c:	4d05      	ldr	r5, [pc, #20]	; (80454 <pio_configure_pin+0xd0>)
   8043e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80440:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80442:	e000      	b.n	80446 <pio_configure_pin+0xc2>

	default:
		return 0;
   80444:	2000      	movs	r0, #0
	}

	return 1;
}
   80446:	b002      	add	sp, #8
   80448:	bd70      	pop	{r4, r5, r6, pc}
   8044a:	bf00      	nop
   8044c:	000802e1 	.word	0x000802e1
   80450:	00080321 	.word	0x00080321
   80454:	00080355 	.word	0x00080355

00080458 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80458:	b5f0      	push	{r4, r5, r6, r7, lr}
   8045a:	b083      	sub	sp, #12
   8045c:	4607      	mov	r7, r0
   8045e:	460e      	mov	r6, r1
   80460:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80462:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   80466:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8046a:	d026      	beq.n	804ba <pio_configure_pin_group+0x62>
   8046c:	d806      	bhi.n	8047c <pio_configure_pin_group+0x24>
   8046e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80472:	d00a      	beq.n	8048a <pio_configure_pin_group+0x32>
   80474:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80478:	d013      	beq.n	804a2 <pio_configure_pin_group+0x4a>
   8047a:	e034      	b.n	804e6 <pio_configure_pin_group+0x8e>
   8047c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80480:	d01f      	beq.n	804c2 <pio_configure_pin_group+0x6a>
   80482:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80486:	d01c      	beq.n	804c2 <pio_configure_pin_group+0x6a>
   80488:	e02d      	b.n	804e6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8048a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8048e:	4632      	mov	r2, r6
   80490:	4b16      	ldr	r3, [pc, #88]	; (804ec <pio_configure_pin_group+0x94>)
   80492:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80494:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80498:	bf14      	ite	ne
   8049a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8049c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8049e:	2001      	movs	r0, #1
   804a0:	e022      	b.n	804e8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   804a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804a6:	4632      	mov	r2, r6
   804a8:	4b10      	ldr	r3, [pc, #64]	; (804ec <pio_configure_pin_group+0x94>)
   804aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   804ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804b0:	bf14      	ite	ne
   804b2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   804b4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   804b6:	2001      	movs	r0, #1
   804b8:	e016      	b.n	804e8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   804ba:	4b0d      	ldr	r3, [pc, #52]	; (804f0 <pio_configure_pin_group+0x98>)
   804bc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   804be:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   804c0:	e012      	b.n	804e8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804c2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   804c6:	f005 0301 	and.w	r3, r5, #1
   804ca:	9300      	str	r3, [sp, #0]
   804cc:	4638      	mov	r0, r7
   804ce:	4631      	mov	r1, r6
   804d0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804d4:	bf14      	ite	ne
   804d6:	2200      	movne	r2, #0
   804d8:	2201      	moveq	r2, #1
   804da:	f3c5 0380 	ubfx	r3, r5, #2, #1
   804de:	4c05      	ldr	r4, [pc, #20]	; (804f4 <pio_configure_pin_group+0x9c>)
   804e0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804e2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804e4:	e000      	b.n	804e8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   804e6:	2000      	movs	r0, #0
	}

	return 1;
}
   804e8:	b003      	add	sp, #12
   804ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   804ec:	000802e1 	.word	0x000802e1
   804f0:	00080321 	.word	0x00080321
   804f4:	00080355 	.word	0x00080355

000804f8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   804f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804fc:	4604      	mov	r4, r0
   804fe:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80500:	4b10      	ldr	r3, [pc, #64]	; (80544 <pio_handler_process+0x4c>)
   80502:	4798      	blx	r3
   80504:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80506:	4620      	mov	r0, r4
   80508:	4b0f      	ldr	r3, [pc, #60]	; (80548 <pio_handler_process+0x50>)
   8050a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8050c:	4005      	ands	r5, r0
   8050e:	d017      	beq.n	80540 <pio_handler_process+0x48>
   80510:	4f0e      	ldr	r7, [pc, #56]	; (8054c <pio_handler_process+0x54>)
   80512:	f107 040c 	add.w	r4, r7, #12
   80516:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80518:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8051c:	42b3      	cmp	r3, r6
   8051e:	d10a      	bne.n	80536 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80520:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80524:	4229      	tst	r1, r5
   80526:	d006      	beq.n	80536 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80528:	6823      	ldr	r3, [r4, #0]
   8052a:	4630      	mov	r0, r6
   8052c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8052e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   80532:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80536:	42bc      	cmp	r4, r7
   80538:	d002      	beq.n	80540 <pio_handler_process+0x48>
   8053a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8053c:	2d00      	cmp	r5, #0
   8053e:	d1eb      	bne.n	80518 <pio_handler_process+0x20>
   80540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80544:	0008037d 	.word	0x0008037d
   80548:	00080381 	.word	0x00080381
   8054c:	200709c0 	.word	0x200709c0

00080550 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80550:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80552:	4802      	ldr	r0, [pc, #8]	; (8055c <PIOA_Handler+0xc>)
   80554:	210b      	movs	r1, #11
   80556:	4b02      	ldr	r3, [pc, #8]	; (80560 <PIOA_Handler+0x10>)
   80558:	4798      	blx	r3
   8055a:	bd08      	pop	{r3, pc}
   8055c:	400e0e00 	.word	0x400e0e00
   80560:	000804f9 	.word	0x000804f9

00080564 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80564:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80566:	4802      	ldr	r0, [pc, #8]	; (80570 <PIOB_Handler+0xc>)
   80568:	210c      	movs	r1, #12
   8056a:	4b02      	ldr	r3, [pc, #8]	; (80574 <PIOB_Handler+0x10>)
   8056c:	4798      	blx	r3
   8056e:	bd08      	pop	{r3, pc}
   80570:	400e1000 	.word	0x400e1000
   80574:	000804f9 	.word	0x000804f9

00080578 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80578:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8057a:	4802      	ldr	r0, [pc, #8]	; (80584 <PIOC_Handler+0xc>)
   8057c:	210d      	movs	r1, #13
   8057e:	4b02      	ldr	r3, [pc, #8]	; (80588 <PIOC_Handler+0x10>)
   80580:	4798      	blx	r3
   80582:	bd08      	pop	{r3, pc}
   80584:	400e1200 	.word	0x400e1200
   80588:	000804f9 	.word	0x000804f9

0008058c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8058c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8058e:	4802      	ldr	r0, [pc, #8]	; (80598 <PIOD_Handler+0xc>)
   80590:	210e      	movs	r1, #14
   80592:	4b02      	ldr	r3, [pc, #8]	; (8059c <PIOD_Handler+0x10>)
   80594:	4798      	blx	r3
   80596:	bd08      	pop	{r3, pc}
   80598:	400e1400 	.word	0x400e1400
   8059c:	000804f9 	.word	0x000804f9

000805a0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   805a0:	4b17      	ldr	r3, [pc, #92]	; (80600 <pmc_switch_mck_to_pllack+0x60>)
   805a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   805a8:	4310      	orrs	r0, r2
   805aa:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   805ae:	f013 0f08 	tst.w	r3, #8
   805b2:	d109      	bne.n	805c8 <pmc_switch_mck_to_pllack+0x28>
   805b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805b8:	4911      	ldr	r1, [pc, #68]	; (80600 <pmc_switch_mck_to_pllack+0x60>)
   805ba:	e001      	b.n	805c0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   805bc:	3b01      	subs	r3, #1
   805be:	d019      	beq.n	805f4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805c0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   805c2:	f012 0f08 	tst.w	r2, #8
   805c6:	d0f9      	beq.n	805bc <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   805c8:	4b0d      	ldr	r3, [pc, #52]	; (80600 <pmc_switch_mck_to_pllack+0x60>)
   805ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   805cc:	f022 0203 	bic.w	r2, r2, #3
   805d0:	f042 0202 	orr.w	r2, r2, #2
   805d4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   805d8:	f010 0008 	ands.w	r0, r0, #8
   805dc:	d10c      	bne.n	805f8 <pmc_switch_mck_to_pllack+0x58>
   805de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805e2:	4907      	ldr	r1, [pc, #28]	; (80600 <pmc_switch_mck_to_pllack+0x60>)
   805e4:	e001      	b.n	805ea <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   805e6:	3b01      	subs	r3, #1
   805e8:	d008      	beq.n	805fc <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   805ec:	f012 0f08 	tst.w	r2, #8
   805f0:	d0f9      	beq.n	805e6 <pmc_switch_mck_to_pllack+0x46>
   805f2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805f4:	2001      	movs	r0, #1
   805f6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   805f8:	2000      	movs	r0, #0
   805fa:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805fc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   805fe:	4770      	bx	lr
   80600:	400e0600 	.word	0x400e0600

00080604 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80604:	b138      	cbz	r0, 80616 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80606:	4911      	ldr	r1, [pc, #68]	; (8064c <pmc_switch_mainck_to_xtal+0x48>)
   80608:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8060a:	4a11      	ldr	r2, [pc, #68]	; (80650 <pmc_switch_mainck_to_xtal+0x4c>)
   8060c:	401a      	ands	r2, r3
   8060e:	4b11      	ldr	r3, [pc, #68]	; (80654 <pmc_switch_mainck_to_xtal+0x50>)
   80610:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80612:	620b      	str	r3, [r1, #32]
   80614:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80616:	4a0d      	ldr	r2, [pc, #52]	; (8064c <pmc_switch_mainck_to_xtal+0x48>)
   80618:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8061a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8061e:	f023 0303 	bic.w	r3, r3, #3
   80622:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80626:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8062a:	0209      	lsls	r1, r1, #8
   8062c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8062e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80630:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80632:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80634:	f013 0f01 	tst.w	r3, #1
   80638:	d0fb      	beq.n	80632 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8063a:	4a04      	ldr	r2, [pc, #16]	; (8064c <pmc_switch_mainck_to_xtal+0x48>)
   8063c:	6a13      	ldr	r3, [r2, #32]
   8063e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80646:	6213      	str	r3, [r2, #32]
   80648:	4770      	bx	lr
   8064a:	bf00      	nop
   8064c:	400e0600 	.word	0x400e0600
   80650:	fec8fffc 	.word	0xfec8fffc
   80654:	01370002 	.word	0x01370002

00080658 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80658:	4b02      	ldr	r3, [pc, #8]	; (80664 <pmc_osc_is_ready_mainck+0xc>)
   8065a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8065c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80660:	4770      	bx	lr
   80662:	bf00      	nop
   80664:	400e0600 	.word	0x400e0600

00080668 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80668:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8066c:	4b01      	ldr	r3, [pc, #4]	; (80674 <pmc_disable_pllack+0xc>)
   8066e:	629a      	str	r2, [r3, #40]	; 0x28
   80670:	4770      	bx	lr
   80672:	bf00      	nop
   80674:	400e0600 	.word	0x400e0600

00080678 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80678:	4b02      	ldr	r3, [pc, #8]	; (80684 <pmc_is_locked_pllack+0xc>)
   8067a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8067c:	f000 0002 	and.w	r0, r0, #2
   80680:	4770      	bx	lr
   80682:	bf00      	nop
   80684:	400e0600 	.word	0x400e0600

00080688 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80688:	282c      	cmp	r0, #44	; 0x2c
   8068a:	d820      	bhi.n	806ce <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   8068c:	281f      	cmp	r0, #31
   8068e:	d80d      	bhi.n	806ac <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80690:	4b12      	ldr	r3, [pc, #72]	; (806dc <pmc_enable_periph_clk+0x54>)
   80692:	699a      	ldr	r2, [r3, #24]
   80694:	2301      	movs	r3, #1
   80696:	4083      	lsls	r3, r0
   80698:	401a      	ands	r2, r3
   8069a:	4293      	cmp	r3, r2
   8069c:	d019      	beq.n	806d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8069e:	2301      	movs	r3, #1
   806a0:	fa03 f000 	lsl.w	r0, r3, r0
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <pmc_enable_periph_clk+0x54>)
   806a6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   806a8:	2000      	movs	r0, #0
   806aa:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   806ac:	4b0b      	ldr	r3, [pc, #44]	; (806dc <pmc_enable_periph_clk+0x54>)
   806ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   806b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   806b4:	2301      	movs	r3, #1
   806b6:	4083      	lsls	r3, r0
   806b8:	401a      	ands	r2, r3
   806ba:	4293      	cmp	r3, r2
   806bc:	d00b      	beq.n	806d6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   806be:	2301      	movs	r3, #1
   806c0:	fa03 f000 	lsl.w	r0, r3, r0
   806c4:	4b05      	ldr	r3, [pc, #20]	; (806dc <pmc_enable_periph_clk+0x54>)
   806c6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   806ca:	2000      	movs	r0, #0
   806cc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   806ce:	2001      	movs	r0, #1
   806d0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   806d2:	2000      	movs	r0, #0
   806d4:	4770      	bx	lr
   806d6:	2000      	movs	r0, #0
}
   806d8:	4770      	bx	lr
   806da:	bf00      	nop
   806dc:	400e0600 	.word	0x400e0600

000806e0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   806e0:	b4f0      	push	{r4, r5, r6, r7}
   806e2:	b08c      	sub	sp, #48	; 0x30
   806e4:	4607      	mov	r7, r0
   806e6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   806e8:	ac01      	add	r4, sp, #4
   806ea:	4d12      	ldr	r5, [pc, #72]	; (80734 <pwm_clocks_generate+0x54>)
   806ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   806ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   806f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   806f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   806f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   806f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   806fc:	466a      	mov	r2, sp
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   806fe:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80700:	f852 4f04 	ldr.w	r4, [r2, #4]!
   80704:	fbb6 f4f4 	udiv	r4, r6, r4
   80708:	fbb4 f4f7 	udiv	r4, r4, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   8070c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   80710:	d903      	bls.n	8071a <pwm_clocks_generate+0x3a>
			break;
		}
		ul_pre++;
   80712:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80714:	2b0b      	cmp	r3, #11
   80716:	d1f3      	bne.n	80700 <pwm_clocks_generate+0x20>
   80718:	e004      	b.n	80724 <pwm_clocks_generate+0x44>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   8071a:	2b0a      	cmp	r3, #10
   8071c:	d805      	bhi.n	8072a <pwm_clocks_generate+0x4a>
		return ul_div | (ul_pre << 8);
   8071e:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
   80722:	e004      	b.n	8072e <pwm_clocks_generate+0x4e>
	} else {
		return PWM_INVALID_ARGUMENT;
   80724:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80728:	e001      	b.n	8072e <pwm_clocks_generate+0x4e>
   8072a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8072e:	b00c      	add	sp, #48	; 0x30
   80730:	bcf0      	pop	{r4, r5, r6, r7}
   80732:	4770      	bx	lr
   80734:	00083dac 	.word	0x00083dac

00080738 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80738:	b570      	push	{r4, r5, r6, lr}
   8073a:	4606      	mov	r6, r0
   8073c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8073e:	6808      	ldr	r0, [r1, #0]
   80740:	b140      	cbz	r0, 80754 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80742:	6889      	ldr	r1, [r1, #8]
   80744:	4b0b      	ldr	r3, [pc, #44]	; (80774 <pwm_init+0x3c>)
   80746:	4798      	blx	r3
   80748:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8074e:	4298      	cmp	r0, r3
   80750:	d101      	bne.n	80756 <pwm_init+0x1e>
   80752:	e00e      	b.n	80772 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80754:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80756:	6860      	ldr	r0, [r4, #4]
   80758:	b140      	cbz	r0, 8076c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8075a:	68a1      	ldr	r1, [r4, #8]
   8075c:	4b05      	ldr	r3, [pc, #20]	; (80774 <pwm_init+0x3c>)
   8075e:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80760:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80764:	4298      	cmp	r0, r3
   80766:	d004      	beq.n	80772 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80768:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8076c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   8076e:	2000      	movs	r0, #0
   80770:	bd70      	pop	{r4, r5, r6, pc}
}
   80772:	bd70      	pop	{r4, r5, r6, pc}
   80774:	000806e1 	.word	0x000806e1

00080778 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80778:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8077a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8077c:	8a8c      	ldrh	r4, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8077e:	684a      	ldr	r2, [r1, #4]
   80780:	f002 020f 	and.w	r2, r2, #15
   80784:	4314      	orrs	r4, r2
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80786:	890d      	ldrh	r5, [r1, #8]
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80788:	432c      	orrs	r4, r5
   8078a:	7a8a      	ldrb	r2, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   8078c:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80790:	7d8a      	ldrb	r2, [r1, #22]
   80792:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80796:	7dca      	ldrb	r2, [r1, #23]
   80798:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   8079c:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8079e:	ea44 4482 	orr.w	r4, r4, r2, lsl #18
   807a2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   807a6:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   807aa:	68cc      	ldr	r4, [r1, #12]
   807ac:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   807b0:	690c      	ldr	r4, [r1, #16]
   807b2:	f8c2 420c 	str.w	r4, [r2, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   807b6:	7d8a      	ldrb	r2, [r1, #22]
   807b8:	b13a      	cbz	r2, 807ca <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   807ba:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   807bc:	8b4a      	ldrh	r2, [r1, #26]
   807be:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   807c2:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   807c6:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   807ca:	6c85      	ldr	r5, [r0, #72]	; 0x48
   807cc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   807d0:	409a      	lsls	r2, r3
   807d2:	43d2      	mvns	r2, r2
   807d4:	4015      	ands	r5, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   807d6:	7fce      	ldrb	r6, [r1, #31]
   807d8:	409e      	lsls	r6, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   807da:	7f8c      	ldrb	r4, [r1, #30]
   807dc:	409c      	lsls	r4, r3
   807de:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   807e2:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   807e4:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   807e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
   807e8:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   807ea:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
   807ee:	409d      	lsls	r5, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   807f0:	f891 4020 	ldrb.w	r4, [r1, #32]
   807f4:	409c      	lsls	r4, r3
   807f6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   807fa:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   807fc:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   807fe:	2201      	movs	r2, #1
   80800:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   80802:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   80806:	b11c      	cbz	r4, 80810 <pwm_channel_init+0x98>
		p_pwm->PWM_SCM |= channel;
   80808:	6a04      	ldr	r4, [r0, #32]
   8080a:	4314      	orrs	r4, r2
   8080c:	6204      	str	r4, [r0, #32]
   8080e:	e003      	b.n	80818 <pwm_channel_init+0xa0>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   80810:	6a04      	ldr	r4, [r0, #32]
   80812:	ea24 0402 	bic.w	r4, r4, r2
   80816:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80818:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8081c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8081e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80820:	bf0c      	ite	eq
   80822:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80824:	4394      	bicne	r4, r2
   80826:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80828:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8082c:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8082e:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80830:	bf0c      	ite	eq
   80832:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80836:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   8083a:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   8083c:	2b03      	cmp	r3, #3
   8083e:	d80c      	bhi.n	8085a <pwm_channel_init+0xe2>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80840:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80842:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   80844:	22ff      	movs	r2, #255	; 0xff
   80846:	409a      	lsls	r2, r3
   80848:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8084c:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   80850:	fa01 f303 	lsl.w	r3, r1, r3
   80854:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   80856:	66c3      	str	r3, [r0, #108]	; 0x6c
   80858:	e00c      	b.n	80874 <pwm_channel_init+0xfc>
	} else {
		ch_num -= 4;
   8085a:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   8085c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   8085e:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80860:	22ff      	movs	r2, #255	; 0xff
   80862:	409a      	lsls	r2, r3
   80864:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80868:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   8086c:	fa01 f303 	lsl.w	r3, r1, r3
   80870:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80872:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80874:	2000      	movs	r0, #0
   80876:	bc70      	pop	{r4, r5, r6}
   80878:	4770      	bx	lr
   8087a:	bf00      	nop

0008087c <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   8087c:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8087e:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80880:	690b      	ldr	r3, [r1, #16]
   80882:	4293      	cmp	r3, r2
   80884:	d306      	bcc.n	80894 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80886:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80888:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   8088c:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80890:	2000      	movs	r0, #0
   80892:	e001      	b.n	80898 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80894:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80898:	f85d 4b04 	ldr.w	r4, [sp], #4
   8089c:	4770      	bx	lr
   8089e:	bf00      	nop

000808a0 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   808a0:	2301      	movs	r3, #1
   808a2:	fa03 f101 	lsl.w	r1, r3, r1
   808a6:	6041      	str	r1, [r0, #4]
   808a8:	4770      	bx	lr
   808aa:	bf00      	nop

000808ac <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   808ac:	2301      	movs	r3, #1
   808ae:	fa03 f101 	lsl.w	r1, r3, r1
   808b2:	6081      	str	r1, [r0, #8]
   808b4:	4770      	bx	lr
   808b6:	bf00      	nop

000808b8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   808b8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   808ba:	23ac      	movs	r3, #172	; 0xac
   808bc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   808be:	680a      	ldr	r2, [r1, #0]
   808c0:	684b      	ldr	r3, [r1, #4]
   808c2:	fbb2 f3f3 	udiv	r3, r2, r3
   808c6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   808c8:	1e5c      	subs	r4, r3, #1
   808ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   808ce:	4294      	cmp	r4, r2
   808d0:	d80a      	bhi.n	808e8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   808d2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   808d4:	688b      	ldr	r3, [r1, #8]
   808d6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808d8:	f240 2302 	movw	r3, #514	; 0x202
   808dc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808e0:	2350      	movs	r3, #80	; 0x50
   808e2:	6003      	str	r3, [r0, #0]

	return 0;
   808e4:	2000      	movs	r0, #0
   808e6:	e000      	b.n	808ea <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   808e8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   808ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   808ee:	4770      	bx	lr

000808f0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   808f0:	6943      	ldr	r3, [r0, #20]
   808f2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   808f6:	bf1a      	itte	ne
   808f8:	61c1      	strne	r1, [r0, #28]
	return 0;
   808fa:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   808fc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   808fe:	4770      	bx	lr

00080900 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80900:	6943      	ldr	r3, [r0, #20]
   80902:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80906:	bf1d      	ittte	ne
   80908:	6983      	ldrne	r3, [r0, #24]
   8090a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8090c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8090e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80910:	4770      	bx	lr
   80912:	bf00      	nop

00080914 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80914:	6943      	ldr	r3, [r0, #20]
   80916:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8091a:	bf1d      	ittte	ne
   8091c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80920:	61c1      	strne	r1, [r0, #28]
	return 0;
   80922:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80924:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80926:	4770      	bx	lr

00080928 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80928:	6943      	ldr	r3, [r0, #20]
   8092a:	f013 0f01 	tst.w	r3, #1
   8092e:	d005      	beq.n	8093c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80930:	6983      	ldr	r3, [r0, #24]
   80932:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80936:	600b      	str	r3, [r1, #0]

	return 0;
   80938:	2000      	movs	r0, #0
   8093a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8093c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8093e:	4770      	bx	lr

00080940 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80940:	e7fe      	b.n	80940 <Dummy_Handler>
   80942:	bf00      	nop

00080944 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80944:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80946:	4b1e      	ldr	r3, [pc, #120]	; (809c0 <Reset_Handler+0x7c>)
   80948:	4a1e      	ldr	r2, [pc, #120]	; (809c4 <Reset_Handler+0x80>)
   8094a:	429a      	cmp	r2, r3
   8094c:	d003      	beq.n	80956 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8094e:	4b1e      	ldr	r3, [pc, #120]	; (809c8 <Reset_Handler+0x84>)
   80950:	4a1b      	ldr	r2, [pc, #108]	; (809c0 <Reset_Handler+0x7c>)
   80952:	429a      	cmp	r2, r3
   80954:	d304      	bcc.n	80960 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80956:	4b1d      	ldr	r3, [pc, #116]	; (809cc <Reset_Handler+0x88>)
   80958:	4a1d      	ldr	r2, [pc, #116]	; (809d0 <Reset_Handler+0x8c>)
   8095a:	429a      	cmp	r2, r3
   8095c:	d30f      	bcc.n	8097e <Reset_Handler+0x3a>
   8095e:	e01a      	b.n	80996 <Reset_Handler+0x52>
   80960:	4b1c      	ldr	r3, [pc, #112]	; (809d4 <Reset_Handler+0x90>)
   80962:	4c1d      	ldr	r4, [pc, #116]	; (809d8 <Reset_Handler+0x94>)
   80964:	1ae4      	subs	r4, r4, r3
   80966:	f024 0403 	bic.w	r4, r4, #3
   8096a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8096c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8096e:	4814      	ldr	r0, [pc, #80]	; (809c0 <Reset_Handler+0x7c>)
   80970:	4914      	ldr	r1, [pc, #80]	; (809c4 <Reset_Handler+0x80>)
   80972:	585a      	ldr	r2, [r3, r1]
   80974:	501a      	str	r2, [r3, r0]
   80976:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80978:	42a3      	cmp	r3, r4
   8097a:	d1fa      	bne.n	80972 <Reset_Handler+0x2e>
   8097c:	e7eb      	b.n	80956 <Reset_Handler+0x12>
   8097e:	4b17      	ldr	r3, [pc, #92]	; (809dc <Reset_Handler+0x98>)
   80980:	4917      	ldr	r1, [pc, #92]	; (809e0 <Reset_Handler+0x9c>)
   80982:	1ac9      	subs	r1, r1, r3
   80984:	f021 0103 	bic.w	r1, r1, #3
   80988:	1d1a      	adds	r2, r3, #4
   8098a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8098c:	2200      	movs	r2, #0
   8098e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80992:	428b      	cmp	r3, r1
   80994:	d1fb      	bne.n	8098e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80996:	4a13      	ldr	r2, [pc, #76]	; (809e4 <Reset_Handler+0xa0>)
   80998:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8099c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   809a0:	4911      	ldr	r1, [pc, #68]	; (809e8 <Reset_Handler+0xa4>)
   809a2:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   809a4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   809a8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   809ac:	d203      	bcs.n	809b6 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   809ae:	688a      	ldr	r2, [r1, #8]
   809b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   809b4:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   809b6:	4b0d      	ldr	r3, [pc, #52]	; (809ec <Reset_Handler+0xa8>)
   809b8:	4798      	blx	r3

	/* Branch to main function */
	main();
   809ba:	4b0d      	ldr	r3, [pc, #52]	; (809f0 <Reset_Handler+0xac>)
   809bc:	4798      	blx	r3
   809be:	e7fe      	b.n	809be <Reset_Handler+0x7a>
   809c0:	20070000 	.word	0x20070000
   809c4:	00083e78 	.word	0x00083e78
   809c8:	200709a4 	.word	0x200709a4
   809cc:	20070aa0 	.word	0x20070aa0
   809d0:	200709a4 	.word	0x200709a4
   809d4:	20070004 	.word	0x20070004
   809d8:	200709a7 	.word	0x200709a7
   809dc:	200709a0 	.word	0x200709a0
   809e0:	20070a9b 	.word	0x20070a9b
   809e4:	00080000 	.word	0x00080000
   809e8:	e000ed00 	.word	0xe000ed00
   809ec:	00080e19 	.word	0x00080e19
   809f0:	00080cb1 	.word	0x00080cb1

000809f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809f4:	4b3e      	ldr	r3, [pc, #248]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   809f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809f8:	f003 0303 	and.w	r3, r3, #3
   809fc:	2b03      	cmp	r3, #3
   809fe:	d85f      	bhi.n	80ac0 <SystemCoreClockUpdate+0xcc>
   80a00:	e8df f003 	tbb	[pc, r3]
   80a04:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a08:	4b3a      	ldr	r3, [pc, #232]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a0a:	695b      	ldr	r3, [r3, #20]
   80a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a10:	bf14      	ite	ne
   80a12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80a1a:	4b37      	ldr	r3, [pc, #220]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a1c:	601a      	str	r2, [r3, #0]
   80a1e:	e04f      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a20:	4b33      	ldr	r3, [pc, #204]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a22:	6a1b      	ldr	r3, [r3, #32]
   80a24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a28:	d003      	beq.n	80a32 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a2a:	4a34      	ldr	r2, [pc, #208]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a2c:	4b32      	ldr	r3, [pc, #200]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a2e:	601a      	str	r2, [r3, #0]
   80a30:	e046      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a32:	4a33      	ldr	r2, [pc, #204]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80a34:	4b30      	ldr	r3, [pc, #192]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a36:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a38:	4b2d      	ldr	r3, [pc, #180]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a3a:	6a1b      	ldr	r3, [r3, #32]
   80a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a40:	2b10      	cmp	r3, #16
   80a42:	d002      	beq.n	80a4a <SystemCoreClockUpdate+0x56>
   80a44:	2b20      	cmp	r3, #32
   80a46:	d004      	beq.n	80a52 <SystemCoreClockUpdate+0x5e>
   80a48:	e03a      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a4a:	4a2e      	ldr	r2, [pc, #184]	; (80b04 <SystemCoreClockUpdate+0x110>)
   80a4c:	4b2a      	ldr	r3, [pc, #168]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a4e:	601a      	str	r2, [r3, #0]
				break;
   80a50:	e036      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a52:	4a2a      	ldr	r2, [pc, #168]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a54:	4b28      	ldr	r3, [pc, #160]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a56:	601a      	str	r2, [r3, #0]
				break;
   80a58:	e032      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a5a:	4b25      	ldr	r3, [pc, #148]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a5c:	6a1b      	ldr	r3, [r3, #32]
   80a5e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a62:	d003      	beq.n	80a6c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a64:	4a25      	ldr	r2, [pc, #148]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a66:	4b24      	ldr	r3, [pc, #144]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a68:	601a      	str	r2, [r3, #0]
   80a6a:	e012      	b.n	80a92 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a6c:	4a24      	ldr	r2, [pc, #144]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80a6e:	4b22      	ldr	r3, [pc, #136]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a70:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a72:	4b1f      	ldr	r3, [pc, #124]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a74:	6a1b      	ldr	r3, [r3, #32]
   80a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a7a:	2b10      	cmp	r3, #16
   80a7c:	d002      	beq.n	80a84 <SystemCoreClockUpdate+0x90>
   80a7e:	2b20      	cmp	r3, #32
   80a80:	d004      	beq.n	80a8c <SystemCoreClockUpdate+0x98>
   80a82:	e006      	b.n	80a92 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a84:	4a1f      	ldr	r2, [pc, #124]	; (80b04 <SystemCoreClockUpdate+0x110>)
   80a86:	4b1c      	ldr	r3, [pc, #112]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a88:	601a      	str	r2, [r3, #0]
				break;
   80a8a:	e002      	b.n	80a92 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a8c:	4a1b      	ldr	r2, [pc, #108]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a8e:	4b1a      	ldr	r3, [pc, #104]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a90:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a92:	4b17      	ldr	r3, [pc, #92]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a96:	f003 0303 	and.w	r3, r3, #3
   80a9a:	2b02      	cmp	r3, #2
   80a9c:	d10d      	bne.n	80aba <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a9e:	4b14      	ldr	r3, [pc, #80]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80aa0:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80aa2:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80aa4:	4b14      	ldr	r3, [pc, #80]	; (80af8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80aa6:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80aaa:	681a      	ldr	r2, [r3, #0]
   80aac:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ab0:	b2c9      	uxtb	r1, r1
   80ab2:	fbb2 f2f1 	udiv	r2, r2, r1
   80ab6:	601a      	str	r2, [r3, #0]
   80ab8:	e002      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80aba:	4a13      	ldr	r2, [pc, #76]	; (80b08 <SystemCoreClockUpdate+0x114>)
   80abc:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80abe:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80ac0:	4b0b      	ldr	r3, [pc, #44]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ac8:	2b70      	cmp	r3, #112	; 0x70
   80aca:	d107      	bne.n	80adc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80acc:	4b0a      	ldr	r3, [pc, #40]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80ace:	681a      	ldr	r2, [r3, #0]
   80ad0:	490e      	ldr	r1, [pc, #56]	; (80b0c <SystemCoreClockUpdate+0x118>)
   80ad2:	fba1 0202 	umull	r0, r2, r1, r2
   80ad6:	0852      	lsrs	r2, r2, #1
   80ad8:	601a      	str	r2, [r3, #0]
   80ada:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80adc:	4b04      	ldr	r3, [pc, #16]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80ae0:	4b05      	ldr	r3, [pc, #20]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80ae2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80ae6:	681a      	ldr	r2, [r3, #0]
   80ae8:	40ca      	lsrs	r2, r1
   80aea:	601a      	str	r2, [r3, #0]
   80aec:	4770      	bx	lr
   80aee:	bf00      	nop
   80af0:	400e0600 	.word	0x400e0600
   80af4:	400e1a10 	.word	0x400e1a10
   80af8:	20070138 	.word	0x20070138
   80afc:	00b71b00 	.word	0x00b71b00
   80b00:	003d0900 	.word	0x003d0900
   80b04:	007a1200 	.word	0x007a1200
   80b08:	0e4e1c00 	.word	0x0e4e1c00
   80b0c:	aaaaaaab 	.word	0xaaaaaaab

00080b10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80b10:	4b09      	ldr	r3, [pc, #36]	; (80b38 <_sbrk+0x28>)
   80b12:	681b      	ldr	r3, [r3, #0]
   80b14:	b913      	cbnz	r3, 80b1c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80b16:	4a09      	ldr	r2, [pc, #36]	; (80b3c <_sbrk+0x2c>)
   80b18:	4b07      	ldr	r3, [pc, #28]	; (80b38 <_sbrk+0x28>)
   80b1a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80b1c:	4b06      	ldr	r3, [pc, #24]	; (80b38 <_sbrk+0x28>)
   80b1e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80b20:	181a      	adds	r2, r3, r0
   80b22:	4907      	ldr	r1, [pc, #28]	; (80b40 <_sbrk+0x30>)
   80b24:	4291      	cmp	r1, r2
   80b26:	db04      	blt.n	80b32 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80b28:	4610      	mov	r0, r2
   80b2a:	4a03      	ldr	r2, [pc, #12]	; (80b38 <_sbrk+0x28>)
   80b2c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80b2e:	4618      	mov	r0, r3
   80b30:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80b32:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80b36:	4770      	bx	lr
   80b38:	20070a30 	.word	0x20070a30
   80b3c:	20072aa0 	.word	0x20072aa0
   80b40:	20087ffc 	.word	0x20087ffc

00080b44 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80b44:	f04f 30ff 	mov.w	r0, #4294967295
   80b48:	4770      	bx	lr
   80b4a:	bf00      	nop

00080b4c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80b50:	604b      	str	r3, [r1, #4]

	return 0;
}
   80b52:	2000      	movs	r0, #0
   80b54:	4770      	bx	lr
   80b56:	bf00      	nop

00080b58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80b58:	2001      	movs	r0, #1
   80b5a:	4770      	bx	lr

00080b5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80b5c:	2000      	movs	r0, #0
   80b5e:	4770      	bx	lr

00080b60 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b62:	b083      	sub	sp, #12
   80b64:	4604      	mov	r4, r0
   80b66:	460d      	mov	r5, r1
	uint32_t val = 0;
   80b68:	2300      	movs	r3, #0
   80b6a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80b6c:	4b1f      	ldr	r3, [pc, #124]	; (80bec <usart_serial_getchar+0x8c>)
   80b6e:	4298      	cmp	r0, r3
   80b70:	d107      	bne.n	80b82 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80b72:	461f      	mov	r7, r3
   80b74:	4e1e      	ldr	r6, [pc, #120]	; (80bf0 <usart_serial_getchar+0x90>)
   80b76:	4638      	mov	r0, r7
   80b78:	4629      	mov	r1, r5
   80b7a:	47b0      	blx	r6
   80b7c:	2800      	cmp	r0, #0
   80b7e:	d1fa      	bne.n	80b76 <usart_serial_getchar+0x16>
   80b80:	e019      	b.n	80bb6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80b82:	4b1c      	ldr	r3, [pc, #112]	; (80bf4 <usart_serial_getchar+0x94>)
   80b84:	4298      	cmp	r0, r3
   80b86:	d109      	bne.n	80b9c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80b88:	461f      	mov	r7, r3
   80b8a:	4e1b      	ldr	r6, [pc, #108]	; (80bf8 <usart_serial_getchar+0x98>)
   80b8c:	4638      	mov	r0, r7
   80b8e:	a901      	add	r1, sp, #4
   80b90:	47b0      	blx	r6
   80b92:	2800      	cmp	r0, #0
   80b94:	d1fa      	bne.n	80b8c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80b96:	9b01      	ldr	r3, [sp, #4]
   80b98:	702b      	strb	r3, [r5, #0]
   80b9a:	e019      	b.n	80bd0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b9c:	4b17      	ldr	r3, [pc, #92]	; (80bfc <usart_serial_getchar+0x9c>)
   80b9e:	4298      	cmp	r0, r3
   80ba0:	d109      	bne.n	80bb6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80ba2:	461e      	mov	r6, r3
   80ba4:	4c14      	ldr	r4, [pc, #80]	; (80bf8 <usart_serial_getchar+0x98>)
   80ba6:	4630      	mov	r0, r6
   80ba8:	a901      	add	r1, sp, #4
   80baa:	47a0      	blx	r4
   80bac:	2800      	cmp	r0, #0
   80bae:	d1fa      	bne.n	80ba6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80bb0:	9b01      	ldr	r3, [sp, #4]
   80bb2:	702b      	strb	r3, [r5, #0]
   80bb4:	e018      	b.n	80be8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80bb6:	4b12      	ldr	r3, [pc, #72]	; (80c00 <usart_serial_getchar+0xa0>)
   80bb8:	429c      	cmp	r4, r3
   80bba:	d109      	bne.n	80bd0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80bbc:	461e      	mov	r6, r3
   80bbe:	4c0e      	ldr	r4, [pc, #56]	; (80bf8 <usart_serial_getchar+0x98>)
   80bc0:	4630      	mov	r0, r6
   80bc2:	a901      	add	r1, sp, #4
   80bc4:	47a0      	blx	r4
   80bc6:	2800      	cmp	r0, #0
   80bc8:	d1fa      	bne.n	80bc0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80bca:	9b01      	ldr	r3, [sp, #4]
   80bcc:	702b      	strb	r3, [r5, #0]
   80bce:	e00b      	b.n	80be8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80bd0:	4b0c      	ldr	r3, [pc, #48]	; (80c04 <usart_serial_getchar+0xa4>)
   80bd2:	429c      	cmp	r4, r3
   80bd4:	d108      	bne.n	80be8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80bd6:	461e      	mov	r6, r3
   80bd8:	4c07      	ldr	r4, [pc, #28]	; (80bf8 <usart_serial_getchar+0x98>)
   80bda:	4630      	mov	r0, r6
   80bdc:	a901      	add	r1, sp, #4
   80bde:	47a0      	blx	r4
   80be0:	2800      	cmp	r0, #0
   80be2:	d1fa      	bne.n	80bda <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80be4:	9b01      	ldr	r3, [sp, #4]
   80be6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80be8:	b003      	add	sp, #12
   80bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80bec:	400e0800 	.word	0x400e0800
   80bf0:	00080901 	.word	0x00080901
   80bf4:	40098000 	.word	0x40098000
   80bf8:	00080929 	.word	0x00080929
   80bfc:	4009c000 	.word	0x4009c000
   80c00:	400a0000 	.word	0x400a0000
   80c04:	400a4000 	.word	0x400a4000

00080c08 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80c08:	b570      	push	{r4, r5, r6, lr}
   80c0a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80c0c:	4b21      	ldr	r3, [pc, #132]	; (80c94 <usart_serial_putchar+0x8c>)
   80c0e:	4298      	cmp	r0, r3
   80c10:	d107      	bne.n	80c22 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   80c12:	461e      	mov	r6, r3
   80c14:	4d20      	ldr	r5, [pc, #128]	; (80c98 <usart_serial_putchar+0x90>)
   80c16:	4630      	mov	r0, r6
   80c18:	4621      	mov	r1, r4
   80c1a:	47a8      	blx	r5
   80c1c:	2800      	cmp	r0, #0
   80c1e:	d1fa      	bne.n	80c16 <usart_serial_putchar+0xe>
   80c20:	e02b      	b.n	80c7a <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80c22:	4b1e      	ldr	r3, [pc, #120]	; (80c9c <usart_serial_putchar+0x94>)
   80c24:	4298      	cmp	r0, r3
   80c26:	d107      	bne.n	80c38 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80c28:	461e      	mov	r6, r3
   80c2a:	4d1d      	ldr	r5, [pc, #116]	; (80ca0 <usart_serial_putchar+0x98>)
   80c2c:	4630      	mov	r0, r6
   80c2e:	4621      	mov	r1, r4
   80c30:	47a8      	blx	r5
   80c32:	2800      	cmp	r0, #0
   80c34:	d1fa      	bne.n	80c2c <usart_serial_putchar+0x24>
   80c36:	e022      	b.n	80c7e <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c38:	4b1a      	ldr	r3, [pc, #104]	; (80ca4 <usart_serial_putchar+0x9c>)
   80c3a:	4298      	cmp	r0, r3
   80c3c:	d107      	bne.n	80c4e <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80c3e:	461e      	mov	r6, r3
   80c40:	4d17      	ldr	r5, [pc, #92]	; (80ca0 <usart_serial_putchar+0x98>)
   80c42:	4630      	mov	r0, r6
   80c44:	4621      	mov	r1, r4
   80c46:	47a8      	blx	r5
   80c48:	2800      	cmp	r0, #0
   80c4a:	d1fa      	bne.n	80c42 <usart_serial_putchar+0x3a>
   80c4c:	e019      	b.n	80c82 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c4e:	4b16      	ldr	r3, [pc, #88]	; (80ca8 <usart_serial_putchar+0xa0>)
   80c50:	4298      	cmp	r0, r3
   80c52:	d107      	bne.n	80c64 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80c54:	461e      	mov	r6, r3
   80c56:	4d12      	ldr	r5, [pc, #72]	; (80ca0 <usart_serial_putchar+0x98>)
   80c58:	4630      	mov	r0, r6
   80c5a:	4621      	mov	r1, r4
   80c5c:	47a8      	blx	r5
   80c5e:	2800      	cmp	r0, #0
   80c60:	d1fa      	bne.n	80c58 <usart_serial_putchar+0x50>
   80c62:	e010      	b.n	80c86 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c64:	4b11      	ldr	r3, [pc, #68]	; (80cac <usart_serial_putchar+0xa4>)
   80c66:	4298      	cmp	r0, r3
   80c68:	d10f      	bne.n	80c8a <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80c6a:	461e      	mov	r6, r3
   80c6c:	4d0c      	ldr	r5, [pc, #48]	; (80ca0 <usart_serial_putchar+0x98>)
   80c6e:	4630      	mov	r0, r6
   80c70:	4621      	mov	r1, r4
   80c72:	47a8      	blx	r5
   80c74:	2800      	cmp	r0, #0
   80c76:	d1fa      	bne.n	80c6e <usart_serial_putchar+0x66>
   80c78:	e009      	b.n	80c8e <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80c7a:	2001      	movs	r0, #1
   80c7c:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c7e:	2001      	movs	r0, #1
   80c80:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c82:	2001      	movs	r0, #1
   80c84:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c86:	2001      	movs	r0, #1
   80c88:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80c8a:	2000      	movs	r0, #0
   80c8c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80c8e:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80c90:	bd70      	pop	{r4, r5, r6, pc}
   80c92:	bf00      	nop
   80c94:	400e0800 	.word	0x400e0800
   80c98:	000808f1 	.word	0x000808f1
   80c9c:	40098000 	.word	0x40098000
   80ca0:	00080915 	.word	0x00080915
   80ca4:	4009c000 	.word	0x4009c000
   80ca8:	400a0000 	.word	0x400a0000
   80cac:	400a4000 	.word	0x400a4000

00080cb0 <main>:
	/* configure RX0 pin as pull-up - this is tailored towards use with Matlab*/
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
}

int main (void)
{
   80cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80cb4:	b087      	sub	sp, #28
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
   80cb6:	4b3c      	ldr	r3, [pc, #240]	; (80da8 <main+0xf8>)
   80cb8:	4798      	blx	r3
	board_init();
   80cba:	4b3c      	ldr	r3, [pc, #240]	; (80dac <main+0xfc>)
   80cbc:	4798      	blx	r3
   80cbe:	2008      	movs	r0, #8
   80cc0:	4c3b      	ldr	r4, [pc, #236]	; (80db0 <main+0x100>)
   80cc2:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80cc4:	4d3b      	ldr	r5, [pc, #236]	; (80db4 <main+0x104>)
   80cc6:	4b3c      	ldr	r3, [pc, #240]	; (80db8 <main+0x108>)
   80cc8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80cca:	4a3c      	ldr	r2, [pc, #240]	; (80dbc <main+0x10c>)
   80ccc:	4b3c      	ldr	r3, [pc, #240]	; (80dc0 <main+0x110>)
   80cce:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80cd0:	4a3c      	ldr	r2, [pc, #240]	; (80dc4 <main+0x114>)
   80cd2:	4b3d      	ldr	r3, [pc, #244]	; (80dc8 <main+0x118>)
   80cd4:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80cd6:	4b3d      	ldr	r3, [pc, #244]	; (80dcc <main+0x11c>)
   80cd8:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80cda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80cde:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80ce4:	9302      	str	r3, [sp, #8]
   80ce6:	2008      	movs	r0, #8
   80ce8:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80cea:	4628      	mov	r0, r5
   80cec:	4669      	mov	r1, sp
   80cee:	4b38      	ldr	r3, [pc, #224]	; (80dd0 <main+0x120>)
   80cf0:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80cf2:	4e38      	ldr	r6, [pc, #224]	; (80dd4 <main+0x124>)
   80cf4:	6833      	ldr	r3, [r6, #0]
   80cf6:	6898      	ldr	r0, [r3, #8]
   80cf8:	2100      	movs	r1, #0
   80cfa:	4d37      	ldr	r5, [pc, #220]	; (80dd8 <main+0x128>)
   80cfc:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80cfe:	6833      	ldr	r3, [r6, #0]
   80d00:	6858      	ldr	r0, [r3, #4]
   80d02:	2100      	movs	r1, #0
   80d04:	47a8      	blx	r5
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80d06:	4b35      	ldr	r3, [pc, #212]	; (80ddc <main+0x12c>)
   80d08:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d0c:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80d0e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80d10:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80d16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80d1c:	671a      	str	r2, [r3, #112]	; 0x70

	delay_init();
	configure_console(); // Initialize UART
	// Insert application code here, after the board has been initialized.
	
	pmc_enable_periph_clk(ID_PWM);
   80d1e:	2024      	movs	r0, #36	; 0x24
   80d20:	47a0      	blx	r4
	pwm_channel_disable(PWM, PWM_CHANNEL_6);
   80d22:	4c2f      	ldr	r4, [pc, #188]	; (80de0 <main+0x130>)
   80d24:	4620      	mov	r0, r4
   80d26:	2106      	movs	r1, #6
   80d28:	4b2e      	ldr	r3, [pc, #184]	; (80de4 <main+0x134>)
   80d2a:	4798      	blx	r3
	pwm_clock_t pwm_clock ={
   80d2c:	4a2e      	ldr	r2, [pc, #184]	; (80de8 <main+0x138>)
   80d2e:	ab03      	add	r3, sp, #12
   80d30:	ca07      	ldmia	r2, {r0, r1, r2}
   80d32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.ul_clka = 1000*100,
		.ul_clkb = 0,
		.ul_mck = 84000000
	};
	pwm_init(PWM, &pwm_clock);
   80d36:	4620      	mov	r0, r4
   80d38:	4619      	mov	r1, r3
   80d3a:	4b2c      	ldr	r3, [pc, #176]	; (80dec <main+0x13c>)
   80d3c:	4798      	blx	r3
	
	pwm_channel.alignment = PWM_ALIGN_LEFT;
   80d3e:	4b2c      	ldr	r3, [pc, #176]	; (80df0 <main+0x140>)
   80d40:	2200      	movs	r2, #0
   80d42:	811a      	strh	r2, [r3, #8]
	pwm_channel.polarity = PWM_LOW;
   80d44:	729a      	strb	r2, [r3, #10]
	pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80d46:	210b      	movs	r1, #11
   80d48:	6059      	str	r1, [r3, #4]
	pwm_channel.ul_duty = 0;
   80d4a:	60da      	str	r2, [r3, #12]
	pwm_channel.ul_period = 100;
   80d4c:	2264      	movs	r2, #100	; 0x64
   80d4e:	611a      	str	r2, [r3, #16]
	pwm_channel.channel = PWM_CHANNEL_6;
   80d50:	2506      	movs	r5, #6
   80d52:	601d      	str	r5, [r3, #0]
	pwm_channel_init(PWM, &pwm_channel);
   80d54:	4620      	mov	r0, r4
   80d56:	4619      	mov	r1, r3
   80d58:	4b26      	ldr	r3, [pc, #152]	; (80df4 <main+0x144>)
   80d5a:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_6);
   80d5c:	4620      	mov	r0, r4
   80d5e:	4629      	mov	r1, r5
   80d60:	4b25      	ldr	r3, [pc, #148]	; (80df8 <main+0x148>)
   80d62:	4798      	blx	r3
	
	while(1)
	{

		delay_ms(1000);
   80d64:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80e10 <main+0x160>
   80d68:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80e14 <main+0x164>
		pwm_channel_update_duty(PWM, &pwm_channel, 0);
   80d6c:	4627      	mov	r7, r4
	pwm_channel_enable(PWM, PWM_CHANNEL_6);
	
	while(1)
	{

		delay_ms(1000);
   80d6e:	4648      	mov	r0, r9
   80d70:	47c0      	blx	r8
		pwm_channel_update_duty(PWM, &pwm_channel, 0);
   80d72:	4e1f      	ldr	r6, [pc, #124]	; (80df0 <main+0x140>)
   80d74:	4638      	mov	r0, r7
   80d76:	4631      	mov	r1, r6
   80d78:	2200      	movs	r2, #0
   80d7a:	4d20      	ldr	r5, [pc, #128]	; (80dfc <main+0x14c>)
   80d7c:	47a8      	blx	r5
		printf("0\n");
   80d7e:	4820      	ldr	r0, [pc, #128]	; (80e00 <main+0x150>)
   80d80:	4c20      	ldr	r4, [pc, #128]	; (80e04 <main+0x154>)
   80d82:	47a0      	blx	r4
		
		delay_ms(1000);
   80d84:	4648      	mov	r0, r9
   80d86:	47c0      	blx	r8
		pwm_channel_update_duty(PWM, &pwm_channel, 50);
   80d88:	4638      	mov	r0, r7
   80d8a:	4631      	mov	r1, r6
   80d8c:	2232      	movs	r2, #50	; 0x32
   80d8e:	47a8      	blx	r5
		printf("50\n");
   80d90:	481d      	ldr	r0, [pc, #116]	; (80e08 <main+0x158>)
   80d92:	47a0      	blx	r4
		
		delay_ms(1000);
   80d94:	4648      	mov	r0, r9
   80d96:	47c0      	blx	r8
		pwm_channel_update_duty(PWM, &pwm_channel, 100);
   80d98:	4638      	mov	r0, r7
   80d9a:	4631      	mov	r1, r6
   80d9c:	2264      	movs	r2, #100	; 0x64
   80d9e:	47a8      	blx	r5
		printf("100\n");
   80da0:	481a      	ldr	r0, [pc, #104]	; (80e0c <main+0x15c>)
   80da2:	47a0      	blx	r4
   80da4:	e7e3      	b.n	80d6e <main+0xbe>
   80da6:	bf00      	nop
   80da8:	00080149 	.word	0x00080149
   80dac:	00080241 	.word	0x00080241
   80db0:	00080689 	.word	0x00080689
   80db4:	400e0800 	.word	0x400e0800
   80db8:	20070a70 	.word	0x20070a70
   80dbc:	00080c09 	.word	0x00080c09
   80dc0:	20070a6c 	.word	0x20070a6c
   80dc4:	00080b61 	.word	0x00080b61
   80dc8:	20070a68 	.word	0x20070a68
   80dcc:	0501bd00 	.word	0x0501bd00
   80dd0:	000808b9 	.word	0x000808b9
   80dd4:	20070568 	.word	0x20070568
   80dd8:	00080f25 	.word	0x00080f25
   80ddc:	400e0e00 	.word	0x400e0e00
   80de0:	40094000 	.word	0x40094000
   80de4:	000808ad 	.word	0x000808ad
   80de8:	00083dd8 	.word	0x00083dd8
   80dec:	00080739 	.word	0x00080739
   80df0:	20070a74 	.word	0x20070a74
   80df4:	00080779 	.word	0x00080779
   80df8:	000808a1 	.word	0x000808a1
   80dfc:	0008087d 	.word	0x0008087d
   80e00:	00083de4 	.word	0x00083de4
   80e04:	00080e69 	.word	0x00080e69
   80e08:	00083de8 	.word	0x00083de8
   80e0c:	00083dec 	.word	0x00083dec
   80e10:	005b8d80 	.word	0x005b8d80
   80e14:	20070001 	.word	0x20070001

00080e18 <__libc_init_array>:
   80e18:	b570      	push	{r4, r5, r6, lr}
   80e1a:	4e0f      	ldr	r6, [pc, #60]	; (80e58 <__libc_init_array+0x40>)
   80e1c:	4d0f      	ldr	r5, [pc, #60]	; (80e5c <__libc_init_array+0x44>)
   80e1e:	1b76      	subs	r6, r6, r5
   80e20:	10b6      	asrs	r6, r6, #2
   80e22:	d007      	beq.n	80e34 <__libc_init_array+0x1c>
   80e24:	3d04      	subs	r5, #4
   80e26:	2400      	movs	r4, #0
   80e28:	3401      	adds	r4, #1
   80e2a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80e2e:	4798      	blx	r3
   80e30:	42a6      	cmp	r6, r4
   80e32:	d1f9      	bne.n	80e28 <__libc_init_array+0x10>
   80e34:	4e0a      	ldr	r6, [pc, #40]	; (80e60 <__libc_init_array+0x48>)
   80e36:	4d0b      	ldr	r5, [pc, #44]	; (80e64 <__libc_init_array+0x4c>)
   80e38:	f003 f808 	bl	83e4c <_init>
   80e3c:	1b76      	subs	r6, r6, r5
   80e3e:	10b6      	asrs	r6, r6, #2
   80e40:	d008      	beq.n	80e54 <__libc_init_array+0x3c>
   80e42:	3d04      	subs	r5, #4
   80e44:	2400      	movs	r4, #0
   80e46:	3401      	adds	r4, #1
   80e48:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80e4c:	4798      	blx	r3
   80e4e:	42a6      	cmp	r6, r4
   80e50:	d1f9      	bne.n	80e46 <__libc_init_array+0x2e>
   80e52:	bd70      	pop	{r4, r5, r6, pc}
   80e54:	bd70      	pop	{r4, r5, r6, pc}
   80e56:	bf00      	nop
   80e58:	00083e58 	.word	0x00083e58
   80e5c:	00083e58 	.word	0x00083e58
   80e60:	00083e60 	.word	0x00083e60
   80e64:	00083e58 	.word	0x00083e58

00080e68 <iprintf>:
   80e68:	b40f      	push	{r0, r1, r2, r3}
   80e6a:	b510      	push	{r4, lr}
   80e6c:	4b07      	ldr	r3, [pc, #28]	; (80e8c <iprintf+0x24>)
   80e6e:	b082      	sub	sp, #8
   80e70:	ac04      	add	r4, sp, #16
   80e72:	f854 2b04 	ldr.w	r2, [r4], #4
   80e76:	6818      	ldr	r0, [r3, #0]
   80e78:	4623      	mov	r3, r4
   80e7a:	6881      	ldr	r1, [r0, #8]
   80e7c:	9401      	str	r4, [sp, #4]
   80e7e:	f000 f915 	bl	810ac <_vfiprintf_r>
   80e82:	b002      	add	sp, #8
   80e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80e88:	b004      	add	sp, #16
   80e8a:	4770      	bx	lr
   80e8c:	20070568 	.word	0x20070568

00080e90 <memset>:
   80e90:	b4f0      	push	{r4, r5, r6, r7}
   80e92:	0784      	lsls	r4, r0, #30
   80e94:	d043      	beq.n	80f1e <memset+0x8e>
   80e96:	1e54      	subs	r4, r2, #1
   80e98:	2a00      	cmp	r2, #0
   80e9a:	d03e      	beq.n	80f1a <memset+0x8a>
   80e9c:	b2cd      	uxtb	r5, r1
   80e9e:	4603      	mov	r3, r0
   80ea0:	e003      	b.n	80eaa <memset+0x1a>
   80ea2:	1e62      	subs	r2, r4, #1
   80ea4:	2c00      	cmp	r4, #0
   80ea6:	d038      	beq.n	80f1a <memset+0x8a>
   80ea8:	4614      	mov	r4, r2
   80eaa:	f803 5b01 	strb.w	r5, [r3], #1
   80eae:	079a      	lsls	r2, r3, #30
   80eb0:	d1f7      	bne.n	80ea2 <memset+0x12>
   80eb2:	2c03      	cmp	r4, #3
   80eb4:	d92a      	bls.n	80f0c <memset+0x7c>
   80eb6:	b2cd      	uxtb	r5, r1
   80eb8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80ebc:	2c0f      	cmp	r4, #15
   80ebe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80ec2:	d915      	bls.n	80ef0 <memset+0x60>
   80ec4:	f1a4 0710 	sub.w	r7, r4, #16
   80ec8:	093f      	lsrs	r7, r7, #4
   80eca:	f103 0610 	add.w	r6, r3, #16
   80ece:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   80ed2:	461a      	mov	r2, r3
   80ed4:	6015      	str	r5, [r2, #0]
   80ed6:	6055      	str	r5, [r2, #4]
   80ed8:	6095      	str	r5, [r2, #8]
   80eda:	60d5      	str	r5, [r2, #12]
   80edc:	3210      	adds	r2, #16
   80ede:	42b2      	cmp	r2, r6
   80ee0:	d1f8      	bne.n	80ed4 <memset+0x44>
   80ee2:	f004 040f 	and.w	r4, r4, #15
   80ee6:	3701      	adds	r7, #1
   80ee8:	2c03      	cmp	r4, #3
   80eea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   80eee:	d90d      	bls.n	80f0c <memset+0x7c>
   80ef0:	461e      	mov	r6, r3
   80ef2:	4622      	mov	r2, r4
   80ef4:	3a04      	subs	r2, #4
   80ef6:	2a03      	cmp	r2, #3
   80ef8:	f846 5b04 	str.w	r5, [r6], #4
   80efc:	d8fa      	bhi.n	80ef4 <memset+0x64>
   80efe:	1f22      	subs	r2, r4, #4
   80f00:	f022 0203 	bic.w	r2, r2, #3
   80f04:	3204      	adds	r2, #4
   80f06:	4413      	add	r3, r2
   80f08:	f004 0403 	and.w	r4, r4, #3
   80f0c:	b12c      	cbz	r4, 80f1a <memset+0x8a>
   80f0e:	b2c9      	uxtb	r1, r1
   80f10:	441c      	add	r4, r3
   80f12:	f803 1b01 	strb.w	r1, [r3], #1
   80f16:	42a3      	cmp	r3, r4
   80f18:	d1fb      	bne.n	80f12 <memset+0x82>
   80f1a:	bcf0      	pop	{r4, r5, r6, r7}
   80f1c:	4770      	bx	lr
   80f1e:	4614      	mov	r4, r2
   80f20:	4603      	mov	r3, r0
   80f22:	e7c6      	b.n	80eb2 <memset+0x22>

00080f24 <setbuf>:
   80f24:	2900      	cmp	r1, #0
   80f26:	bf0c      	ite	eq
   80f28:	2202      	moveq	r2, #2
   80f2a:	2200      	movne	r2, #0
   80f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80f30:	f000 b800 	b.w	80f34 <setvbuf>

00080f34 <setvbuf>:
   80f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f38:	4d3c      	ldr	r5, [pc, #240]	; (8102c <setvbuf+0xf8>)
   80f3a:	4604      	mov	r4, r0
   80f3c:	682d      	ldr	r5, [r5, #0]
   80f3e:	4688      	mov	r8, r1
   80f40:	4616      	mov	r6, r2
   80f42:	461f      	mov	r7, r3
   80f44:	b115      	cbz	r5, 80f4c <setvbuf+0x18>
   80f46:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80f48:	2b00      	cmp	r3, #0
   80f4a:	d04f      	beq.n	80fec <setvbuf+0xb8>
   80f4c:	2e02      	cmp	r6, #2
   80f4e:	d830      	bhi.n	80fb2 <setvbuf+0x7e>
   80f50:	2f00      	cmp	r7, #0
   80f52:	db2e      	blt.n	80fb2 <setvbuf+0x7e>
   80f54:	4628      	mov	r0, r5
   80f56:	4621      	mov	r1, r4
   80f58:	f001 f826 	bl	81fa8 <_fflush_r>
   80f5c:	89a3      	ldrh	r3, [r4, #12]
   80f5e:	2200      	movs	r2, #0
   80f60:	6062      	str	r2, [r4, #4]
   80f62:	61a2      	str	r2, [r4, #24]
   80f64:	061a      	lsls	r2, r3, #24
   80f66:	d428      	bmi.n	80fba <setvbuf+0x86>
   80f68:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80f6c:	b29b      	uxth	r3, r3
   80f6e:	2e02      	cmp	r6, #2
   80f70:	81a3      	strh	r3, [r4, #12]
   80f72:	d02d      	beq.n	80fd0 <setvbuf+0x9c>
   80f74:	f1b8 0f00 	cmp.w	r8, #0
   80f78:	d03c      	beq.n	80ff4 <setvbuf+0xc0>
   80f7a:	2e01      	cmp	r6, #1
   80f7c:	d013      	beq.n	80fa6 <setvbuf+0x72>
   80f7e:	b29b      	uxth	r3, r3
   80f80:	f003 0008 	and.w	r0, r3, #8
   80f84:	4a2a      	ldr	r2, [pc, #168]	; (81030 <setvbuf+0xfc>)
   80f86:	b280      	uxth	r0, r0
   80f88:	63ea      	str	r2, [r5, #60]	; 0x3c
   80f8a:	f8c4 8000 	str.w	r8, [r4]
   80f8e:	f8c4 8010 	str.w	r8, [r4, #16]
   80f92:	6167      	str	r7, [r4, #20]
   80f94:	b178      	cbz	r0, 80fb6 <setvbuf+0x82>
   80f96:	f013 0f03 	tst.w	r3, #3
   80f9a:	bf18      	it	ne
   80f9c:	2700      	movne	r7, #0
   80f9e:	60a7      	str	r7, [r4, #8]
   80fa0:	2000      	movs	r0, #0
   80fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fa6:	f043 0301 	orr.w	r3, r3, #1
   80faa:	427a      	negs	r2, r7
   80fac:	81a3      	strh	r3, [r4, #12]
   80fae:	61a2      	str	r2, [r4, #24]
   80fb0:	e7e5      	b.n	80f7e <setvbuf+0x4a>
   80fb2:	f04f 30ff 	mov.w	r0, #4294967295
   80fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fba:	4628      	mov	r0, r5
   80fbc:	6921      	ldr	r1, [r4, #16]
   80fbe:	f001 f953 	bl	82268 <_free_r>
   80fc2:	89a3      	ldrh	r3, [r4, #12]
   80fc4:	2e02      	cmp	r6, #2
   80fc6:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   80fca:	b29b      	uxth	r3, r3
   80fcc:	81a3      	strh	r3, [r4, #12]
   80fce:	d1d1      	bne.n	80f74 <setvbuf+0x40>
   80fd0:	2000      	movs	r0, #0
   80fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80fd6:	f043 0302 	orr.w	r3, r3, #2
   80fda:	2500      	movs	r5, #0
   80fdc:	2101      	movs	r1, #1
   80fde:	81a3      	strh	r3, [r4, #12]
   80fe0:	60a5      	str	r5, [r4, #8]
   80fe2:	6022      	str	r2, [r4, #0]
   80fe4:	6122      	str	r2, [r4, #16]
   80fe6:	6161      	str	r1, [r4, #20]
   80fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fec:	4628      	mov	r0, r5
   80fee:	f000 fff7 	bl	81fe0 <__sinit>
   80ff2:	e7ab      	b.n	80f4c <setvbuf+0x18>
   80ff4:	2f00      	cmp	r7, #0
   80ff6:	bf08      	it	eq
   80ff8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   80ffc:	4638      	mov	r0, r7
   80ffe:	f001 fc29 	bl	82854 <malloc>
   81002:	4680      	mov	r8, r0
   81004:	b128      	cbz	r0, 81012 <setvbuf+0xde>
   81006:	89a3      	ldrh	r3, [r4, #12]
   81008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8100c:	b29b      	uxth	r3, r3
   8100e:	81a3      	strh	r3, [r4, #12]
   81010:	e7b3      	b.n	80f7a <setvbuf+0x46>
   81012:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81016:	f001 fc1d 	bl	82854 <malloc>
   8101a:	4680      	mov	r8, r0
   8101c:	b918      	cbnz	r0, 81026 <setvbuf+0xf2>
   8101e:	89a3      	ldrh	r3, [r4, #12]
   81020:	f04f 30ff 	mov.w	r0, #4294967295
   81024:	e7d5      	b.n	80fd2 <setvbuf+0x9e>
   81026:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8102a:	e7ec      	b.n	81006 <setvbuf+0xd2>
   8102c:	20070568 	.word	0x20070568
   81030:	00081fd5 	.word	0x00081fd5

00081034 <__sprint_r.part.0>:
   81034:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8103a:	049c      	lsls	r4, r3, #18
   8103c:	460e      	mov	r6, r1
   8103e:	4680      	mov	r8, r0
   81040:	4691      	mov	r9, r2
   81042:	d52a      	bpl.n	8109a <__sprint_r.part.0+0x66>
   81044:	6893      	ldr	r3, [r2, #8]
   81046:	6812      	ldr	r2, [r2, #0]
   81048:	f102 0a08 	add.w	sl, r2, #8
   8104c:	b31b      	cbz	r3, 81096 <__sprint_r.part.0+0x62>
   8104e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81052:	08bf      	lsrs	r7, r7, #2
   81054:	d017      	beq.n	81086 <__sprint_r.part.0+0x52>
   81056:	3d04      	subs	r5, #4
   81058:	2400      	movs	r4, #0
   8105a:	e001      	b.n	81060 <__sprint_r.part.0+0x2c>
   8105c:	42a7      	cmp	r7, r4
   8105e:	d010      	beq.n	81082 <__sprint_r.part.0+0x4e>
   81060:	4640      	mov	r0, r8
   81062:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81066:	4632      	mov	r2, r6
   81068:	f001 f850 	bl	8210c <_fputwc_r>
   8106c:	1c43      	adds	r3, r0, #1
   8106e:	f104 0401 	add.w	r4, r4, #1
   81072:	d1f3      	bne.n	8105c <__sprint_r.part.0+0x28>
   81074:	2300      	movs	r3, #0
   81076:	f8c9 3008 	str.w	r3, [r9, #8]
   8107a:	f8c9 3004 	str.w	r3, [r9, #4]
   8107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81082:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81086:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8108a:	f8c9 3008 	str.w	r3, [r9, #8]
   8108e:	f10a 0a08 	add.w	sl, sl, #8
   81092:	2b00      	cmp	r3, #0
   81094:	d1db      	bne.n	8104e <__sprint_r.part.0+0x1a>
   81096:	2000      	movs	r0, #0
   81098:	e7ec      	b.n	81074 <__sprint_r.part.0+0x40>
   8109a:	f001 f9b1 	bl	82400 <__sfvwrite_r>
   8109e:	2300      	movs	r3, #0
   810a0:	f8c9 3008 	str.w	r3, [r9, #8]
   810a4:	f8c9 3004 	str.w	r3, [r9, #4]
   810a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000810ac <_vfiprintf_r>:
   810ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810b0:	b0b1      	sub	sp, #196	; 0xc4
   810b2:	461c      	mov	r4, r3
   810b4:	9102      	str	r1, [sp, #8]
   810b6:	4690      	mov	r8, r2
   810b8:	9308      	str	r3, [sp, #32]
   810ba:	9006      	str	r0, [sp, #24]
   810bc:	b118      	cbz	r0, 810c6 <_vfiprintf_r+0x1a>
   810be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   810c0:	2b00      	cmp	r3, #0
   810c2:	f000 80e8 	beq.w	81296 <_vfiprintf_r+0x1ea>
   810c6:	9d02      	ldr	r5, [sp, #8]
   810c8:	89ab      	ldrh	r3, [r5, #12]
   810ca:	b29a      	uxth	r2, r3
   810cc:	0490      	lsls	r0, r2, #18
   810ce:	d407      	bmi.n	810e0 <_vfiprintf_r+0x34>
   810d0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   810d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   810d6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   810da:	81ab      	strh	r3, [r5, #12]
   810dc:	b29a      	uxth	r2, r3
   810de:	6669      	str	r1, [r5, #100]	; 0x64
   810e0:	0711      	lsls	r1, r2, #28
   810e2:	f140 80b7 	bpl.w	81254 <_vfiprintf_r+0x1a8>
   810e6:	f8dd b008 	ldr.w	fp, [sp, #8]
   810ea:	f8db 3010 	ldr.w	r3, [fp, #16]
   810ee:	2b00      	cmp	r3, #0
   810f0:	f000 80b0 	beq.w	81254 <_vfiprintf_r+0x1a8>
   810f4:	f002 021a 	and.w	r2, r2, #26
   810f8:	2a0a      	cmp	r2, #10
   810fa:	f000 80b7 	beq.w	8126c <_vfiprintf_r+0x1c0>
   810fe:	2300      	movs	r3, #0
   81100:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81104:	930a      	str	r3, [sp, #40]	; 0x28
   81106:	9315      	str	r3, [sp, #84]	; 0x54
   81108:	9314      	str	r3, [sp, #80]	; 0x50
   8110a:	9309      	str	r3, [sp, #36]	; 0x24
   8110c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81110:	464e      	mov	r6, r9
   81112:	f898 3000 	ldrb.w	r3, [r8]
   81116:	2b00      	cmp	r3, #0
   81118:	f000 84c8 	beq.w	81aac <_vfiprintf_r+0xa00>
   8111c:	2b25      	cmp	r3, #37	; 0x25
   8111e:	f000 84c5 	beq.w	81aac <_vfiprintf_r+0xa00>
   81122:	f108 0201 	add.w	r2, r8, #1
   81126:	e001      	b.n	8112c <_vfiprintf_r+0x80>
   81128:	2b25      	cmp	r3, #37	; 0x25
   8112a:	d004      	beq.n	81136 <_vfiprintf_r+0x8a>
   8112c:	7813      	ldrb	r3, [r2, #0]
   8112e:	4614      	mov	r4, r2
   81130:	3201      	adds	r2, #1
   81132:	2b00      	cmp	r3, #0
   81134:	d1f8      	bne.n	81128 <_vfiprintf_r+0x7c>
   81136:	ebc8 0504 	rsb	r5, r8, r4
   8113a:	b195      	cbz	r5, 81162 <_vfiprintf_r+0xb6>
   8113c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8113e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81140:	3301      	adds	r3, #1
   81142:	442a      	add	r2, r5
   81144:	2b07      	cmp	r3, #7
   81146:	f8c6 8000 	str.w	r8, [r6]
   8114a:	6075      	str	r5, [r6, #4]
   8114c:	9215      	str	r2, [sp, #84]	; 0x54
   8114e:	9314      	str	r3, [sp, #80]	; 0x50
   81150:	dd7b      	ble.n	8124a <_vfiprintf_r+0x19e>
   81152:	2a00      	cmp	r2, #0
   81154:	f040 84d5 	bne.w	81b02 <_vfiprintf_r+0xa56>
   81158:	9809      	ldr	r0, [sp, #36]	; 0x24
   8115a:	9214      	str	r2, [sp, #80]	; 0x50
   8115c:	4428      	add	r0, r5
   8115e:	464e      	mov	r6, r9
   81160:	9009      	str	r0, [sp, #36]	; 0x24
   81162:	7823      	ldrb	r3, [r4, #0]
   81164:	2b00      	cmp	r3, #0
   81166:	f000 83ed 	beq.w	81944 <_vfiprintf_r+0x898>
   8116a:	2100      	movs	r1, #0
   8116c:	f04f 0200 	mov.w	r2, #0
   81170:	f04f 3cff 	mov.w	ip, #4294967295
   81174:	7863      	ldrb	r3, [r4, #1]
   81176:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8117a:	9104      	str	r1, [sp, #16]
   8117c:	468a      	mov	sl, r1
   8117e:	f104 0801 	add.w	r8, r4, #1
   81182:	4608      	mov	r0, r1
   81184:	4665      	mov	r5, ip
   81186:	f108 0801 	add.w	r8, r8, #1
   8118a:	f1a3 0220 	sub.w	r2, r3, #32
   8118e:	2a58      	cmp	r2, #88	; 0x58
   81190:	f200 82d9 	bhi.w	81746 <_vfiprintf_r+0x69a>
   81194:	e8df f012 	tbh	[pc, r2, lsl #1]
   81198:	02d702cb 	.word	0x02d702cb
   8119c:	02d202d7 	.word	0x02d202d7
   811a0:	02d702d7 	.word	0x02d702d7
   811a4:	02d702d7 	.word	0x02d702d7
   811a8:	02d702d7 	.word	0x02d702d7
   811ac:	028f0282 	.word	0x028f0282
   811b0:	008402d7 	.word	0x008402d7
   811b4:	02d70293 	.word	0x02d70293
   811b8:	0196012b 	.word	0x0196012b
   811bc:	01960196 	.word	0x01960196
   811c0:	01960196 	.word	0x01960196
   811c4:	01960196 	.word	0x01960196
   811c8:	01960196 	.word	0x01960196
   811cc:	02d702d7 	.word	0x02d702d7
   811d0:	02d702d7 	.word	0x02d702d7
   811d4:	02d702d7 	.word	0x02d702d7
   811d8:	02d702d7 	.word	0x02d702d7
   811dc:	02d702d7 	.word	0x02d702d7
   811e0:	02d70130 	.word	0x02d70130
   811e4:	02d702d7 	.word	0x02d702d7
   811e8:	02d702d7 	.word	0x02d702d7
   811ec:	02d702d7 	.word	0x02d702d7
   811f0:	02d702d7 	.word	0x02d702d7
   811f4:	017b02d7 	.word	0x017b02d7
   811f8:	02d702d7 	.word	0x02d702d7
   811fc:	02d702d7 	.word	0x02d702d7
   81200:	01a402d7 	.word	0x01a402d7
   81204:	02d702d7 	.word	0x02d702d7
   81208:	02d701bf 	.word	0x02d701bf
   8120c:	02d702d7 	.word	0x02d702d7
   81210:	02d702d7 	.word	0x02d702d7
   81214:	02d702d7 	.word	0x02d702d7
   81218:	02d702d7 	.word	0x02d702d7
   8121c:	01e402d7 	.word	0x01e402d7
   81220:	02d701fa 	.word	0x02d701fa
   81224:	02d702d7 	.word	0x02d702d7
   81228:	01fa0216 	.word	0x01fa0216
   8122c:	02d702d7 	.word	0x02d702d7
   81230:	02d7021b 	.word	0x02d7021b
   81234:	00890228 	.word	0x00890228
   81238:	027d0266 	.word	0x027d0266
   8123c:	023a02d7 	.word	0x023a02d7
   81240:	011902d7 	.word	0x011902d7
   81244:	02d702d7 	.word	0x02d702d7
   81248:	02af      	.short	0x02af
   8124a:	3608      	adds	r6, #8
   8124c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8124e:	4428      	add	r0, r5
   81250:	9009      	str	r0, [sp, #36]	; 0x24
   81252:	e786      	b.n	81162 <_vfiprintf_r+0xb6>
   81254:	9806      	ldr	r0, [sp, #24]
   81256:	9902      	ldr	r1, [sp, #8]
   81258:	f000 fd90 	bl	81d7c <__swsetup_r>
   8125c:	b9b0      	cbnz	r0, 8128c <_vfiprintf_r+0x1e0>
   8125e:	9d02      	ldr	r5, [sp, #8]
   81260:	89aa      	ldrh	r2, [r5, #12]
   81262:	f002 021a 	and.w	r2, r2, #26
   81266:	2a0a      	cmp	r2, #10
   81268:	f47f af49 	bne.w	810fe <_vfiprintf_r+0x52>
   8126c:	f8dd b008 	ldr.w	fp, [sp, #8]
   81270:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81274:	2b00      	cmp	r3, #0
   81276:	f6ff af42 	blt.w	810fe <_vfiprintf_r+0x52>
   8127a:	9806      	ldr	r0, [sp, #24]
   8127c:	4659      	mov	r1, fp
   8127e:	4642      	mov	r2, r8
   81280:	4623      	mov	r3, r4
   81282:	f000 fd3d 	bl	81d00 <__sbprintf>
   81286:	b031      	add	sp, #196	; 0xc4
   81288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8128c:	f04f 30ff 	mov.w	r0, #4294967295
   81290:	b031      	add	sp, #196	; 0xc4
   81292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81296:	f000 fea3 	bl	81fe0 <__sinit>
   8129a:	e714      	b.n	810c6 <_vfiprintf_r+0x1a>
   8129c:	4240      	negs	r0, r0
   8129e:	9308      	str	r3, [sp, #32]
   812a0:	f04a 0a04 	orr.w	sl, sl, #4
   812a4:	f898 3000 	ldrb.w	r3, [r8]
   812a8:	e76d      	b.n	81186 <_vfiprintf_r+0xda>
   812aa:	f01a 0320 	ands.w	r3, sl, #32
   812ae:	9004      	str	r0, [sp, #16]
   812b0:	46ac      	mov	ip, r5
   812b2:	f000 80f4 	beq.w	8149e <_vfiprintf_r+0x3f2>
   812b6:	f8dd b020 	ldr.w	fp, [sp, #32]
   812ba:	f10b 0307 	add.w	r3, fp, #7
   812be:	f023 0307 	bic.w	r3, r3, #7
   812c2:	f103 0408 	add.w	r4, r3, #8
   812c6:	9408      	str	r4, [sp, #32]
   812c8:	e9d3 4500 	ldrd	r4, r5, [r3]
   812cc:	2300      	movs	r3, #0
   812ce:	f04f 0000 	mov.w	r0, #0
   812d2:	2100      	movs	r1, #0
   812d4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   812d8:	f8cd c014 	str.w	ip, [sp, #20]
   812dc:	9107      	str	r1, [sp, #28]
   812de:	f1bc 0f00 	cmp.w	ip, #0
   812e2:	bfa8      	it	ge
   812e4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   812e8:	ea54 0205 	orrs.w	r2, r4, r5
   812ec:	f040 80ad 	bne.w	8144a <_vfiprintf_r+0x39e>
   812f0:	f1bc 0f00 	cmp.w	ip, #0
   812f4:	f040 80a9 	bne.w	8144a <_vfiprintf_r+0x39e>
   812f8:	2b00      	cmp	r3, #0
   812fa:	f040 83c0 	bne.w	81a7e <_vfiprintf_r+0x9d2>
   812fe:	f01a 0f01 	tst.w	sl, #1
   81302:	f000 83bc 	beq.w	81a7e <_vfiprintf_r+0x9d2>
   81306:	2330      	movs	r3, #48	; 0x30
   81308:	af30      	add	r7, sp, #192	; 0xc0
   8130a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8130e:	ebc7 0409 	rsb	r4, r7, r9
   81312:	9405      	str	r4, [sp, #20]
   81314:	f8dd b014 	ldr.w	fp, [sp, #20]
   81318:	9c07      	ldr	r4, [sp, #28]
   8131a:	45e3      	cmp	fp, ip
   8131c:	bfb8      	it	lt
   8131e:	46e3      	movlt	fp, ip
   81320:	f8cd b00c 	str.w	fp, [sp, #12]
   81324:	b11c      	cbz	r4, 8132e <_vfiprintf_r+0x282>
   81326:	f10b 0b01 	add.w	fp, fp, #1
   8132a:	f8cd b00c 	str.w	fp, [sp, #12]
   8132e:	f01a 0502 	ands.w	r5, sl, #2
   81332:	9507      	str	r5, [sp, #28]
   81334:	d005      	beq.n	81342 <_vfiprintf_r+0x296>
   81336:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8133a:	f10b 0b02 	add.w	fp, fp, #2
   8133e:	f8cd b00c 	str.w	fp, [sp, #12]
   81342:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   81346:	930b      	str	r3, [sp, #44]	; 0x2c
   81348:	f040 821b 	bne.w	81782 <_vfiprintf_r+0x6d6>
   8134c:	9d04      	ldr	r5, [sp, #16]
   8134e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81352:	ebcb 0405 	rsb	r4, fp, r5
   81356:	2c00      	cmp	r4, #0
   81358:	f340 8213 	ble.w	81782 <_vfiprintf_r+0x6d6>
   8135c:	2c10      	cmp	r4, #16
   8135e:	f340 8489 	ble.w	81c74 <_vfiprintf_r+0xbc8>
   81362:	4dbe      	ldr	r5, [pc, #760]	; (8165c <_vfiprintf_r+0x5b0>)
   81364:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81366:	462b      	mov	r3, r5
   81368:	9814      	ldr	r0, [sp, #80]	; 0x50
   8136a:	4625      	mov	r5, r4
   8136c:	f04f 0b10 	mov.w	fp, #16
   81370:	4664      	mov	r4, ip
   81372:	46b4      	mov	ip, r6
   81374:	461e      	mov	r6, r3
   81376:	e006      	b.n	81386 <_vfiprintf_r+0x2da>
   81378:	1c83      	adds	r3, r0, #2
   8137a:	f10c 0c08 	add.w	ip, ip, #8
   8137e:	4608      	mov	r0, r1
   81380:	3d10      	subs	r5, #16
   81382:	2d10      	cmp	r5, #16
   81384:	dd11      	ble.n	813aa <_vfiprintf_r+0x2fe>
   81386:	1c41      	adds	r1, r0, #1
   81388:	3210      	adds	r2, #16
   8138a:	2907      	cmp	r1, #7
   8138c:	9215      	str	r2, [sp, #84]	; 0x54
   8138e:	e88c 0840 	stmia.w	ip, {r6, fp}
   81392:	9114      	str	r1, [sp, #80]	; 0x50
   81394:	ddf0      	ble.n	81378 <_vfiprintf_r+0x2cc>
   81396:	2a00      	cmp	r2, #0
   81398:	f040 81e6 	bne.w	81768 <_vfiprintf_r+0x6bc>
   8139c:	3d10      	subs	r5, #16
   8139e:	2d10      	cmp	r5, #16
   813a0:	f04f 0301 	mov.w	r3, #1
   813a4:	4610      	mov	r0, r2
   813a6:	46cc      	mov	ip, r9
   813a8:	dced      	bgt.n	81386 <_vfiprintf_r+0x2da>
   813aa:	4631      	mov	r1, r6
   813ac:	4666      	mov	r6, ip
   813ae:	46a4      	mov	ip, r4
   813b0:	462c      	mov	r4, r5
   813b2:	460d      	mov	r5, r1
   813b4:	4422      	add	r2, r4
   813b6:	2b07      	cmp	r3, #7
   813b8:	9215      	str	r2, [sp, #84]	; 0x54
   813ba:	6035      	str	r5, [r6, #0]
   813bc:	6074      	str	r4, [r6, #4]
   813be:	9314      	str	r3, [sp, #80]	; 0x50
   813c0:	f300 836d 	bgt.w	81a9e <_vfiprintf_r+0x9f2>
   813c4:	3608      	adds	r6, #8
   813c6:	1c59      	adds	r1, r3, #1
   813c8:	e1de      	b.n	81788 <_vfiprintf_r+0x6dc>
   813ca:	f01a 0f20 	tst.w	sl, #32
   813ce:	9004      	str	r0, [sp, #16]
   813d0:	46ac      	mov	ip, r5
   813d2:	f000 808d 	beq.w	814f0 <_vfiprintf_r+0x444>
   813d6:	9d08      	ldr	r5, [sp, #32]
   813d8:	1deb      	adds	r3, r5, #7
   813da:	f023 0307 	bic.w	r3, r3, #7
   813de:	f103 0b08 	add.w	fp, r3, #8
   813e2:	e9d3 4500 	ldrd	r4, r5, [r3]
   813e6:	f8cd b020 	str.w	fp, [sp, #32]
   813ea:	2301      	movs	r3, #1
   813ec:	e76f      	b.n	812ce <_vfiprintf_r+0x222>
   813ee:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   813f2:	f898 3000 	ldrb.w	r3, [r8]
   813f6:	e6c6      	b.n	81186 <_vfiprintf_r+0xda>
   813f8:	f04a 0a10 	orr.w	sl, sl, #16
   813fc:	f01a 0f20 	tst.w	sl, #32
   81400:	9004      	str	r0, [sp, #16]
   81402:	46ac      	mov	ip, r5
   81404:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81408:	f000 80c8 	beq.w	8159c <_vfiprintf_r+0x4f0>
   8140c:	9c08      	ldr	r4, [sp, #32]
   8140e:	1de1      	adds	r1, r4, #7
   81410:	f021 0107 	bic.w	r1, r1, #7
   81414:	e9d1 2300 	ldrd	r2, r3, [r1]
   81418:	3108      	adds	r1, #8
   8141a:	9108      	str	r1, [sp, #32]
   8141c:	4614      	mov	r4, r2
   8141e:	461d      	mov	r5, r3
   81420:	2a00      	cmp	r2, #0
   81422:	f173 0b00 	sbcs.w	fp, r3, #0
   81426:	f2c0 83ce 	blt.w	81bc6 <_vfiprintf_r+0xb1a>
   8142a:	f1bc 0f00 	cmp.w	ip, #0
   8142e:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81432:	bfa8      	it	ge
   81434:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   81438:	ea54 0205 	orrs.w	r2, r4, r5
   8143c:	9007      	str	r0, [sp, #28]
   8143e:	f8cd c014 	str.w	ip, [sp, #20]
   81442:	f04f 0301 	mov.w	r3, #1
   81446:	f43f af53 	beq.w	812f0 <_vfiprintf_r+0x244>
   8144a:	2b01      	cmp	r3, #1
   8144c:	f000 8319 	beq.w	81a82 <_vfiprintf_r+0x9d6>
   81450:	2b02      	cmp	r3, #2
   81452:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   81456:	f040 824c 	bne.w	818f2 <_vfiprintf_r+0x846>
   8145a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8145e:	4619      	mov	r1, r3
   81460:	f004 000f 	and.w	r0, r4, #15
   81464:	0922      	lsrs	r2, r4, #4
   81466:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8146a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8146e:	092b      	lsrs	r3, r5, #4
   81470:	7008      	strb	r0, [r1, #0]
   81472:	ea52 0003 	orrs.w	r0, r2, r3
   81476:	460f      	mov	r7, r1
   81478:	4614      	mov	r4, r2
   8147a:	461d      	mov	r5, r3
   8147c:	f101 31ff 	add.w	r1, r1, #4294967295
   81480:	d1ee      	bne.n	81460 <_vfiprintf_r+0x3b4>
   81482:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   81486:	ebc7 0309 	rsb	r3, r7, r9
   8148a:	9305      	str	r3, [sp, #20]
   8148c:	e742      	b.n	81314 <_vfiprintf_r+0x268>
   8148e:	f04a 0a10 	orr.w	sl, sl, #16
   81492:	f01a 0320 	ands.w	r3, sl, #32
   81496:	9004      	str	r0, [sp, #16]
   81498:	46ac      	mov	ip, r5
   8149a:	f47f af0c 	bne.w	812b6 <_vfiprintf_r+0x20a>
   8149e:	f01a 0210 	ands.w	r2, sl, #16
   814a2:	f040 8311 	bne.w	81ac8 <_vfiprintf_r+0xa1c>
   814a6:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   814aa:	f000 830d 	beq.w	81ac8 <_vfiprintf_r+0xa1c>
   814ae:	f8dd b020 	ldr.w	fp, [sp, #32]
   814b2:	4613      	mov	r3, r2
   814b4:	f8bb 4000 	ldrh.w	r4, [fp]
   814b8:	f10b 0b04 	add.w	fp, fp, #4
   814bc:	2500      	movs	r5, #0
   814be:	f8cd b020 	str.w	fp, [sp, #32]
   814c2:	e704      	b.n	812ce <_vfiprintf_r+0x222>
   814c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814c8:	2000      	movs	r0, #0
   814ca:	f818 3b01 	ldrb.w	r3, [r8], #1
   814ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814d2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   814d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   814da:	2a09      	cmp	r2, #9
   814dc:	d9f5      	bls.n	814ca <_vfiprintf_r+0x41e>
   814de:	e654      	b.n	8118a <_vfiprintf_r+0xde>
   814e0:	f04a 0a10 	orr.w	sl, sl, #16
   814e4:	f01a 0f20 	tst.w	sl, #32
   814e8:	9004      	str	r0, [sp, #16]
   814ea:	46ac      	mov	ip, r5
   814ec:	f47f af73 	bne.w	813d6 <_vfiprintf_r+0x32a>
   814f0:	f01a 0f10 	tst.w	sl, #16
   814f4:	f040 82ef 	bne.w	81ad6 <_vfiprintf_r+0xa2a>
   814f8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   814fc:	f000 82eb 	beq.w	81ad6 <_vfiprintf_r+0xa2a>
   81500:	f8dd b020 	ldr.w	fp, [sp, #32]
   81504:	2500      	movs	r5, #0
   81506:	f8bb 4000 	ldrh.w	r4, [fp]
   8150a:	f10b 0b04 	add.w	fp, fp, #4
   8150e:	2301      	movs	r3, #1
   81510:	f8cd b020 	str.w	fp, [sp, #32]
   81514:	e6db      	b.n	812ce <_vfiprintf_r+0x222>
   81516:	46ac      	mov	ip, r5
   81518:	4d51      	ldr	r5, [pc, #324]	; (81660 <_vfiprintf_r+0x5b4>)
   8151a:	f01a 0f20 	tst.w	sl, #32
   8151e:	9004      	str	r0, [sp, #16]
   81520:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81524:	950a      	str	r5, [sp, #40]	; 0x28
   81526:	f000 80f0 	beq.w	8170a <_vfiprintf_r+0x65e>
   8152a:	9d08      	ldr	r5, [sp, #32]
   8152c:	1dea      	adds	r2, r5, #7
   8152e:	f022 0207 	bic.w	r2, r2, #7
   81532:	f102 0b08 	add.w	fp, r2, #8
   81536:	f8cd b020 	str.w	fp, [sp, #32]
   8153a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8153e:	f01a 0f01 	tst.w	sl, #1
   81542:	f000 82aa 	beq.w	81a9a <_vfiprintf_r+0x9ee>
   81546:	ea54 0b05 	orrs.w	fp, r4, r5
   8154a:	f000 82a6 	beq.w	81a9a <_vfiprintf_r+0x9ee>
   8154e:	2230      	movs	r2, #48	; 0x30
   81550:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81554:	f04a 0a02 	orr.w	sl, sl, #2
   81558:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8155c:	2302      	movs	r3, #2
   8155e:	e6b6      	b.n	812ce <_vfiprintf_r+0x222>
   81560:	9b08      	ldr	r3, [sp, #32]
   81562:	f8dd b020 	ldr.w	fp, [sp, #32]
   81566:	681b      	ldr	r3, [r3, #0]
   81568:	2401      	movs	r4, #1
   8156a:	f04f 0500 	mov.w	r5, #0
   8156e:	f10b 0b04 	add.w	fp, fp, #4
   81572:	9004      	str	r0, [sp, #16]
   81574:	9403      	str	r4, [sp, #12]
   81576:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8157a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8157e:	f8cd b020 	str.w	fp, [sp, #32]
   81582:	9405      	str	r4, [sp, #20]
   81584:	af16      	add	r7, sp, #88	; 0x58
   81586:	f04f 0c00 	mov.w	ip, #0
   8158a:	e6d0      	b.n	8132e <_vfiprintf_r+0x282>
   8158c:	f01a 0f20 	tst.w	sl, #32
   81590:	9004      	str	r0, [sp, #16]
   81592:	46ac      	mov	ip, r5
   81594:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81598:	f47f af38 	bne.w	8140c <_vfiprintf_r+0x360>
   8159c:	f01a 0f10 	tst.w	sl, #16
   815a0:	f040 82a7 	bne.w	81af2 <_vfiprintf_r+0xa46>
   815a4:	f01a 0f40 	tst.w	sl, #64	; 0x40
   815a8:	f000 82a3 	beq.w	81af2 <_vfiprintf_r+0xa46>
   815ac:	f8dd b020 	ldr.w	fp, [sp, #32]
   815b0:	f9bb 4000 	ldrsh.w	r4, [fp]
   815b4:	f10b 0b04 	add.w	fp, fp, #4
   815b8:	17e5      	asrs	r5, r4, #31
   815ba:	4622      	mov	r2, r4
   815bc:	462b      	mov	r3, r5
   815be:	f8cd b020 	str.w	fp, [sp, #32]
   815c2:	e72d      	b.n	81420 <_vfiprintf_r+0x374>
   815c4:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   815c8:	f898 3000 	ldrb.w	r3, [r8]
   815cc:	e5db      	b.n	81186 <_vfiprintf_r+0xda>
   815ce:	f898 3000 	ldrb.w	r3, [r8]
   815d2:	4642      	mov	r2, r8
   815d4:	2b6c      	cmp	r3, #108	; 0x6c
   815d6:	bf03      	ittte	eq
   815d8:	f108 0801 	addeq.w	r8, r8, #1
   815dc:	f04a 0a20 	orreq.w	sl, sl, #32
   815e0:	7853      	ldrbeq	r3, [r2, #1]
   815e2:	f04a 0a10 	orrne.w	sl, sl, #16
   815e6:	e5ce      	b.n	81186 <_vfiprintf_r+0xda>
   815e8:	f01a 0f20 	tst.w	sl, #32
   815ec:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   815f0:	f000 82f7 	beq.w	81be2 <_vfiprintf_r+0xb36>
   815f4:	9c08      	ldr	r4, [sp, #32]
   815f6:	6821      	ldr	r1, [r4, #0]
   815f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   815fa:	17e5      	asrs	r5, r4, #31
   815fc:	462b      	mov	r3, r5
   815fe:	9d08      	ldr	r5, [sp, #32]
   81600:	4622      	mov	r2, r4
   81602:	3504      	adds	r5, #4
   81604:	9508      	str	r5, [sp, #32]
   81606:	e9c1 2300 	strd	r2, r3, [r1]
   8160a:	e582      	b.n	81112 <_vfiprintf_r+0x66>
   8160c:	9c08      	ldr	r4, [sp, #32]
   8160e:	46ac      	mov	ip, r5
   81610:	6827      	ldr	r7, [r4, #0]
   81612:	f04f 0500 	mov.w	r5, #0
   81616:	9004      	str	r0, [sp, #16]
   81618:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8161c:	3404      	adds	r4, #4
   8161e:	2f00      	cmp	r7, #0
   81620:	f000 8332 	beq.w	81c88 <_vfiprintf_r+0xbdc>
   81624:	f1bc 0f00 	cmp.w	ip, #0
   81628:	4638      	mov	r0, r7
   8162a:	f2c0 8307 	blt.w	81c3c <_vfiprintf_r+0xb90>
   8162e:	4662      	mov	r2, ip
   81630:	2100      	movs	r1, #0
   81632:	f8cd c004 	str.w	ip, [sp, #4]
   81636:	f001 fbb1 	bl	82d9c <memchr>
   8163a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8163e:	2800      	cmp	r0, #0
   81640:	f000 833a 	beq.w	81cb8 <_vfiprintf_r+0xc0c>
   81644:	1bc0      	subs	r0, r0, r7
   81646:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8164a:	4560      	cmp	r0, ip
   8164c:	bfa8      	it	ge
   8164e:	4660      	movge	r0, ip
   81650:	9005      	str	r0, [sp, #20]
   81652:	9408      	str	r4, [sp, #32]
   81654:	9507      	str	r5, [sp, #28]
   81656:	f04f 0c00 	mov.w	ip, #0
   8165a:	e65b      	b.n	81314 <_vfiprintf_r+0x268>
   8165c:	00083e3c 	.word	0x00083e3c
   81660:	00083dfc 	.word	0x00083dfc
   81664:	9b08      	ldr	r3, [sp, #32]
   81666:	f8dd b020 	ldr.w	fp, [sp, #32]
   8166a:	9004      	str	r0, [sp, #16]
   8166c:	48b2      	ldr	r0, [pc, #712]	; (81938 <_vfiprintf_r+0x88c>)
   8166e:	681c      	ldr	r4, [r3, #0]
   81670:	2230      	movs	r2, #48	; 0x30
   81672:	2378      	movs	r3, #120	; 0x78
   81674:	f10b 0b04 	add.w	fp, fp, #4
   81678:	46ac      	mov	ip, r5
   8167a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8167e:	f04a 0a02 	orr.w	sl, sl, #2
   81682:	f8cd b020 	str.w	fp, [sp, #32]
   81686:	2500      	movs	r5, #0
   81688:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8168c:	900a      	str	r0, [sp, #40]	; 0x28
   8168e:	2302      	movs	r3, #2
   81690:	e61d      	b.n	812ce <_vfiprintf_r+0x222>
   81692:	f04a 0a20 	orr.w	sl, sl, #32
   81696:	f898 3000 	ldrb.w	r3, [r8]
   8169a:	e574      	b.n	81186 <_vfiprintf_r+0xda>
   8169c:	f8dd b020 	ldr.w	fp, [sp, #32]
   816a0:	f8db 0000 	ldr.w	r0, [fp]
   816a4:	f10b 0304 	add.w	r3, fp, #4
   816a8:	2800      	cmp	r0, #0
   816aa:	f6ff adf7 	blt.w	8129c <_vfiprintf_r+0x1f0>
   816ae:	9308      	str	r3, [sp, #32]
   816b0:	f898 3000 	ldrb.w	r3, [r8]
   816b4:	e567      	b.n	81186 <_vfiprintf_r+0xda>
   816b6:	f898 3000 	ldrb.w	r3, [r8]
   816ba:	212b      	movs	r1, #43	; 0x2b
   816bc:	e563      	b.n	81186 <_vfiprintf_r+0xda>
   816be:	f898 3000 	ldrb.w	r3, [r8]
   816c2:	f108 0401 	add.w	r4, r8, #1
   816c6:	2b2a      	cmp	r3, #42	; 0x2a
   816c8:	f000 8305 	beq.w	81cd6 <_vfiprintf_r+0xc2a>
   816cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816d0:	2a09      	cmp	r2, #9
   816d2:	bf98      	it	ls
   816d4:	2500      	movls	r5, #0
   816d6:	f200 82fa 	bhi.w	81cce <_vfiprintf_r+0xc22>
   816da:	f814 3b01 	ldrb.w	r3, [r4], #1
   816de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   816e2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   816e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   816ea:	2a09      	cmp	r2, #9
   816ec:	d9f5      	bls.n	816da <_vfiprintf_r+0x62e>
   816ee:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   816f2:	46a0      	mov	r8, r4
   816f4:	e549      	b.n	8118a <_vfiprintf_r+0xde>
   816f6:	4c90      	ldr	r4, [pc, #576]	; (81938 <_vfiprintf_r+0x88c>)
   816f8:	f01a 0f20 	tst.w	sl, #32
   816fc:	9004      	str	r0, [sp, #16]
   816fe:	46ac      	mov	ip, r5
   81700:	940a      	str	r4, [sp, #40]	; 0x28
   81702:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81706:	f47f af10 	bne.w	8152a <_vfiprintf_r+0x47e>
   8170a:	f01a 0f10 	tst.w	sl, #16
   8170e:	f040 81ea 	bne.w	81ae6 <_vfiprintf_r+0xa3a>
   81712:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81716:	f000 81e6 	beq.w	81ae6 <_vfiprintf_r+0xa3a>
   8171a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8171e:	2500      	movs	r5, #0
   81720:	f8bb 4000 	ldrh.w	r4, [fp]
   81724:	f10b 0b04 	add.w	fp, fp, #4
   81728:	f8cd b020 	str.w	fp, [sp, #32]
   8172c:	e707      	b.n	8153e <_vfiprintf_r+0x492>
   8172e:	f898 3000 	ldrb.w	r3, [r8]
   81732:	2900      	cmp	r1, #0
   81734:	f47f ad27 	bne.w	81186 <_vfiprintf_r+0xda>
   81738:	2120      	movs	r1, #32
   8173a:	e524      	b.n	81186 <_vfiprintf_r+0xda>
   8173c:	f04a 0a01 	orr.w	sl, sl, #1
   81740:	f898 3000 	ldrb.w	r3, [r8]
   81744:	e51f      	b.n	81186 <_vfiprintf_r+0xda>
   81746:	9004      	str	r0, [sp, #16]
   81748:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8174c:	2b00      	cmp	r3, #0
   8174e:	f000 80f9 	beq.w	81944 <_vfiprintf_r+0x898>
   81752:	2501      	movs	r5, #1
   81754:	f04f 0b00 	mov.w	fp, #0
   81758:	9503      	str	r5, [sp, #12]
   8175a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8175e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81762:	9505      	str	r5, [sp, #20]
   81764:	af16      	add	r7, sp, #88	; 0x58
   81766:	e70e      	b.n	81586 <_vfiprintf_r+0x4da>
   81768:	9806      	ldr	r0, [sp, #24]
   8176a:	9902      	ldr	r1, [sp, #8]
   8176c:	aa13      	add	r2, sp, #76	; 0x4c
   8176e:	f7ff fc61 	bl	81034 <__sprint_r.part.0>
   81772:	2800      	cmp	r0, #0
   81774:	f040 80ed 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81778:	9814      	ldr	r0, [sp, #80]	; 0x50
   8177a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8177c:	1c43      	adds	r3, r0, #1
   8177e:	46cc      	mov	ip, r9
   81780:	e5fe      	b.n	81380 <_vfiprintf_r+0x2d4>
   81782:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81784:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81786:	1c59      	adds	r1, r3, #1
   81788:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8178c:	b168      	cbz	r0, 817aa <_vfiprintf_r+0x6fe>
   8178e:	3201      	adds	r2, #1
   81790:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81794:	2301      	movs	r3, #1
   81796:	2907      	cmp	r1, #7
   81798:	9215      	str	r2, [sp, #84]	; 0x54
   8179a:	9114      	str	r1, [sp, #80]	; 0x50
   8179c:	e886 0009 	stmia.w	r6, {r0, r3}
   817a0:	f300 8160 	bgt.w	81a64 <_vfiprintf_r+0x9b8>
   817a4:	460b      	mov	r3, r1
   817a6:	3608      	adds	r6, #8
   817a8:	3101      	adds	r1, #1
   817aa:	9c07      	ldr	r4, [sp, #28]
   817ac:	b164      	cbz	r4, 817c8 <_vfiprintf_r+0x71c>
   817ae:	3202      	adds	r2, #2
   817b0:	a812      	add	r0, sp, #72	; 0x48
   817b2:	2302      	movs	r3, #2
   817b4:	2907      	cmp	r1, #7
   817b6:	9215      	str	r2, [sp, #84]	; 0x54
   817b8:	9114      	str	r1, [sp, #80]	; 0x50
   817ba:	e886 0009 	stmia.w	r6, {r0, r3}
   817be:	f300 8157 	bgt.w	81a70 <_vfiprintf_r+0x9c4>
   817c2:	460b      	mov	r3, r1
   817c4:	3608      	adds	r6, #8
   817c6:	3101      	adds	r1, #1
   817c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   817ca:	2d80      	cmp	r5, #128	; 0x80
   817cc:	f000 8101 	beq.w	819d2 <_vfiprintf_r+0x926>
   817d0:	9d05      	ldr	r5, [sp, #20]
   817d2:	ebc5 040c 	rsb	r4, r5, ip
   817d6:	2c00      	cmp	r4, #0
   817d8:	dd2f      	ble.n	8183a <_vfiprintf_r+0x78e>
   817da:	2c10      	cmp	r4, #16
   817dc:	4d57      	ldr	r5, [pc, #348]	; (8193c <_vfiprintf_r+0x890>)
   817de:	dd22      	ble.n	81826 <_vfiprintf_r+0x77a>
   817e0:	4630      	mov	r0, r6
   817e2:	f04f 0b10 	mov.w	fp, #16
   817e6:	462e      	mov	r6, r5
   817e8:	4625      	mov	r5, r4
   817ea:	9c06      	ldr	r4, [sp, #24]
   817ec:	e006      	b.n	817fc <_vfiprintf_r+0x750>
   817ee:	f103 0c02 	add.w	ip, r3, #2
   817f2:	3008      	adds	r0, #8
   817f4:	460b      	mov	r3, r1
   817f6:	3d10      	subs	r5, #16
   817f8:	2d10      	cmp	r5, #16
   817fa:	dd10      	ble.n	8181e <_vfiprintf_r+0x772>
   817fc:	1c59      	adds	r1, r3, #1
   817fe:	3210      	adds	r2, #16
   81800:	2907      	cmp	r1, #7
   81802:	9215      	str	r2, [sp, #84]	; 0x54
   81804:	e880 0840 	stmia.w	r0, {r6, fp}
   81808:	9114      	str	r1, [sp, #80]	; 0x50
   8180a:	ddf0      	ble.n	817ee <_vfiprintf_r+0x742>
   8180c:	2a00      	cmp	r2, #0
   8180e:	d163      	bne.n	818d8 <_vfiprintf_r+0x82c>
   81810:	3d10      	subs	r5, #16
   81812:	2d10      	cmp	r5, #16
   81814:	f04f 0c01 	mov.w	ip, #1
   81818:	4613      	mov	r3, r2
   8181a:	4648      	mov	r0, r9
   8181c:	dcee      	bgt.n	817fc <_vfiprintf_r+0x750>
   8181e:	462c      	mov	r4, r5
   81820:	4661      	mov	r1, ip
   81822:	4635      	mov	r5, r6
   81824:	4606      	mov	r6, r0
   81826:	4422      	add	r2, r4
   81828:	2907      	cmp	r1, #7
   8182a:	9215      	str	r2, [sp, #84]	; 0x54
   8182c:	6035      	str	r5, [r6, #0]
   8182e:	6074      	str	r4, [r6, #4]
   81830:	9114      	str	r1, [sp, #80]	; 0x50
   81832:	f300 80c1 	bgt.w	819b8 <_vfiprintf_r+0x90c>
   81836:	3608      	adds	r6, #8
   81838:	3101      	adds	r1, #1
   8183a:	9d05      	ldr	r5, [sp, #20]
   8183c:	2907      	cmp	r1, #7
   8183e:	442a      	add	r2, r5
   81840:	9215      	str	r2, [sp, #84]	; 0x54
   81842:	6037      	str	r7, [r6, #0]
   81844:	6075      	str	r5, [r6, #4]
   81846:	9114      	str	r1, [sp, #80]	; 0x50
   81848:	f340 80c1 	ble.w	819ce <_vfiprintf_r+0x922>
   8184c:	2a00      	cmp	r2, #0
   8184e:	f040 8130 	bne.w	81ab2 <_vfiprintf_r+0xa06>
   81852:	9214      	str	r2, [sp, #80]	; 0x50
   81854:	464e      	mov	r6, r9
   81856:	f01a 0f04 	tst.w	sl, #4
   8185a:	f000 808b 	beq.w	81974 <_vfiprintf_r+0x8c8>
   8185e:	9d04      	ldr	r5, [sp, #16]
   81860:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81864:	ebcb 0405 	rsb	r4, fp, r5
   81868:	2c00      	cmp	r4, #0
   8186a:	f340 8083 	ble.w	81974 <_vfiprintf_r+0x8c8>
   8186e:	2c10      	cmp	r4, #16
   81870:	f340 821e 	ble.w	81cb0 <_vfiprintf_r+0xc04>
   81874:	9914      	ldr	r1, [sp, #80]	; 0x50
   81876:	4d32      	ldr	r5, [pc, #200]	; (81940 <_vfiprintf_r+0x894>)
   81878:	2710      	movs	r7, #16
   8187a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8187e:	f8dd b008 	ldr.w	fp, [sp, #8]
   81882:	e005      	b.n	81890 <_vfiprintf_r+0x7e4>
   81884:	1c88      	adds	r0, r1, #2
   81886:	3608      	adds	r6, #8
   81888:	4619      	mov	r1, r3
   8188a:	3c10      	subs	r4, #16
   8188c:	2c10      	cmp	r4, #16
   8188e:	dd10      	ble.n	818b2 <_vfiprintf_r+0x806>
   81890:	1c4b      	adds	r3, r1, #1
   81892:	3210      	adds	r2, #16
   81894:	2b07      	cmp	r3, #7
   81896:	9215      	str	r2, [sp, #84]	; 0x54
   81898:	e886 00a0 	stmia.w	r6, {r5, r7}
   8189c:	9314      	str	r3, [sp, #80]	; 0x50
   8189e:	ddf1      	ble.n	81884 <_vfiprintf_r+0x7d8>
   818a0:	2a00      	cmp	r2, #0
   818a2:	d17d      	bne.n	819a0 <_vfiprintf_r+0x8f4>
   818a4:	3c10      	subs	r4, #16
   818a6:	2c10      	cmp	r4, #16
   818a8:	f04f 0001 	mov.w	r0, #1
   818ac:	4611      	mov	r1, r2
   818ae:	464e      	mov	r6, r9
   818b0:	dcee      	bgt.n	81890 <_vfiprintf_r+0x7e4>
   818b2:	4422      	add	r2, r4
   818b4:	2807      	cmp	r0, #7
   818b6:	9215      	str	r2, [sp, #84]	; 0x54
   818b8:	6035      	str	r5, [r6, #0]
   818ba:	6074      	str	r4, [r6, #4]
   818bc:	9014      	str	r0, [sp, #80]	; 0x50
   818be:	dd59      	ble.n	81974 <_vfiprintf_r+0x8c8>
   818c0:	2a00      	cmp	r2, #0
   818c2:	d14f      	bne.n	81964 <_vfiprintf_r+0x8b8>
   818c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   818c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   818ca:	9d04      	ldr	r5, [sp, #16]
   818cc:	45ab      	cmp	fp, r5
   818ce:	bfac      	ite	ge
   818d0:	445c      	addge	r4, fp
   818d2:	1964      	addlt	r4, r4, r5
   818d4:	9409      	str	r4, [sp, #36]	; 0x24
   818d6:	e05e      	b.n	81996 <_vfiprintf_r+0x8ea>
   818d8:	4620      	mov	r0, r4
   818da:	9902      	ldr	r1, [sp, #8]
   818dc:	aa13      	add	r2, sp, #76	; 0x4c
   818de:	f7ff fba9 	bl	81034 <__sprint_r.part.0>
   818e2:	2800      	cmp	r0, #0
   818e4:	d135      	bne.n	81952 <_vfiprintf_r+0x8a6>
   818e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   818e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   818ea:	f103 0c01 	add.w	ip, r3, #1
   818ee:	4648      	mov	r0, r9
   818f0:	e781      	b.n	817f6 <_vfiprintf_r+0x74a>
   818f2:	08e0      	lsrs	r0, r4, #3
   818f4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   818f8:	f004 0207 	and.w	r2, r4, #7
   818fc:	08e9      	lsrs	r1, r5, #3
   818fe:	3230      	adds	r2, #48	; 0x30
   81900:	ea50 0b01 	orrs.w	fp, r0, r1
   81904:	461f      	mov	r7, r3
   81906:	701a      	strb	r2, [r3, #0]
   81908:	4604      	mov	r4, r0
   8190a:	460d      	mov	r5, r1
   8190c:	f103 33ff 	add.w	r3, r3, #4294967295
   81910:	d1ef      	bne.n	818f2 <_vfiprintf_r+0x846>
   81912:	f01a 0f01 	tst.w	sl, #1
   81916:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   8191a:	4639      	mov	r1, r7
   8191c:	f000 80b9 	beq.w	81a92 <_vfiprintf_r+0x9e6>
   81920:	2a30      	cmp	r2, #48	; 0x30
   81922:	f43f acf4 	beq.w	8130e <_vfiprintf_r+0x262>
   81926:	461f      	mov	r7, r3
   81928:	ebc7 0509 	rsb	r5, r7, r9
   8192c:	2330      	movs	r3, #48	; 0x30
   8192e:	9505      	str	r5, [sp, #20]
   81930:	f801 3c01 	strb.w	r3, [r1, #-1]
   81934:	e4ee      	b.n	81314 <_vfiprintf_r+0x268>
   81936:	bf00      	nop
   81938:	00083e10 	.word	0x00083e10
   8193c:	00083e2c 	.word	0x00083e2c
   81940:	00083e3c 	.word	0x00083e3c
   81944:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81946:	b123      	cbz	r3, 81952 <_vfiprintf_r+0x8a6>
   81948:	9806      	ldr	r0, [sp, #24]
   8194a:	9902      	ldr	r1, [sp, #8]
   8194c:	aa13      	add	r2, sp, #76	; 0x4c
   8194e:	f7ff fb71 	bl	81034 <__sprint_r.part.0>
   81952:	9c02      	ldr	r4, [sp, #8]
   81954:	89a3      	ldrh	r3, [r4, #12]
   81956:	065b      	lsls	r3, r3, #25
   81958:	f53f ac98 	bmi.w	8128c <_vfiprintf_r+0x1e0>
   8195c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8195e:	b031      	add	sp, #196	; 0xc4
   81960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81964:	9806      	ldr	r0, [sp, #24]
   81966:	9902      	ldr	r1, [sp, #8]
   81968:	aa13      	add	r2, sp, #76	; 0x4c
   8196a:	f7ff fb63 	bl	81034 <__sprint_r.part.0>
   8196e:	2800      	cmp	r0, #0
   81970:	d1ef      	bne.n	81952 <_vfiprintf_r+0x8a6>
   81972:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81974:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81976:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8197a:	9d04      	ldr	r5, [sp, #16]
   8197c:	45ab      	cmp	fp, r5
   8197e:	bfac      	ite	ge
   81980:	445c      	addge	r4, fp
   81982:	1964      	addlt	r4, r4, r5
   81984:	9409      	str	r4, [sp, #36]	; 0x24
   81986:	b132      	cbz	r2, 81996 <_vfiprintf_r+0x8ea>
   81988:	9806      	ldr	r0, [sp, #24]
   8198a:	9902      	ldr	r1, [sp, #8]
   8198c:	aa13      	add	r2, sp, #76	; 0x4c
   8198e:	f7ff fb51 	bl	81034 <__sprint_r.part.0>
   81992:	2800      	cmp	r0, #0
   81994:	d1dd      	bne.n	81952 <_vfiprintf_r+0x8a6>
   81996:	2000      	movs	r0, #0
   81998:	9014      	str	r0, [sp, #80]	; 0x50
   8199a:	464e      	mov	r6, r9
   8199c:	f7ff bbb9 	b.w	81112 <_vfiprintf_r+0x66>
   819a0:	4650      	mov	r0, sl
   819a2:	4659      	mov	r1, fp
   819a4:	aa13      	add	r2, sp, #76	; 0x4c
   819a6:	f7ff fb45 	bl	81034 <__sprint_r.part.0>
   819aa:	2800      	cmp	r0, #0
   819ac:	d1d1      	bne.n	81952 <_vfiprintf_r+0x8a6>
   819ae:	9914      	ldr	r1, [sp, #80]	; 0x50
   819b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   819b2:	1c48      	adds	r0, r1, #1
   819b4:	464e      	mov	r6, r9
   819b6:	e768      	b.n	8188a <_vfiprintf_r+0x7de>
   819b8:	2a00      	cmp	r2, #0
   819ba:	f040 80f7 	bne.w	81bac <_vfiprintf_r+0xb00>
   819be:	9c05      	ldr	r4, [sp, #20]
   819c0:	2301      	movs	r3, #1
   819c2:	9720      	str	r7, [sp, #128]	; 0x80
   819c4:	9421      	str	r4, [sp, #132]	; 0x84
   819c6:	9415      	str	r4, [sp, #84]	; 0x54
   819c8:	4622      	mov	r2, r4
   819ca:	9314      	str	r3, [sp, #80]	; 0x50
   819cc:	464e      	mov	r6, r9
   819ce:	3608      	adds	r6, #8
   819d0:	e741      	b.n	81856 <_vfiprintf_r+0x7aa>
   819d2:	9d04      	ldr	r5, [sp, #16]
   819d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   819d8:	ebcb 0405 	rsb	r4, fp, r5
   819dc:	2c00      	cmp	r4, #0
   819de:	f77f aef7 	ble.w	817d0 <_vfiprintf_r+0x724>
   819e2:	2c10      	cmp	r4, #16
   819e4:	4da6      	ldr	r5, [pc, #664]	; (81c80 <_vfiprintf_r+0xbd4>)
   819e6:	f340 8170 	ble.w	81cca <_vfiprintf_r+0xc1e>
   819ea:	4629      	mov	r1, r5
   819ec:	f04f 0b10 	mov.w	fp, #16
   819f0:	4625      	mov	r5, r4
   819f2:	4664      	mov	r4, ip
   819f4:	46b4      	mov	ip, r6
   819f6:	460e      	mov	r6, r1
   819f8:	e006      	b.n	81a08 <_vfiprintf_r+0x95c>
   819fa:	1c98      	adds	r0, r3, #2
   819fc:	f10c 0c08 	add.w	ip, ip, #8
   81a00:	460b      	mov	r3, r1
   81a02:	3d10      	subs	r5, #16
   81a04:	2d10      	cmp	r5, #16
   81a06:	dd0f      	ble.n	81a28 <_vfiprintf_r+0x97c>
   81a08:	1c59      	adds	r1, r3, #1
   81a0a:	3210      	adds	r2, #16
   81a0c:	2907      	cmp	r1, #7
   81a0e:	9215      	str	r2, [sp, #84]	; 0x54
   81a10:	e88c 0840 	stmia.w	ip, {r6, fp}
   81a14:	9114      	str	r1, [sp, #80]	; 0x50
   81a16:	ddf0      	ble.n	819fa <_vfiprintf_r+0x94e>
   81a18:	b9ba      	cbnz	r2, 81a4a <_vfiprintf_r+0x99e>
   81a1a:	3d10      	subs	r5, #16
   81a1c:	2d10      	cmp	r5, #16
   81a1e:	f04f 0001 	mov.w	r0, #1
   81a22:	4613      	mov	r3, r2
   81a24:	46cc      	mov	ip, r9
   81a26:	dcef      	bgt.n	81a08 <_vfiprintf_r+0x95c>
   81a28:	4633      	mov	r3, r6
   81a2a:	4666      	mov	r6, ip
   81a2c:	46a4      	mov	ip, r4
   81a2e:	462c      	mov	r4, r5
   81a30:	461d      	mov	r5, r3
   81a32:	4422      	add	r2, r4
   81a34:	2807      	cmp	r0, #7
   81a36:	9215      	str	r2, [sp, #84]	; 0x54
   81a38:	6035      	str	r5, [r6, #0]
   81a3a:	6074      	str	r4, [r6, #4]
   81a3c:	9014      	str	r0, [sp, #80]	; 0x50
   81a3e:	f300 80af 	bgt.w	81ba0 <_vfiprintf_r+0xaf4>
   81a42:	3608      	adds	r6, #8
   81a44:	1c41      	adds	r1, r0, #1
   81a46:	4603      	mov	r3, r0
   81a48:	e6c2      	b.n	817d0 <_vfiprintf_r+0x724>
   81a4a:	9806      	ldr	r0, [sp, #24]
   81a4c:	9902      	ldr	r1, [sp, #8]
   81a4e:	aa13      	add	r2, sp, #76	; 0x4c
   81a50:	f7ff faf0 	bl	81034 <__sprint_r.part.0>
   81a54:	2800      	cmp	r0, #0
   81a56:	f47f af7c 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81a5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a5e:	1c58      	adds	r0, r3, #1
   81a60:	46cc      	mov	ip, r9
   81a62:	e7ce      	b.n	81a02 <_vfiprintf_r+0x956>
   81a64:	2a00      	cmp	r2, #0
   81a66:	d179      	bne.n	81b5c <_vfiprintf_r+0xab0>
   81a68:	4619      	mov	r1, r3
   81a6a:	464e      	mov	r6, r9
   81a6c:	4613      	mov	r3, r2
   81a6e:	e69c      	b.n	817aa <_vfiprintf_r+0x6fe>
   81a70:	2a00      	cmp	r2, #0
   81a72:	f040 8084 	bne.w	81b7e <_vfiprintf_r+0xad2>
   81a76:	2101      	movs	r1, #1
   81a78:	4613      	mov	r3, r2
   81a7a:	464e      	mov	r6, r9
   81a7c:	e6a4      	b.n	817c8 <_vfiprintf_r+0x71c>
   81a7e:	464f      	mov	r7, r9
   81a80:	e448      	b.n	81314 <_vfiprintf_r+0x268>
   81a82:	2d00      	cmp	r5, #0
   81a84:	bf08      	it	eq
   81a86:	2c0a      	cmpeq	r4, #10
   81a88:	d246      	bcs.n	81b18 <_vfiprintf_r+0xa6c>
   81a8a:	3430      	adds	r4, #48	; 0x30
   81a8c:	af30      	add	r7, sp, #192	; 0xc0
   81a8e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81a92:	ebc7 0309 	rsb	r3, r7, r9
   81a96:	9305      	str	r3, [sp, #20]
   81a98:	e43c      	b.n	81314 <_vfiprintf_r+0x268>
   81a9a:	2302      	movs	r3, #2
   81a9c:	e417      	b.n	812ce <_vfiprintf_r+0x222>
   81a9e:	2a00      	cmp	r2, #0
   81aa0:	f040 80af 	bne.w	81c02 <_vfiprintf_r+0xb56>
   81aa4:	4613      	mov	r3, r2
   81aa6:	2101      	movs	r1, #1
   81aa8:	464e      	mov	r6, r9
   81aaa:	e66d      	b.n	81788 <_vfiprintf_r+0x6dc>
   81aac:	4644      	mov	r4, r8
   81aae:	f7ff bb58 	b.w	81162 <_vfiprintf_r+0xb6>
   81ab2:	9806      	ldr	r0, [sp, #24]
   81ab4:	9902      	ldr	r1, [sp, #8]
   81ab6:	aa13      	add	r2, sp, #76	; 0x4c
   81ab8:	f7ff fabc 	bl	81034 <__sprint_r.part.0>
   81abc:	2800      	cmp	r0, #0
   81abe:	f47f af48 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81ac2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ac4:	464e      	mov	r6, r9
   81ac6:	e6c6      	b.n	81856 <_vfiprintf_r+0x7aa>
   81ac8:	9d08      	ldr	r5, [sp, #32]
   81aca:	682c      	ldr	r4, [r5, #0]
   81acc:	3504      	adds	r5, #4
   81ace:	9508      	str	r5, [sp, #32]
   81ad0:	2500      	movs	r5, #0
   81ad2:	f7ff bbfc 	b.w	812ce <_vfiprintf_r+0x222>
   81ad6:	9d08      	ldr	r5, [sp, #32]
   81ad8:	2301      	movs	r3, #1
   81ada:	682c      	ldr	r4, [r5, #0]
   81adc:	3504      	adds	r5, #4
   81ade:	9508      	str	r5, [sp, #32]
   81ae0:	2500      	movs	r5, #0
   81ae2:	f7ff bbf4 	b.w	812ce <_vfiprintf_r+0x222>
   81ae6:	9d08      	ldr	r5, [sp, #32]
   81ae8:	682c      	ldr	r4, [r5, #0]
   81aea:	3504      	adds	r5, #4
   81aec:	9508      	str	r5, [sp, #32]
   81aee:	2500      	movs	r5, #0
   81af0:	e525      	b.n	8153e <_vfiprintf_r+0x492>
   81af2:	9d08      	ldr	r5, [sp, #32]
   81af4:	682c      	ldr	r4, [r5, #0]
   81af6:	3504      	adds	r5, #4
   81af8:	9508      	str	r5, [sp, #32]
   81afa:	17e5      	asrs	r5, r4, #31
   81afc:	4622      	mov	r2, r4
   81afe:	462b      	mov	r3, r5
   81b00:	e48e      	b.n	81420 <_vfiprintf_r+0x374>
   81b02:	9806      	ldr	r0, [sp, #24]
   81b04:	9902      	ldr	r1, [sp, #8]
   81b06:	aa13      	add	r2, sp, #76	; 0x4c
   81b08:	f7ff fa94 	bl	81034 <__sprint_r.part.0>
   81b0c:	2800      	cmp	r0, #0
   81b0e:	f47f af20 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81b12:	464e      	mov	r6, r9
   81b14:	f7ff bb9a 	b.w	8124c <_vfiprintf_r+0x1a0>
   81b18:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81b1c:	9603      	str	r6, [sp, #12]
   81b1e:	465e      	mov	r6, fp
   81b20:	46e3      	mov	fp, ip
   81b22:	4620      	mov	r0, r4
   81b24:	4629      	mov	r1, r5
   81b26:	220a      	movs	r2, #10
   81b28:	2300      	movs	r3, #0
   81b2a:	f001 fe5f 	bl	837ec <__aeabi_uldivmod>
   81b2e:	3230      	adds	r2, #48	; 0x30
   81b30:	7032      	strb	r2, [r6, #0]
   81b32:	4620      	mov	r0, r4
   81b34:	4629      	mov	r1, r5
   81b36:	220a      	movs	r2, #10
   81b38:	2300      	movs	r3, #0
   81b3a:	f001 fe57 	bl	837ec <__aeabi_uldivmod>
   81b3e:	4604      	mov	r4, r0
   81b40:	460d      	mov	r5, r1
   81b42:	ea54 0005 	orrs.w	r0, r4, r5
   81b46:	4637      	mov	r7, r6
   81b48:	f106 36ff 	add.w	r6, r6, #4294967295
   81b4c:	d1e9      	bne.n	81b22 <_vfiprintf_r+0xa76>
   81b4e:	ebc7 0309 	rsb	r3, r7, r9
   81b52:	46dc      	mov	ip, fp
   81b54:	9e03      	ldr	r6, [sp, #12]
   81b56:	9305      	str	r3, [sp, #20]
   81b58:	f7ff bbdc 	b.w	81314 <_vfiprintf_r+0x268>
   81b5c:	9806      	ldr	r0, [sp, #24]
   81b5e:	9902      	ldr	r1, [sp, #8]
   81b60:	aa13      	add	r2, sp, #76	; 0x4c
   81b62:	f8cd c004 	str.w	ip, [sp, #4]
   81b66:	f7ff fa65 	bl	81034 <__sprint_r.part.0>
   81b6a:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b6e:	2800      	cmp	r0, #0
   81b70:	f47f aeef 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81b74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b76:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b78:	1c59      	adds	r1, r3, #1
   81b7a:	464e      	mov	r6, r9
   81b7c:	e615      	b.n	817aa <_vfiprintf_r+0x6fe>
   81b7e:	9806      	ldr	r0, [sp, #24]
   81b80:	9902      	ldr	r1, [sp, #8]
   81b82:	aa13      	add	r2, sp, #76	; 0x4c
   81b84:	f8cd c004 	str.w	ip, [sp, #4]
   81b88:	f7ff fa54 	bl	81034 <__sprint_r.part.0>
   81b8c:	f8dd c004 	ldr.w	ip, [sp, #4]
   81b90:	2800      	cmp	r0, #0
   81b92:	f47f aede 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81b98:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81b9a:	1c59      	adds	r1, r3, #1
   81b9c:	464e      	mov	r6, r9
   81b9e:	e613      	b.n	817c8 <_vfiprintf_r+0x71c>
   81ba0:	2a00      	cmp	r2, #0
   81ba2:	d156      	bne.n	81c52 <_vfiprintf_r+0xba6>
   81ba4:	2101      	movs	r1, #1
   81ba6:	4613      	mov	r3, r2
   81ba8:	464e      	mov	r6, r9
   81baa:	e611      	b.n	817d0 <_vfiprintf_r+0x724>
   81bac:	9806      	ldr	r0, [sp, #24]
   81bae:	9902      	ldr	r1, [sp, #8]
   81bb0:	aa13      	add	r2, sp, #76	; 0x4c
   81bb2:	f7ff fa3f 	bl	81034 <__sprint_r.part.0>
   81bb6:	2800      	cmp	r0, #0
   81bb8:	f47f aecb 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81bbc:	9914      	ldr	r1, [sp, #80]	; 0x50
   81bbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bc0:	3101      	adds	r1, #1
   81bc2:	464e      	mov	r6, r9
   81bc4:	e639      	b.n	8183a <_vfiprintf_r+0x78e>
   81bc6:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81bca:	4264      	negs	r4, r4
   81bcc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81bd0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81bd4:	f8cd b01c 	str.w	fp, [sp, #28]
   81bd8:	f8cd c014 	str.w	ip, [sp, #20]
   81bdc:	2301      	movs	r3, #1
   81bde:	f7ff bb7e 	b.w	812de <_vfiprintf_r+0x232>
   81be2:	f01a 0f10 	tst.w	sl, #16
   81be6:	d11d      	bne.n	81c24 <_vfiprintf_r+0xb78>
   81be8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81bec:	d058      	beq.n	81ca0 <_vfiprintf_r+0xbf4>
   81bee:	9d08      	ldr	r5, [sp, #32]
   81bf0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81bf4:	682b      	ldr	r3, [r5, #0]
   81bf6:	3504      	adds	r5, #4
   81bf8:	9508      	str	r5, [sp, #32]
   81bfa:	f8a3 b000 	strh.w	fp, [r3]
   81bfe:	f7ff ba88 	b.w	81112 <_vfiprintf_r+0x66>
   81c02:	9806      	ldr	r0, [sp, #24]
   81c04:	9902      	ldr	r1, [sp, #8]
   81c06:	aa13      	add	r2, sp, #76	; 0x4c
   81c08:	f8cd c004 	str.w	ip, [sp, #4]
   81c0c:	f7ff fa12 	bl	81034 <__sprint_r.part.0>
   81c10:	f8dd c004 	ldr.w	ip, [sp, #4]
   81c14:	2800      	cmp	r0, #0
   81c16:	f47f ae9c 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81c1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c1e:	1c59      	adds	r1, r3, #1
   81c20:	464e      	mov	r6, r9
   81c22:	e5b1      	b.n	81788 <_vfiprintf_r+0x6dc>
   81c24:	f8dd b020 	ldr.w	fp, [sp, #32]
   81c28:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81c2a:	f8db 3000 	ldr.w	r3, [fp]
   81c2e:	f10b 0b04 	add.w	fp, fp, #4
   81c32:	f8cd b020 	str.w	fp, [sp, #32]
   81c36:	601c      	str	r4, [r3, #0]
   81c38:	f7ff ba6b 	b.w	81112 <_vfiprintf_r+0x66>
   81c3c:	9408      	str	r4, [sp, #32]
   81c3e:	f001 fc0b 	bl	83458 <strlen>
   81c42:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81c46:	9005      	str	r0, [sp, #20]
   81c48:	9407      	str	r4, [sp, #28]
   81c4a:	f04f 0c00 	mov.w	ip, #0
   81c4e:	f7ff bb61 	b.w	81314 <_vfiprintf_r+0x268>
   81c52:	9806      	ldr	r0, [sp, #24]
   81c54:	9902      	ldr	r1, [sp, #8]
   81c56:	aa13      	add	r2, sp, #76	; 0x4c
   81c58:	f8cd c004 	str.w	ip, [sp, #4]
   81c5c:	f7ff f9ea 	bl	81034 <__sprint_r.part.0>
   81c60:	f8dd c004 	ldr.w	ip, [sp, #4]
   81c64:	2800      	cmp	r0, #0
   81c66:	f47f ae74 	bne.w	81952 <_vfiprintf_r+0x8a6>
   81c6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c6e:	1c59      	adds	r1, r3, #1
   81c70:	464e      	mov	r6, r9
   81c72:	e5ad      	b.n	817d0 <_vfiprintf_r+0x724>
   81c74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81c76:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c78:	3301      	adds	r3, #1
   81c7a:	4d02      	ldr	r5, [pc, #8]	; (81c84 <_vfiprintf_r+0xbd8>)
   81c7c:	f7ff bb9a 	b.w	813b4 <_vfiprintf_r+0x308>
   81c80:	00083e2c 	.word	0x00083e2c
   81c84:	00083e3c 	.word	0x00083e3c
   81c88:	f1bc 0f06 	cmp.w	ip, #6
   81c8c:	bf34      	ite	cc
   81c8e:	4663      	movcc	r3, ip
   81c90:	2306      	movcs	r3, #6
   81c92:	9408      	str	r4, [sp, #32]
   81c94:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81c98:	9305      	str	r3, [sp, #20]
   81c9a:	9403      	str	r4, [sp, #12]
   81c9c:	4f16      	ldr	r7, [pc, #88]	; (81cf8 <_vfiprintf_r+0xc4c>)
   81c9e:	e472      	b.n	81586 <_vfiprintf_r+0x4da>
   81ca0:	9c08      	ldr	r4, [sp, #32]
   81ca2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81ca4:	6823      	ldr	r3, [r4, #0]
   81ca6:	3404      	adds	r4, #4
   81ca8:	9408      	str	r4, [sp, #32]
   81caa:	601d      	str	r5, [r3, #0]
   81cac:	f7ff ba31 	b.w	81112 <_vfiprintf_r+0x66>
   81cb0:	9814      	ldr	r0, [sp, #80]	; 0x50
   81cb2:	4d12      	ldr	r5, [pc, #72]	; (81cfc <_vfiprintf_r+0xc50>)
   81cb4:	3001      	adds	r0, #1
   81cb6:	e5fc      	b.n	818b2 <_vfiprintf_r+0x806>
   81cb8:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81cbc:	f8cd c014 	str.w	ip, [sp, #20]
   81cc0:	9507      	str	r5, [sp, #28]
   81cc2:	9408      	str	r4, [sp, #32]
   81cc4:	4684      	mov	ip, r0
   81cc6:	f7ff bb25 	b.w	81314 <_vfiprintf_r+0x268>
   81cca:	4608      	mov	r0, r1
   81ccc:	e6b1      	b.n	81a32 <_vfiprintf_r+0x986>
   81cce:	46a0      	mov	r8, r4
   81cd0:	2500      	movs	r5, #0
   81cd2:	f7ff ba5a 	b.w	8118a <_vfiprintf_r+0xde>
   81cd6:	f8dd b020 	ldr.w	fp, [sp, #32]
   81cda:	f898 3001 	ldrb.w	r3, [r8, #1]
   81cde:	f8db 5000 	ldr.w	r5, [fp]
   81ce2:	f10b 0204 	add.w	r2, fp, #4
   81ce6:	2d00      	cmp	r5, #0
   81ce8:	9208      	str	r2, [sp, #32]
   81cea:	46a0      	mov	r8, r4
   81cec:	f6bf aa4b 	bge.w	81186 <_vfiprintf_r+0xda>
   81cf0:	f04f 35ff 	mov.w	r5, #4294967295
   81cf4:	f7ff ba47 	b.w	81186 <_vfiprintf_r+0xda>
   81cf8:	00083e24 	.word	0x00083e24
   81cfc:	00083e3c 	.word	0x00083e3c

00081d00 <__sbprintf>:
   81d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81d04:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81d06:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81d0a:	4688      	mov	r8, r1
   81d0c:	9719      	str	r7, [sp, #100]	; 0x64
   81d0e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81d12:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   81d16:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   81d1a:	9707      	str	r7, [sp, #28]
   81d1c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81d20:	ac1a      	add	r4, sp, #104	; 0x68
   81d22:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81d26:	f02a 0a02 	bic.w	sl, sl, #2
   81d2a:	2600      	movs	r6, #0
   81d2c:	4669      	mov	r1, sp
   81d2e:	9400      	str	r4, [sp, #0]
   81d30:	9404      	str	r4, [sp, #16]
   81d32:	9502      	str	r5, [sp, #8]
   81d34:	9505      	str	r5, [sp, #20]
   81d36:	f8ad a00c 	strh.w	sl, [sp, #12]
   81d3a:	f8ad 900e 	strh.w	r9, [sp, #14]
   81d3e:	9709      	str	r7, [sp, #36]	; 0x24
   81d40:	9606      	str	r6, [sp, #24]
   81d42:	4605      	mov	r5, r0
   81d44:	f7ff f9b2 	bl	810ac <_vfiprintf_r>
   81d48:	1e04      	subs	r4, r0, #0
   81d4a:	db07      	blt.n	81d5c <__sbprintf+0x5c>
   81d4c:	4628      	mov	r0, r5
   81d4e:	4669      	mov	r1, sp
   81d50:	f000 f92a 	bl	81fa8 <_fflush_r>
   81d54:	42b0      	cmp	r0, r6
   81d56:	bf18      	it	ne
   81d58:	f04f 34ff 	movne.w	r4, #4294967295
   81d5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81d60:	065b      	lsls	r3, r3, #25
   81d62:	d505      	bpl.n	81d70 <__sbprintf+0x70>
   81d64:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d6c:	f8a8 300c 	strh.w	r3, [r8, #12]
   81d70:	4620      	mov	r0, r4
   81d72:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81d7a:	bf00      	nop

00081d7c <__swsetup_r>:
   81d7c:	4b2f      	ldr	r3, [pc, #188]	; (81e3c <__swsetup_r+0xc0>)
   81d7e:	b570      	push	{r4, r5, r6, lr}
   81d80:	4606      	mov	r6, r0
   81d82:	6818      	ldr	r0, [r3, #0]
   81d84:	460c      	mov	r4, r1
   81d86:	b110      	cbz	r0, 81d8e <__swsetup_r+0x12>
   81d88:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81d8a:	2a00      	cmp	r2, #0
   81d8c:	d036      	beq.n	81dfc <__swsetup_r+0x80>
   81d8e:	89a5      	ldrh	r5, [r4, #12]
   81d90:	b2ab      	uxth	r3, r5
   81d92:	0719      	lsls	r1, r3, #28
   81d94:	d50c      	bpl.n	81db0 <__swsetup_r+0x34>
   81d96:	6922      	ldr	r2, [r4, #16]
   81d98:	b1aa      	cbz	r2, 81dc6 <__swsetup_r+0x4a>
   81d9a:	f013 0101 	ands.w	r1, r3, #1
   81d9e:	d01e      	beq.n	81dde <__swsetup_r+0x62>
   81da0:	6963      	ldr	r3, [r4, #20]
   81da2:	2100      	movs	r1, #0
   81da4:	425b      	negs	r3, r3
   81da6:	61a3      	str	r3, [r4, #24]
   81da8:	60a1      	str	r1, [r4, #8]
   81daa:	b1f2      	cbz	r2, 81dea <__swsetup_r+0x6e>
   81dac:	2000      	movs	r0, #0
   81dae:	bd70      	pop	{r4, r5, r6, pc}
   81db0:	06da      	lsls	r2, r3, #27
   81db2:	d53a      	bpl.n	81e2a <__swsetup_r+0xae>
   81db4:	075b      	lsls	r3, r3, #29
   81db6:	d424      	bmi.n	81e02 <__swsetup_r+0x86>
   81db8:	6922      	ldr	r2, [r4, #16]
   81dba:	f045 0308 	orr.w	r3, r5, #8
   81dbe:	81a3      	strh	r3, [r4, #12]
   81dc0:	b29b      	uxth	r3, r3
   81dc2:	2a00      	cmp	r2, #0
   81dc4:	d1e9      	bne.n	81d9a <__swsetup_r+0x1e>
   81dc6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81dca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81dce:	d0e4      	beq.n	81d9a <__swsetup_r+0x1e>
   81dd0:	4630      	mov	r0, r6
   81dd2:	4621      	mov	r1, r4
   81dd4:	f000 fcce 	bl	82774 <__smakebuf_r>
   81dd8:	89a3      	ldrh	r3, [r4, #12]
   81dda:	6922      	ldr	r2, [r4, #16]
   81ddc:	e7dd      	b.n	81d9a <__swsetup_r+0x1e>
   81dde:	0798      	lsls	r0, r3, #30
   81de0:	bf58      	it	pl
   81de2:	6961      	ldrpl	r1, [r4, #20]
   81de4:	60a1      	str	r1, [r4, #8]
   81de6:	2a00      	cmp	r2, #0
   81de8:	d1e0      	bne.n	81dac <__swsetup_r+0x30>
   81dea:	89a3      	ldrh	r3, [r4, #12]
   81dec:	061a      	lsls	r2, r3, #24
   81dee:	d5dd      	bpl.n	81dac <__swsetup_r+0x30>
   81df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81df4:	81a3      	strh	r3, [r4, #12]
   81df6:	f04f 30ff 	mov.w	r0, #4294967295
   81dfa:	bd70      	pop	{r4, r5, r6, pc}
   81dfc:	f000 f8f0 	bl	81fe0 <__sinit>
   81e00:	e7c5      	b.n	81d8e <__swsetup_r+0x12>
   81e02:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81e04:	b149      	cbz	r1, 81e1a <__swsetup_r+0x9e>
   81e06:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81e0a:	4299      	cmp	r1, r3
   81e0c:	d003      	beq.n	81e16 <__swsetup_r+0x9a>
   81e0e:	4630      	mov	r0, r6
   81e10:	f000 fa2a 	bl	82268 <_free_r>
   81e14:	89a5      	ldrh	r5, [r4, #12]
   81e16:	2300      	movs	r3, #0
   81e18:	6323      	str	r3, [r4, #48]	; 0x30
   81e1a:	6922      	ldr	r2, [r4, #16]
   81e1c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81e20:	2100      	movs	r1, #0
   81e22:	b2ad      	uxth	r5, r5
   81e24:	6022      	str	r2, [r4, #0]
   81e26:	6061      	str	r1, [r4, #4]
   81e28:	e7c7      	b.n	81dba <__swsetup_r+0x3e>
   81e2a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81e2e:	2309      	movs	r3, #9
   81e30:	6033      	str	r3, [r6, #0]
   81e32:	f04f 30ff 	mov.w	r0, #4294967295
   81e36:	81a5      	strh	r5, [r4, #12]
   81e38:	bd70      	pop	{r4, r5, r6, pc}
   81e3a:	bf00      	nop
   81e3c:	20070568 	.word	0x20070568

00081e40 <register_fini>:
   81e40:	4b02      	ldr	r3, [pc, #8]	; (81e4c <register_fini+0xc>)
   81e42:	b113      	cbz	r3, 81e4a <register_fini+0xa>
   81e44:	4802      	ldr	r0, [pc, #8]	; (81e50 <register_fini+0x10>)
   81e46:	f000 b805 	b.w	81e54 <atexit>
   81e4a:	4770      	bx	lr
   81e4c:	00000000 	.word	0x00000000
   81e50:	000820dd 	.word	0x000820dd

00081e54 <atexit>:
   81e54:	4601      	mov	r1, r0
   81e56:	2000      	movs	r0, #0
   81e58:	4602      	mov	r2, r0
   81e5a:	4603      	mov	r3, r0
   81e5c:	f001 bbca 	b.w	835f4 <__register_exitproc>

00081e60 <__sflush_r>:
   81e60:	898b      	ldrh	r3, [r1, #12]
   81e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e66:	b29a      	uxth	r2, r3
   81e68:	460d      	mov	r5, r1
   81e6a:	0711      	lsls	r1, r2, #28
   81e6c:	4680      	mov	r8, r0
   81e6e:	d43c      	bmi.n	81eea <__sflush_r+0x8a>
   81e70:	686a      	ldr	r2, [r5, #4]
   81e72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81e76:	2a00      	cmp	r2, #0
   81e78:	81ab      	strh	r3, [r5, #12]
   81e7a:	dd59      	ble.n	81f30 <__sflush_r+0xd0>
   81e7c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81e7e:	2c00      	cmp	r4, #0
   81e80:	d04b      	beq.n	81f1a <__sflush_r+0xba>
   81e82:	b29b      	uxth	r3, r3
   81e84:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81e88:	2100      	movs	r1, #0
   81e8a:	b292      	uxth	r2, r2
   81e8c:	f8d8 6000 	ldr.w	r6, [r8]
   81e90:	f8c8 1000 	str.w	r1, [r8]
   81e94:	2a00      	cmp	r2, #0
   81e96:	d04f      	beq.n	81f38 <__sflush_r+0xd8>
   81e98:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81e9a:	075f      	lsls	r7, r3, #29
   81e9c:	d505      	bpl.n	81eaa <__sflush_r+0x4a>
   81e9e:	6869      	ldr	r1, [r5, #4]
   81ea0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81ea2:	1a52      	subs	r2, r2, r1
   81ea4:	b10b      	cbz	r3, 81eaa <__sflush_r+0x4a>
   81ea6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81ea8:	1ad2      	subs	r2, r2, r3
   81eaa:	4640      	mov	r0, r8
   81eac:	69e9      	ldr	r1, [r5, #28]
   81eae:	2300      	movs	r3, #0
   81eb0:	47a0      	blx	r4
   81eb2:	1c44      	adds	r4, r0, #1
   81eb4:	d04a      	beq.n	81f4c <__sflush_r+0xec>
   81eb6:	89ab      	ldrh	r3, [r5, #12]
   81eb8:	692a      	ldr	r2, [r5, #16]
   81eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81ebe:	b29b      	uxth	r3, r3
   81ec0:	2100      	movs	r1, #0
   81ec2:	602a      	str	r2, [r5, #0]
   81ec4:	04da      	lsls	r2, r3, #19
   81ec6:	81ab      	strh	r3, [r5, #12]
   81ec8:	6069      	str	r1, [r5, #4]
   81eca:	d44c      	bmi.n	81f66 <__sflush_r+0x106>
   81ecc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81ece:	f8c8 6000 	str.w	r6, [r8]
   81ed2:	b311      	cbz	r1, 81f1a <__sflush_r+0xba>
   81ed4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81ed8:	4299      	cmp	r1, r3
   81eda:	d002      	beq.n	81ee2 <__sflush_r+0x82>
   81edc:	4640      	mov	r0, r8
   81ede:	f000 f9c3 	bl	82268 <_free_r>
   81ee2:	2000      	movs	r0, #0
   81ee4:	6328      	str	r0, [r5, #48]	; 0x30
   81ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81eea:	692e      	ldr	r6, [r5, #16]
   81eec:	b1ae      	cbz	r6, 81f1a <__sflush_r+0xba>
   81eee:	0791      	lsls	r1, r2, #30
   81ef0:	682c      	ldr	r4, [r5, #0]
   81ef2:	bf0c      	ite	eq
   81ef4:	696b      	ldreq	r3, [r5, #20]
   81ef6:	2300      	movne	r3, #0
   81ef8:	602e      	str	r6, [r5, #0]
   81efa:	1ba4      	subs	r4, r4, r6
   81efc:	60ab      	str	r3, [r5, #8]
   81efe:	e00a      	b.n	81f16 <__sflush_r+0xb6>
   81f00:	4632      	mov	r2, r6
   81f02:	4623      	mov	r3, r4
   81f04:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81f06:	4640      	mov	r0, r8
   81f08:	69e9      	ldr	r1, [r5, #28]
   81f0a:	47b8      	blx	r7
   81f0c:	2800      	cmp	r0, #0
   81f0e:	ebc0 0404 	rsb	r4, r0, r4
   81f12:	4406      	add	r6, r0
   81f14:	dd04      	ble.n	81f20 <__sflush_r+0xc0>
   81f16:	2c00      	cmp	r4, #0
   81f18:	dcf2      	bgt.n	81f00 <__sflush_r+0xa0>
   81f1a:	2000      	movs	r0, #0
   81f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f20:	89ab      	ldrh	r3, [r5, #12]
   81f22:	f04f 30ff 	mov.w	r0, #4294967295
   81f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f2a:	81ab      	strh	r3, [r5, #12]
   81f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f30:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81f32:	2a00      	cmp	r2, #0
   81f34:	dca2      	bgt.n	81e7c <__sflush_r+0x1c>
   81f36:	e7f0      	b.n	81f1a <__sflush_r+0xba>
   81f38:	2301      	movs	r3, #1
   81f3a:	4640      	mov	r0, r8
   81f3c:	69e9      	ldr	r1, [r5, #28]
   81f3e:	47a0      	blx	r4
   81f40:	1c43      	adds	r3, r0, #1
   81f42:	4602      	mov	r2, r0
   81f44:	d01e      	beq.n	81f84 <__sflush_r+0x124>
   81f46:	89ab      	ldrh	r3, [r5, #12]
   81f48:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81f4a:	e7a6      	b.n	81e9a <__sflush_r+0x3a>
   81f4c:	f8d8 3000 	ldr.w	r3, [r8]
   81f50:	b95b      	cbnz	r3, 81f6a <__sflush_r+0x10a>
   81f52:	89aa      	ldrh	r2, [r5, #12]
   81f54:	6929      	ldr	r1, [r5, #16]
   81f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81f5a:	b292      	uxth	r2, r2
   81f5c:	606b      	str	r3, [r5, #4]
   81f5e:	04d3      	lsls	r3, r2, #19
   81f60:	81aa      	strh	r2, [r5, #12]
   81f62:	6029      	str	r1, [r5, #0]
   81f64:	d5b2      	bpl.n	81ecc <__sflush_r+0x6c>
   81f66:	6528      	str	r0, [r5, #80]	; 0x50
   81f68:	e7b0      	b.n	81ecc <__sflush_r+0x6c>
   81f6a:	2b1d      	cmp	r3, #29
   81f6c:	d001      	beq.n	81f72 <__sflush_r+0x112>
   81f6e:	2b16      	cmp	r3, #22
   81f70:	d113      	bne.n	81f9a <__sflush_r+0x13a>
   81f72:	89a9      	ldrh	r1, [r5, #12]
   81f74:	692b      	ldr	r3, [r5, #16]
   81f76:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81f7a:	2200      	movs	r2, #0
   81f7c:	81a9      	strh	r1, [r5, #12]
   81f7e:	602b      	str	r3, [r5, #0]
   81f80:	606a      	str	r2, [r5, #4]
   81f82:	e7a3      	b.n	81ecc <__sflush_r+0x6c>
   81f84:	f8d8 3000 	ldr.w	r3, [r8]
   81f88:	2b00      	cmp	r3, #0
   81f8a:	d0dc      	beq.n	81f46 <__sflush_r+0xe6>
   81f8c:	2b1d      	cmp	r3, #29
   81f8e:	d001      	beq.n	81f94 <__sflush_r+0x134>
   81f90:	2b16      	cmp	r3, #22
   81f92:	d1c5      	bne.n	81f20 <__sflush_r+0xc0>
   81f94:	f8c8 6000 	str.w	r6, [r8]
   81f98:	e7bf      	b.n	81f1a <__sflush_r+0xba>
   81f9a:	89ab      	ldrh	r3, [r5, #12]
   81f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81fa0:	81ab      	strh	r3, [r5, #12]
   81fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fa6:	bf00      	nop

00081fa8 <_fflush_r>:
   81fa8:	b510      	push	{r4, lr}
   81faa:	4604      	mov	r4, r0
   81fac:	b082      	sub	sp, #8
   81fae:	b108      	cbz	r0, 81fb4 <_fflush_r+0xc>
   81fb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fb2:	b153      	cbz	r3, 81fca <_fflush_r+0x22>
   81fb4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81fb8:	b908      	cbnz	r0, 81fbe <_fflush_r+0x16>
   81fba:	b002      	add	sp, #8
   81fbc:	bd10      	pop	{r4, pc}
   81fbe:	4620      	mov	r0, r4
   81fc0:	b002      	add	sp, #8
   81fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81fc6:	f7ff bf4b 	b.w	81e60 <__sflush_r>
   81fca:	9101      	str	r1, [sp, #4]
   81fcc:	f000 f808 	bl	81fe0 <__sinit>
   81fd0:	9901      	ldr	r1, [sp, #4]
   81fd2:	e7ef      	b.n	81fb4 <_fflush_r+0xc>

00081fd4 <_cleanup_r>:
   81fd4:	4901      	ldr	r1, [pc, #4]	; (81fdc <_cleanup_r+0x8>)
   81fd6:	f000 bb9f 	b.w	82718 <_fwalk>
   81fda:	bf00      	nop
   81fdc:	00083741 	.word	0x00083741

00081fe0 <__sinit>:
   81fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fe4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   81fe6:	b083      	sub	sp, #12
   81fe8:	4607      	mov	r7, r0
   81fea:	2c00      	cmp	r4, #0
   81fec:	d165      	bne.n	820ba <__sinit+0xda>
   81fee:	687d      	ldr	r5, [r7, #4]
   81ff0:	4833      	ldr	r0, [pc, #204]	; (820c0 <__sinit+0xe0>)
   81ff2:	2304      	movs	r3, #4
   81ff4:	2103      	movs	r1, #3
   81ff6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   81ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
   81ffc:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82000:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82004:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82008:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8200c:	81ab      	strh	r3, [r5, #12]
   8200e:	602c      	str	r4, [r5, #0]
   82010:	606c      	str	r4, [r5, #4]
   82012:	60ac      	str	r4, [r5, #8]
   82014:	666c      	str	r4, [r5, #100]	; 0x64
   82016:	81ec      	strh	r4, [r5, #14]
   82018:	612c      	str	r4, [r5, #16]
   8201a:	616c      	str	r4, [r5, #20]
   8201c:	61ac      	str	r4, [r5, #24]
   8201e:	4621      	mov	r1, r4
   82020:	2208      	movs	r2, #8
   82022:	f7fe ff35 	bl	80e90 <memset>
   82026:	f8df b09c 	ldr.w	fp, [pc, #156]	; 820c4 <__sinit+0xe4>
   8202a:	68be      	ldr	r6, [r7, #8]
   8202c:	f8df a098 	ldr.w	sl, [pc, #152]	; 820c8 <__sinit+0xe8>
   82030:	f8df 9098 	ldr.w	r9, [pc, #152]	; 820cc <__sinit+0xec>
   82034:	f8df 8098 	ldr.w	r8, [pc, #152]	; 820d0 <__sinit+0xf0>
   82038:	2301      	movs	r3, #1
   8203a:	2209      	movs	r2, #9
   8203c:	61ed      	str	r5, [r5, #28]
   8203e:	f8c5 b020 	str.w	fp, [r5, #32]
   82042:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82046:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8204a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8204e:	4621      	mov	r1, r4
   82050:	81f3      	strh	r3, [r6, #14]
   82052:	81b2      	strh	r2, [r6, #12]
   82054:	6034      	str	r4, [r6, #0]
   82056:	6074      	str	r4, [r6, #4]
   82058:	60b4      	str	r4, [r6, #8]
   8205a:	6674      	str	r4, [r6, #100]	; 0x64
   8205c:	6134      	str	r4, [r6, #16]
   8205e:	6174      	str	r4, [r6, #20]
   82060:	61b4      	str	r4, [r6, #24]
   82062:	2208      	movs	r2, #8
   82064:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82068:	9301      	str	r3, [sp, #4]
   8206a:	f7fe ff11 	bl	80e90 <memset>
   8206e:	68fd      	ldr	r5, [r7, #12]
   82070:	2012      	movs	r0, #18
   82072:	2202      	movs	r2, #2
   82074:	61f6      	str	r6, [r6, #28]
   82076:	f8c6 b020 	str.w	fp, [r6, #32]
   8207a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8207e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82082:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82086:	4621      	mov	r1, r4
   82088:	81a8      	strh	r0, [r5, #12]
   8208a:	81ea      	strh	r2, [r5, #14]
   8208c:	602c      	str	r4, [r5, #0]
   8208e:	606c      	str	r4, [r5, #4]
   82090:	60ac      	str	r4, [r5, #8]
   82092:	666c      	str	r4, [r5, #100]	; 0x64
   82094:	612c      	str	r4, [r5, #16]
   82096:	616c      	str	r4, [r5, #20]
   82098:	61ac      	str	r4, [r5, #24]
   8209a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8209e:	2208      	movs	r2, #8
   820a0:	f7fe fef6 	bl	80e90 <memset>
   820a4:	9b01      	ldr	r3, [sp, #4]
   820a6:	61ed      	str	r5, [r5, #28]
   820a8:	f8c5 b020 	str.w	fp, [r5, #32]
   820ac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   820b0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   820b4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   820b8:	63bb      	str	r3, [r7, #56]	; 0x38
   820ba:	b003      	add	sp, #12
   820bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820c0:	00081fd5 	.word	0x00081fd5
   820c4:	000833d5 	.word	0x000833d5
   820c8:	000833f9 	.word	0x000833f9
   820cc:	00083431 	.word	0x00083431
   820d0:	00083451 	.word	0x00083451

000820d4 <__sfp_lock_acquire>:
   820d4:	4770      	bx	lr
   820d6:	bf00      	nop

000820d8 <__sfp_lock_release>:
   820d8:	4770      	bx	lr
   820da:	bf00      	nop

000820dc <__libc_fini_array>:
   820dc:	b538      	push	{r3, r4, r5, lr}
   820de:	4d09      	ldr	r5, [pc, #36]	; (82104 <__libc_fini_array+0x28>)
   820e0:	4c09      	ldr	r4, [pc, #36]	; (82108 <__libc_fini_array+0x2c>)
   820e2:	1b64      	subs	r4, r4, r5
   820e4:	10a4      	asrs	r4, r4, #2
   820e6:	bf18      	it	ne
   820e8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   820ec:	d005      	beq.n	820fa <__libc_fini_array+0x1e>
   820ee:	3c01      	subs	r4, #1
   820f0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   820f4:	4798      	blx	r3
   820f6:	2c00      	cmp	r4, #0
   820f8:	d1f9      	bne.n	820ee <__libc_fini_array+0x12>
   820fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   820fe:	f001 beaf 	b.w	83e60 <_fini>
   82102:	bf00      	nop
   82104:	00083e6c 	.word	0x00083e6c
   82108:	00083e70 	.word	0x00083e70

0008210c <_fputwc_r>:
   8210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82110:	8993      	ldrh	r3, [r2, #12]
   82112:	460f      	mov	r7, r1
   82114:	0499      	lsls	r1, r3, #18
   82116:	b082      	sub	sp, #8
   82118:	4614      	mov	r4, r2
   8211a:	4680      	mov	r8, r0
   8211c:	d406      	bmi.n	8212c <_fputwc_r+0x20>
   8211e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   82120:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82128:	81a3      	strh	r3, [r4, #12]
   8212a:	6662      	str	r2, [r4, #100]	; 0x64
   8212c:	f000 fb1c 	bl	82768 <__locale_mb_cur_max>
   82130:	2801      	cmp	r0, #1
   82132:	d03e      	beq.n	821b2 <_fputwc_r+0xa6>
   82134:	463a      	mov	r2, r7
   82136:	4640      	mov	r0, r8
   82138:	a901      	add	r1, sp, #4
   8213a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8213e:	f001 fa0f 	bl	83560 <_wcrtomb_r>
   82142:	1c42      	adds	r2, r0, #1
   82144:	4606      	mov	r6, r0
   82146:	d02d      	beq.n	821a4 <_fputwc_r+0x98>
   82148:	2800      	cmp	r0, #0
   8214a:	d03a      	beq.n	821c2 <_fputwc_r+0xb6>
   8214c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82150:	2500      	movs	r5, #0
   82152:	e009      	b.n	82168 <_fputwc_r+0x5c>
   82154:	6823      	ldr	r3, [r4, #0]
   82156:	7019      	strb	r1, [r3, #0]
   82158:	6823      	ldr	r3, [r4, #0]
   8215a:	3301      	adds	r3, #1
   8215c:	6023      	str	r3, [r4, #0]
   8215e:	3501      	adds	r5, #1
   82160:	42b5      	cmp	r5, r6
   82162:	d22e      	bcs.n	821c2 <_fputwc_r+0xb6>
   82164:	ab01      	add	r3, sp, #4
   82166:	5ce9      	ldrb	r1, [r5, r3]
   82168:	68a3      	ldr	r3, [r4, #8]
   8216a:	3b01      	subs	r3, #1
   8216c:	2b00      	cmp	r3, #0
   8216e:	60a3      	str	r3, [r4, #8]
   82170:	daf0      	bge.n	82154 <_fputwc_r+0x48>
   82172:	69a2      	ldr	r2, [r4, #24]
   82174:	4293      	cmp	r3, r2
   82176:	db06      	blt.n	82186 <_fputwc_r+0x7a>
   82178:	6823      	ldr	r3, [r4, #0]
   8217a:	7019      	strb	r1, [r3, #0]
   8217c:	6823      	ldr	r3, [r4, #0]
   8217e:	7819      	ldrb	r1, [r3, #0]
   82180:	3301      	adds	r3, #1
   82182:	290a      	cmp	r1, #10
   82184:	d1ea      	bne.n	8215c <_fputwc_r+0x50>
   82186:	4640      	mov	r0, r8
   82188:	4622      	mov	r2, r4
   8218a:	f001 f995 	bl	834b8 <__swbuf_r>
   8218e:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   82192:	4258      	negs	r0, r3
   82194:	4158      	adcs	r0, r3
   82196:	2800      	cmp	r0, #0
   82198:	d0e1      	beq.n	8215e <_fputwc_r+0x52>
   8219a:	f04f 30ff 	mov.w	r0, #4294967295
   8219e:	b002      	add	sp, #8
   821a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821a4:	89a3      	ldrh	r3, [r4, #12]
   821a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821aa:	81a3      	strh	r3, [r4, #12]
   821ac:	b002      	add	sp, #8
   821ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821b2:	1e7b      	subs	r3, r7, #1
   821b4:	2bfe      	cmp	r3, #254	; 0xfe
   821b6:	d8bd      	bhi.n	82134 <_fputwc_r+0x28>
   821b8:	b2f9      	uxtb	r1, r7
   821ba:	4606      	mov	r6, r0
   821bc:	f88d 1004 	strb.w	r1, [sp, #4]
   821c0:	e7c6      	b.n	82150 <_fputwc_r+0x44>
   821c2:	4638      	mov	r0, r7
   821c4:	b002      	add	sp, #8
   821c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821ca:	bf00      	nop

000821cc <_malloc_trim_r>:
   821cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   821ce:	4d23      	ldr	r5, [pc, #140]	; (8225c <_malloc_trim_r+0x90>)
   821d0:	460f      	mov	r7, r1
   821d2:	4604      	mov	r4, r0
   821d4:	f000 ff08 	bl	82fe8 <__malloc_lock>
   821d8:	68ab      	ldr	r3, [r5, #8]
   821da:	685e      	ldr	r6, [r3, #4]
   821dc:	f026 0603 	bic.w	r6, r6, #3
   821e0:	1bf1      	subs	r1, r6, r7
   821e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   821e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   821ea:	f021 010f 	bic.w	r1, r1, #15
   821ee:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   821f2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   821f6:	db07      	blt.n	82208 <_malloc_trim_r+0x3c>
   821f8:	4620      	mov	r0, r4
   821fa:	2100      	movs	r1, #0
   821fc:	f001 f8d8 	bl	833b0 <_sbrk_r>
   82200:	68ab      	ldr	r3, [r5, #8]
   82202:	4433      	add	r3, r6
   82204:	4298      	cmp	r0, r3
   82206:	d004      	beq.n	82212 <_malloc_trim_r+0x46>
   82208:	4620      	mov	r0, r4
   8220a:	f000 feef 	bl	82fec <__malloc_unlock>
   8220e:	2000      	movs	r0, #0
   82210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82212:	4620      	mov	r0, r4
   82214:	4279      	negs	r1, r7
   82216:	f001 f8cb 	bl	833b0 <_sbrk_r>
   8221a:	3001      	adds	r0, #1
   8221c:	d00d      	beq.n	8223a <_malloc_trim_r+0x6e>
   8221e:	4b10      	ldr	r3, [pc, #64]	; (82260 <_malloc_trim_r+0x94>)
   82220:	68aa      	ldr	r2, [r5, #8]
   82222:	6819      	ldr	r1, [r3, #0]
   82224:	1bf6      	subs	r6, r6, r7
   82226:	f046 0601 	orr.w	r6, r6, #1
   8222a:	4620      	mov	r0, r4
   8222c:	1bc9      	subs	r1, r1, r7
   8222e:	6056      	str	r6, [r2, #4]
   82230:	6019      	str	r1, [r3, #0]
   82232:	f000 fedb 	bl	82fec <__malloc_unlock>
   82236:	2001      	movs	r0, #1
   82238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8223a:	4620      	mov	r0, r4
   8223c:	2100      	movs	r1, #0
   8223e:	f001 f8b7 	bl	833b0 <_sbrk_r>
   82242:	68ab      	ldr	r3, [r5, #8]
   82244:	1ac2      	subs	r2, r0, r3
   82246:	2a0f      	cmp	r2, #15
   82248:	ddde      	ble.n	82208 <_malloc_trim_r+0x3c>
   8224a:	4d06      	ldr	r5, [pc, #24]	; (82264 <_malloc_trim_r+0x98>)
   8224c:	4904      	ldr	r1, [pc, #16]	; (82260 <_malloc_trim_r+0x94>)
   8224e:	682d      	ldr	r5, [r5, #0]
   82250:	f042 0201 	orr.w	r2, r2, #1
   82254:	1b40      	subs	r0, r0, r5
   82256:	605a      	str	r2, [r3, #4]
   82258:	6008      	str	r0, [r1, #0]
   8225a:	e7d5      	b.n	82208 <_malloc_trim_r+0x3c>
   8225c:	20070590 	.word	0x20070590
   82260:	20070a40 	.word	0x20070a40
   82264:	2007099c 	.word	0x2007099c

00082268 <_free_r>:
   82268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8226c:	460d      	mov	r5, r1
   8226e:	4606      	mov	r6, r0
   82270:	2900      	cmp	r1, #0
   82272:	d055      	beq.n	82320 <_free_r+0xb8>
   82274:	f000 feb8 	bl	82fe8 <__malloc_lock>
   82278:	f855 1c04 	ldr.w	r1, [r5, #-4]
   8227c:	f8df c170 	ldr.w	ip, [pc, #368]	; 823f0 <_free_r+0x188>
   82280:	f1a5 0408 	sub.w	r4, r5, #8
   82284:	f021 0301 	bic.w	r3, r1, #1
   82288:	18e2      	adds	r2, r4, r3
   8228a:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8228e:	6857      	ldr	r7, [r2, #4]
   82290:	4290      	cmp	r0, r2
   82292:	f027 0703 	bic.w	r7, r7, #3
   82296:	d068      	beq.n	8236a <_free_r+0x102>
   82298:	f011 0101 	ands.w	r1, r1, #1
   8229c:	6057      	str	r7, [r2, #4]
   8229e:	d032      	beq.n	82306 <_free_r+0x9e>
   822a0:	2100      	movs	r1, #0
   822a2:	19d0      	adds	r0, r2, r7
   822a4:	6840      	ldr	r0, [r0, #4]
   822a6:	07c0      	lsls	r0, r0, #31
   822a8:	d406      	bmi.n	822b8 <_free_r+0x50>
   822aa:	443b      	add	r3, r7
   822ac:	6890      	ldr	r0, [r2, #8]
   822ae:	2900      	cmp	r1, #0
   822b0:	d04d      	beq.n	8234e <_free_r+0xe6>
   822b2:	68d2      	ldr	r2, [r2, #12]
   822b4:	60c2      	str	r2, [r0, #12]
   822b6:	6090      	str	r0, [r2, #8]
   822b8:	f043 0201 	orr.w	r2, r3, #1
   822bc:	6062      	str	r2, [r4, #4]
   822be:	50e3      	str	r3, [r4, r3]
   822c0:	b9e1      	cbnz	r1, 822fc <_free_r+0x94>
   822c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   822c6:	d32d      	bcc.n	82324 <_free_r+0xbc>
   822c8:	0a5a      	lsrs	r2, r3, #9
   822ca:	2a04      	cmp	r2, #4
   822cc:	d869      	bhi.n	823a2 <_free_r+0x13a>
   822ce:	0998      	lsrs	r0, r3, #6
   822d0:	3038      	adds	r0, #56	; 0x38
   822d2:	0041      	lsls	r1, r0, #1
   822d4:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   822d8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   822dc:	4944      	ldr	r1, [pc, #272]	; (823f0 <_free_r+0x188>)
   822de:	4562      	cmp	r2, ip
   822e0:	d065      	beq.n	823ae <_free_r+0x146>
   822e2:	6851      	ldr	r1, [r2, #4]
   822e4:	f021 0103 	bic.w	r1, r1, #3
   822e8:	428b      	cmp	r3, r1
   822ea:	d202      	bcs.n	822f2 <_free_r+0x8a>
   822ec:	6892      	ldr	r2, [r2, #8]
   822ee:	4594      	cmp	ip, r2
   822f0:	d1f7      	bne.n	822e2 <_free_r+0x7a>
   822f2:	68d3      	ldr	r3, [r2, #12]
   822f4:	60e3      	str	r3, [r4, #12]
   822f6:	60a2      	str	r2, [r4, #8]
   822f8:	609c      	str	r4, [r3, #8]
   822fa:	60d4      	str	r4, [r2, #12]
   822fc:	4630      	mov	r0, r6
   822fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82302:	f000 be73 	b.w	82fec <__malloc_unlock>
   82306:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8230a:	f10c 0808 	add.w	r8, ip, #8
   8230e:	1b64      	subs	r4, r4, r5
   82310:	68a0      	ldr	r0, [r4, #8]
   82312:	442b      	add	r3, r5
   82314:	4540      	cmp	r0, r8
   82316:	d042      	beq.n	8239e <_free_r+0x136>
   82318:	68e5      	ldr	r5, [r4, #12]
   8231a:	60c5      	str	r5, [r0, #12]
   8231c:	60a8      	str	r0, [r5, #8]
   8231e:	e7c0      	b.n	822a2 <_free_r+0x3a>
   82320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82324:	08db      	lsrs	r3, r3, #3
   82326:	109a      	asrs	r2, r3, #2
   82328:	2001      	movs	r0, #1
   8232a:	4090      	lsls	r0, r2
   8232c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82330:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82334:	689a      	ldr	r2, [r3, #8]
   82336:	4301      	orrs	r1, r0
   82338:	60a2      	str	r2, [r4, #8]
   8233a:	60e3      	str	r3, [r4, #12]
   8233c:	f8cc 1004 	str.w	r1, [ip, #4]
   82340:	4630      	mov	r0, r6
   82342:	609c      	str	r4, [r3, #8]
   82344:	60d4      	str	r4, [r2, #12]
   82346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8234a:	f000 be4f 	b.w	82fec <__malloc_unlock>
   8234e:	4d29      	ldr	r5, [pc, #164]	; (823f4 <_free_r+0x18c>)
   82350:	42a8      	cmp	r0, r5
   82352:	d1ae      	bne.n	822b2 <_free_r+0x4a>
   82354:	f043 0201 	orr.w	r2, r3, #1
   82358:	f8cc 4014 	str.w	r4, [ip, #20]
   8235c:	f8cc 4010 	str.w	r4, [ip, #16]
   82360:	60e0      	str	r0, [r4, #12]
   82362:	60a0      	str	r0, [r4, #8]
   82364:	6062      	str	r2, [r4, #4]
   82366:	50e3      	str	r3, [r4, r3]
   82368:	e7c8      	b.n	822fc <_free_r+0x94>
   8236a:	441f      	add	r7, r3
   8236c:	07cb      	lsls	r3, r1, #31
   8236e:	d407      	bmi.n	82380 <_free_r+0x118>
   82370:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82374:	1a64      	subs	r4, r4, r1
   82376:	68e3      	ldr	r3, [r4, #12]
   82378:	68a2      	ldr	r2, [r4, #8]
   8237a:	440f      	add	r7, r1
   8237c:	60d3      	str	r3, [r2, #12]
   8237e:	609a      	str	r2, [r3, #8]
   82380:	4b1d      	ldr	r3, [pc, #116]	; (823f8 <_free_r+0x190>)
   82382:	f047 0201 	orr.w	r2, r7, #1
   82386:	681b      	ldr	r3, [r3, #0]
   82388:	6062      	str	r2, [r4, #4]
   8238a:	429f      	cmp	r7, r3
   8238c:	f8cc 4008 	str.w	r4, [ip, #8]
   82390:	d3b4      	bcc.n	822fc <_free_r+0x94>
   82392:	4b1a      	ldr	r3, [pc, #104]	; (823fc <_free_r+0x194>)
   82394:	4630      	mov	r0, r6
   82396:	6819      	ldr	r1, [r3, #0]
   82398:	f7ff ff18 	bl	821cc <_malloc_trim_r>
   8239c:	e7ae      	b.n	822fc <_free_r+0x94>
   8239e:	2101      	movs	r1, #1
   823a0:	e77f      	b.n	822a2 <_free_r+0x3a>
   823a2:	2a14      	cmp	r2, #20
   823a4:	d80b      	bhi.n	823be <_free_r+0x156>
   823a6:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   823aa:	0041      	lsls	r1, r0, #1
   823ac:	e792      	b.n	822d4 <_free_r+0x6c>
   823ae:	1080      	asrs	r0, r0, #2
   823b0:	2501      	movs	r5, #1
   823b2:	4085      	lsls	r5, r0
   823b4:	6848      	ldr	r0, [r1, #4]
   823b6:	4613      	mov	r3, r2
   823b8:	4328      	orrs	r0, r5
   823ba:	6048      	str	r0, [r1, #4]
   823bc:	e79a      	b.n	822f4 <_free_r+0x8c>
   823be:	2a54      	cmp	r2, #84	; 0x54
   823c0:	d803      	bhi.n	823ca <_free_r+0x162>
   823c2:	0b18      	lsrs	r0, r3, #12
   823c4:	306e      	adds	r0, #110	; 0x6e
   823c6:	0041      	lsls	r1, r0, #1
   823c8:	e784      	b.n	822d4 <_free_r+0x6c>
   823ca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   823ce:	d803      	bhi.n	823d8 <_free_r+0x170>
   823d0:	0bd8      	lsrs	r0, r3, #15
   823d2:	3077      	adds	r0, #119	; 0x77
   823d4:	0041      	lsls	r1, r0, #1
   823d6:	e77d      	b.n	822d4 <_free_r+0x6c>
   823d8:	f240 5154 	movw	r1, #1364	; 0x554
   823dc:	428a      	cmp	r2, r1
   823de:	d803      	bhi.n	823e8 <_free_r+0x180>
   823e0:	0c98      	lsrs	r0, r3, #18
   823e2:	307c      	adds	r0, #124	; 0x7c
   823e4:	0041      	lsls	r1, r0, #1
   823e6:	e775      	b.n	822d4 <_free_r+0x6c>
   823e8:	21fc      	movs	r1, #252	; 0xfc
   823ea:	207e      	movs	r0, #126	; 0x7e
   823ec:	e772      	b.n	822d4 <_free_r+0x6c>
   823ee:	bf00      	nop
   823f0:	20070590 	.word	0x20070590
   823f4:	20070598 	.word	0x20070598
   823f8:	20070998 	.word	0x20070998
   823fc:	20070a3c 	.word	0x20070a3c

00082400 <__sfvwrite_r>:
   82400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82404:	6893      	ldr	r3, [r2, #8]
   82406:	b083      	sub	sp, #12
   82408:	4616      	mov	r6, r2
   8240a:	4681      	mov	r9, r0
   8240c:	460c      	mov	r4, r1
   8240e:	b32b      	cbz	r3, 8245c <__sfvwrite_r+0x5c>
   82410:	898b      	ldrh	r3, [r1, #12]
   82412:	0719      	lsls	r1, r3, #28
   82414:	d526      	bpl.n	82464 <__sfvwrite_r+0x64>
   82416:	6922      	ldr	r2, [r4, #16]
   82418:	b322      	cbz	r2, 82464 <__sfvwrite_r+0x64>
   8241a:	f003 0202 	and.w	r2, r3, #2
   8241e:	b292      	uxth	r2, r2
   82420:	6835      	ldr	r5, [r6, #0]
   82422:	2a00      	cmp	r2, #0
   82424:	d02c      	beq.n	82480 <__sfvwrite_r+0x80>
   82426:	f04f 0a00 	mov.w	sl, #0
   8242a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82714 <__sfvwrite_r+0x314>
   8242e:	46d0      	mov	r8, sl
   82430:	45d8      	cmp	r8, fp
   82432:	bf34      	ite	cc
   82434:	4643      	movcc	r3, r8
   82436:	465b      	movcs	r3, fp
   82438:	4652      	mov	r2, sl
   8243a:	4648      	mov	r0, r9
   8243c:	f1b8 0f00 	cmp.w	r8, #0
   82440:	d04f      	beq.n	824e2 <__sfvwrite_r+0xe2>
   82442:	69e1      	ldr	r1, [r4, #28]
   82444:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82446:	47b8      	blx	r7
   82448:	2800      	cmp	r0, #0
   8244a:	dd56      	ble.n	824fa <__sfvwrite_r+0xfa>
   8244c:	68b3      	ldr	r3, [r6, #8]
   8244e:	4482      	add	sl, r0
   82450:	1a1b      	subs	r3, r3, r0
   82452:	ebc0 0808 	rsb	r8, r0, r8
   82456:	60b3      	str	r3, [r6, #8]
   82458:	2b00      	cmp	r3, #0
   8245a:	d1e9      	bne.n	82430 <__sfvwrite_r+0x30>
   8245c:	2000      	movs	r0, #0
   8245e:	b003      	add	sp, #12
   82460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82464:	4648      	mov	r0, r9
   82466:	4621      	mov	r1, r4
   82468:	f7ff fc88 	bl	81d7c <__swsetup_r>
   8246c:	2800      	cmp	r0, #0
   8246e:	f040 8148 	bne.w	82702 <__sfvwrite_r+0x302>
   82472:	89a3      	ldrh	r3, [r4, #12]
   82474:	6835      	ldr	r5, [r6, #0]
   82476:	f003 0202 	and.w	r2, r3, #2
   8247a:	b292      	uxth	r2, r2
   8247c:	2a00      	cmp	r2, #0
   8247e:	d1d2      	bne.n	82426 <__sfvwrite_r+0x26>
   82480:	f013 0a01 	ands.w	sl, r3, #1
   82484:	d142      	bne.n	8250c <__sfvwrite_r+0x10c>
   82486:	46d0      	mov	r8, sl
   82488:	f1b8 0f00 	cmp.w	r8, #0
   8248c:	d023      	beq.n	824d6 <__sfvwrite_r+0xd6>
   8248e:	059a      	lsls	r2, r3, #22
   82490:	68a7      	ldr	r7, [r4, #8]
   82492:	d576      	bpl.n	82582 <__sfvwrite_r+0x182>
   82494:	45b8      	cmp	r8, r7
   82496:	f0c0 80a4 	bcc.w	825e2 <__sfvwrite_r+0x1e2>
   8249a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8249e:	f040 80b2 	bne.w	82606 <__sfvwrite_r+0x206>
   824a2:	6820      	ldr	r0, [r4, #0]
   824a4:	46bb      	mov	fp, r7
   824a6:	4651      	mov	r1, sl
   824a8:	465a      	mov	r2, fp
   824aa:	f000 fd37 	bl	82f1c <memmove>
   824ae:	68a2      	ldr	r2, [r4, #8]
   824b0:	6821      	ldr	r1, [r4, #0]
   824b2:	1bd2      	subs	r2, r2, r7
   824b4:	eb01 030b 	add.w	r3, r1, fp
   824b8:	60a2      	str	r2, [r4, #8]
   824ba:	6023      	str	r3, [r4, #0]
   824bc:	4642      	mov	r2, r8
   824be:	68b3      	ldr	r3, [r6, #8]
   824c0:	4492      	add	sl, r2
   824c2:	1a9b      	subs	r3, r3, r2
   824c4:	ebc2 0808 	rsb	r8, r2, r8
   824c8:	60b3      	str	r3, [r6, #8]
   824ca:	2b00      	cmp	r3, #0
   824cc:	d0c6      	beq.n	8245c <__sfvwrite_r+0x5c>
   824ce:	89a3      	ldrh	r3, [r4, #12]
   824d0:	f1b8 0f00 	cmp.w	r8, #0
   824d4:	d1db      	bne.n	8248e <__sfvwrite_r+0x8e>
   824d6:	f8d5 a000 	ldr.w	sl, [r5]
   824da:	f8d5 8004 	ldr.w	r8, [r5, #4]
   824de:	3508      	adds	r5, #8
   824e0:	e7d2      	b.n	82488 <__sfvwrite_r+0x88>
   824e2:	f8d5 a000 	ldr.w	sl, [r5]
   824e6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   824ea:	3508      	adds	r5, #8
   824ec:	e7a0      	b.n	82430 <__sfvwrite_r+0x30>
   824ee:	4648      	mov	r0, r9
   824f0:	4621      	mov	r1, r4
   824f2:	f7ff fd59 	bl	81fa8 <_fflush_r>
   824f6:	2800      	cmp	r0, #0
   824f8:	d059      	beq.n	825ae <__sfvwrite_r+0x1ae>
   824fa:	89a3      	ldrh	r3, [r4, #12]
   824fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82500:	f04f 30ff 	mov.w	r0, #4294967295
   82504:	81a3      	strh	r3, [r4, #12]
   82506:	b003      	add	sp, #12
   82508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8250c:	4692      	mov	sl, r2
   8250e:	9201      	str	r2, [sp, #4]
   82510:	4693      	mov	fp, r2
   82512:	4690      	mov	r8, r2
   82514:	f1b8 0f00 	cmp.w	r8, #0
   82518:	d02b      	beq.n	82572 <__sfvwrite_r+0x172>
   8251a:	9f01      	ldr	r7, [sp, #4]
   8251c:	2f00      	cmp	r7, #0
   8251e:	d064      	beq.n	825ea <__sfvwrite_r+0x1ea>
   82520:	6820      	ldr	r0, [r4, #0]
   82522:	6921      	ldr	r1, [r4, #16]
   82524:	45c2      	cmp	sl, r8
   82526:	bf34      	ite	cc
   82528:	4653      	movcc	r3, sl
   8252a:	4643      	movcs	r3, r8
   8252c:	4288      	cmp	r0, r1
   8252e:	461f      	mov	r7, r3
   82530:	f8d4 c008 	ldr.w	ip, [r4, #8]
   82534:	6962      	ldr	r2, [r4, #20]
   82536:	d903      	bls.n	82540 <__sfvwrite_r+0x140>
   82538:	4494      	add	ip, r2
   8253a:	4563      	cmp	r3, ip
   8253c:	f300 80ae 	bgt.w	8269c <__sfvwrite_r+0x29c>
   82540:	4293      	cmp	r3, r2
   82542:	db36      	blt.n	825b2 <__sfvwrite_r+0x1b2>
   82544:	4613      	mov	r3, r2
   82546:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82548:	4648      	mov	r0, r9
   8254a:	69e1      	ldr	r1, [r4, #28]
   8254c:	465a      	mov	r2, fp
   8254e:	47b8      	blx	r7
   82550:	1e07      	subs	r7, r0, #0
   82552:	ddd2      	ble.n	824fa <__sfvwrite_r+0xfa>
   82554:	ebba 0a07 	subs.w	sl, sl, r7
   82558:	d03a      	beq.n	825d0 <__sfvwrite_r+0x1d0>
   8255a:	68b3      	ldr	r3, [r6, #8]
   8255c:	44bb      	add	fp, r7
   8255e:	1bdb      	subs	r3, r3, r7
   82560:	ebc7 0808 	rsb	r8, r7, r8
   82564:	60b3      	str	r3, [r6, #8]
   82566:	2b00      	cmp	r3, #0
   82568:	f43f af78 	beq.w	8245c <__sfvwrite_r+0x5c>
   8256c:	f1b8 0f00 	cmp.w	r8, #0
   82570:	d1d3      	bne.n	8251a <__sfvwrite_r+0x11a>
   82572:	2700      	movs	r7, #0
   82574:	f8d5 b000 	ldr.w	fp, [r5]
   82578:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8257c:	9701      	str	r7, [sp, #4]
   8257e:	3508      	adds	r5, #8
   82580:	e7c8      	b.n	82514 <__sfvwrite_r+0x114>
   82582:	6820      	ldr	r0, [r4, #0]
   82584:	6923      	ldr	r3, [r4, #16]
   82586:	4298      	cmp	r0, r3
   82588:	d802      	bhi.n	82590 <__sfvwrite_r+0x190>
   8258a:	6963      	ldr	r3, [r4, #20]
   8258c:	4598      	cmp	r8, r3
   8258e:	d272      	bcs.n	82676 <__sfvwrite_r+0x276>
   82590:	45b8      	cmp	r8, r7
   82592:	bf38      	it	cc
   82594:	4647      	movcc	r7, r8
   82596:	463a      	mov	r2, r7
   82598:	4651      	mov	r1, sl
   8259a:	f000 fcbf 	bl	82f1c <memmove>
   8259e:	68a3      	ldr	r3, [r4, #8]
   825a0:	6822      	ldr	r2, [r4, #0]
   825a2:	1bdb      	subs	r3, r3, r7
   825a4:	443a      	add	r2, r7
   825a6:	60a3      	str	r3, [r4, #8]
   825a8:	6022      	str	r2, [r4, #0]
   825aa:	2b00      	cmp	r3, #0
   825ac:	d09f      	beq.n	824ee <__sfvwrite_r+0xee>
   825ae:	463a      	mov	r2, r7
   825b0:	e785      	b.n	824be <__sfvwrite_r+0xbe>
   825b2:	461a      	mov	r2, r3
   825b4:	4659      	mov	r1, fp
   825b6:	9300      	str	r3, [sp, #0]
   825b8:	f000 fcb0 	bl	82f1c <memmove>
   825bc:	9b00      	ldr	r3, [sp, #0]
   825be:	68a1      	ldr	r1, [r4, #8]
   825c0:	6822      	ldr	r2, [r4, #0]
   825c2:	1ac9      	subs	r1, r1, r3
   825c4:	ebba 0a07 	subs.w	sl, sl, r7
   825c8:	4413      	add	r3, r2
   825ca:	60a1      	str	r1, [r4, #8]
   825cc:	6023      	str	r3, [r4, #0]
   825ce:	d1c4      	bne.n	8255a <__sfvwrite_r+0x15a>
   825d0:	4648      	mov	r0, r9
   825d2:	4621      	mov	r1, r4
   825d4:	f7ff fce8 	bl	81fa8 <_fflush_r>
   825d8:	2800      	cmp	r0, #0
   825da:	d18e      	bne.n	824fa <__sfvwrite_r+0xfa>
   825dc:	f8cd a004 	str.w	sl, [sp, #4]
   825e0:	e7bb      	b.n	8255a <__sfvwrite_r+0x15a>
   825e2:	6820      	ldr	r0, [r4, #0]
   825e4:	4647      	mov	r7, r8
   825e6:	46c3      	mov	fp, r8
   825e8:	e75d      	b.n	824a6 <__sfvwrite_r+0xa6>
   825ea:	4658      	mov	r0, fp
   825ec:	210a      	movs	r1, #10
   825ee:	4642      	mov	r2, r8
   825f0:	f000 fbd4 	bl	82d9c <memchr>
   825f4:	2800      	cmp	r0, #0
   825f6:	d07f      	beq.n	826f8 <__sfvwrite_r+0x2f8>
   825f8:	f100 0a01 	add.w	sl, r0, #1
   825fc:	2701      	movs	r7, #1
   825fe:	ebcb 0a0a 	rsb	sl, fp, sl
   82602:	9701      	str	r7, [sp, #4]
   82604:	e78c      	b.n	82520 <__sfvwrite_r+0x120>
   82606:	6822      	ldr	r2, [r4, #0]
   82608:	6921      	ldr	r1, [r4, #16]
   8260a:	6967      	ldr	r7, [r4, #20]
   8260c:	ebc1 0c02 	rsb	ip, r1, r2
   82610:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82614:	f10c 0201 	add.w	r2, ip, #1
   82618:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8261c:	4442      	add	r2, r8
   8261e:	107f      	asrs	r7, r7, #1
   82620:	4297      	cmp	r7, r2
   82622:	bf34      	ite	cc
   82624:	4617      	movcc	r7, r2
   82626:	463a      	movcs	r2, r7
   82628:	055b      	lsls	r3, r3, #21
   8262a:	d54f      	bpl.n	826cc <__sfvwrite_r+0x2cc>
   8262c:	4611      	mov	r1, r2
   8262e:	4648      	mov	r0, r9
   82630:	f8cd c000 	str.w	ip, [sp]
   82634:	f000 f916 	bl	82864 <_malloc_r>
   82638:	f8dd c000 	ldr.w	ip, [sp]
   8263c:	4683      	mov	fp, r0
   8263e:	2800      	cmp	r0, #0
   82640:	d062      	beq.n	82708 <__sfvwrite_r+0x308>
   82642:	4662      	mov	r2, ip
   82644:	6921      	ldr	r1, [r4, #16]
   82646:	f8cd c000 	str.w	ip, [sp]
   8264a:	f000 fbf1 	bl	82e30 <memcpy>
   8264e:	89a2      	ldrh	r2, [r4, #12]
   82650:	f8dd c000 	ldr.w	ip, [sp]
   82654:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8265c:	81a2      	strh	r2, [r4, #12]
   8265e:	eb0b 000c 	add.w	r0, fp, ip
   82662:	ebcc 0207 	rsb	r2, ip, r7
   82666:	f8c4 b010 	str.w	fp, [r4, #16]
   8266a:	6167      	str	r7, [r4, #20]
   8266c:	6020      	str	r0, [r4, #0]
   8266e:	60a2      	str	r2, [r4, #8]
   82670:	4647      	mov	r7, r8
   82672:	46c3      	mov	fp, r8
   82674:	e717      	b.n	824a6 <__sfvwrite_r+0xa6>
   82676:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8267a:	4590      	cmp	r8, r2
   8267c:	bf38      	it	cc
   8267e:	4642      	movcc	r2, r8
   82680:	fb92 f2f3 	sdiv	r2, r2, r3
   82684:	fb02 f303 	mul.w	r3, r2, r3
   82688:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8268a:	4648      	mov	r0, r9
   8268c:	69e1      	ldr	r1, [r4, #28]
   8268e:	4652      	mov	r2, sl
   82690:	47b8      	blx	r7
   82692:	2800      	cmp	r0, #0
   82694:	f77f af31 	ble.w	824fa <__sfvwrite_r+0xfa>
   82698:	4602      	mov	r2, r0
   8269a:	e710      	b.n	824be <__sfvwrite_r+0xbe>
   8269c:	4662      	mov	r2, ip
   8269e:	4659      	mov	r1, fp
   826a0:	f8cd c000 	str.w	ip, [sp]
   826a4:	f000 fc3a 	bl	82f1c <memmove>
   826a8:	f8dd c000 	ldr.w	ip, [sp]
   826ac:	6823      	ldr	r3, [r4, #0]
   826ae:	4648      	mov	r0, r9
   826b0:	4463      	add	r3, ip
   826b2:	6023      	str	r3, [r4, #0]
   826b4:	4621      	mov	r1, r4
   826b6:	f8cd c000 	str.w	ip, [sp]
   826ba:	f7ff fc75 	bl	81fa8 <_fflush_r>
   826be:	f8dd c000 	ldr.w	ip, [sp]
   826c2:	2800      	cmp	r0, #0
   826c4:	f47f af19 	bne.w	824fa <__sfvwrite_r+0xfa>
   826c8:	4667      	mov	r7, ip
   826ca:	e743      	b.n	82554 <__sfvwrite_r+0x154>
   826cc:	4648      	mov	r0, r9
   826ce:	f8cd c000 	str.w	ip, [sp]
   826d2:	f000 fc8d 	bl	82ff0 <_realloc_r>
   826d6:	f8dd c000 	ldr.w	ip, [sp]
   826da:	4683      	mov	fp, r0
   826dc:	2800      	cmp	r0, #0
   826de:	d1be      	bne.n	8265e <__sfvwrite_r+0x25e>
   826e0:	4648      	mov	r0, r9
   826e2:	6921      	ldr	r1, [r4, #16]
   826e4:	f7ff fdc0 	bl	82268 <_free_r>
   826e8:	89a3      	ldrh	r3, [r4, #12]
   826ea:	220c      	movs	r2, #12
   826ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   826f0:	b29b      	uxth	r3, r3
   826f2:	f8c9 2000 	str.w	r2, [r9]
   826f6:	e701      	b.n	824fc <__sfvwrite_r+0xfc>
   826f8:	2701      	movs	r7, #1
   826fa:	f108 0a01 	add.w	sl, r8, #1
   826fe:	9701      	str	r7, [sp, #4]
   82700:	e70e      	b.n	82520 <__sfvwrite_r+0x120>
   82702:	f04f 30ff 	mov.w	r0, #4294967295
   82706:	e6aa      	b.n	8245e <__sfvwrite_r+0x5e>
   82708:	230c      	movs	r3, #12
   8270a:	f8c9 3000 	str.w	r3, [r9]
   8270e:	89a3      	ldrh	r3, [r4, #12]
   82710:	e6f4      	b.n	824fc <__sfvwrite_r+0xfc>
   82712:	bf00      	nop
   82714:	7ffffc00 	.word	0x7ffffc00

00082718 <_fwalk>:
   82718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8271c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82720:	4688      	mov	r8, r1
   82722:	d019      	beq.n	82758 <_fwalk+0x40>
   82724:	2600      	movs	r6, #0
   82726:	687d      	ldr	r5, [r7, #4]
   82728:	68bc      	ldr	r4, [r7, #8]
   8272a:	3d01      	subs	r5, #1
   8272c:	d40e      	bmi.n	8274c <_fwalk+0x34>
   8272e:	89a3      	ldrh	r3, [r4, #12]
   82730:	3d01      	subs	r5, #1
   82732:	2b01      	cmp	r3, #1
   82734:	d906      	bls.n	82744 <_fwalk+0x2c>
   82736:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8273a:	4620      	mov	r0, r4
   8273c:	3301      	adds	r3, #1
   8273e:	d001      	beq.n	82744 <_fwalk+0x2c>
   82740:	47c0      	blx	r8
   82742:	4306      	orrs	r6, r0
   82744:	1c6b      	adds	r3, r5, #1
   82746:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8274a:	d1f0      	bne.n	8272e <_fwalk+0x16>
   8274c:	683f      	ldr	r7, [r7, #0]
   8274e:	2f00      	cmp	r7, #0
   82750:	d1e9      	bne.n	82726 <_fwalk+0xe>
   82752:	4630      	mov	r0, r6
   82754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82758:	463e      	mov	r6, r7
   8275a:	4630      	mov	r0, r6
   8275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082760 <__locale_charset>:
   82760:	4800      	ldr	r0, [pc, #0]	; (82764 <__locale_charset+0x4>)
   82762:	4770      	bx	lr
   82764:	2007056c 	.word	0x2007056c

00082768 <__locale_mb_cur_max>:
   82768:	4b01      	ldr	r3, [pc, #4]	; (82770 <__locale_mb_cur_max+0x8>)
   8276a:	6818      	ldr	r0, [r3, #0]
   8276c:	4770      	bx	lr
   8276e:	bf00      	nop
   82770:	2007058c 	.word	0x2007058c

00082774 <__smakebuf_r>:
   82774:	b5f0      	push	{r4, r5, r6, r7, lr}
   82776:	898b      	ldrh	r3, [r1, #12]
   82778:	b091      	sub	sp, #68	; 0x44
   8277a:	b29a      	uxth	r2, r3
   8277c:	0796      	lsls	r6, r2, #30
   8277e:	460c      	mov	r4, r1
   82780:	4605      	mov	r5, r0
   82782:	d437      	bmi.n	827f4 <__smakebuf_r+0x80>
   82784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82788:	2900      	cmp	r1, #0
   8278a:	db17      	blt.n	827bc <__smakebuf_r+0x48>
   8278c:	aa01      	add	r2, sp, #4
   8278e:	f000 ffdf 	bl	83750 <_fstat_r>
   82792:	2800      	cmp	r0, #0
   82794:	db10      	blt.n	827b8 <__smakebuf_r+0x44>
   82796:	9b02      	ldr	r3, [sp, #8]
   82798:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   8279c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   827a0:	424f      	negs	r7, r1
   827a2:	414f      	adcs	r7, r1
   827a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   827a8:	d02c      	beq.n	82804 <__smakebuf_r+0x90>
   827aa:	89a3      	ldrh	r3, [r4, #12]
   827ac:	f44f 6680 	mov.w	r6, #1024	; 0x400
   827b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   827b4:	81a3      	strh	r3, [r4, #12]
   827b6:	e00b      	b.n	827d0 <__smakebuf_r+0x5c>
   827b8:	89a3      	ldrh	r3, [r4, #12]
   827ba:	b29a      	uxth	r2, r3
   827bc:	f012 0f80 	tst.w	r2, #128	; 0x80
   827c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   827c4:	81a3      	strh	r3, [r4, #12]
   827c6:	bf14      	ite	ne
   827c8:	2640      	movne	r6, #64	; 0x40
   827ca:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   827ce:	2700      	movs	r7, #0
   827d0:	4628      	mov	r0, r5
   827d2:	4631      	mov	r1, r6
   827d4:	f000 f846 	bl	82864 <_malloc_r>
   827d8:	89a3      	ldrh	r3, [r4, #12]
   827da:	2800      	cmp	r0, #0
   827dc:	d029      	beq.n	82832 <__smakebuf_r+0xbe>
   827de:	4a1b      	ldr	r2, [pc, #108]	; (8284c <__smakebuf_r+0xd8>)
   827e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   827e4:	63ea      	str	r2, [r5, #60]	; 0x3c
   827e6:	81a3      	strh	r3, [r4, #12]
   827e8:	6020      	str	r0, [r4, #0]
   827ea:	6120      	str	r0, [r4, #16]
   827ec:	6166      	str	r6, [r4, #20]
   827ee:	b9a7      	cbnz	r7, 8281a <__smakebuf_r+0xa6>
   827f0:	b011      	add	sp, #68	; 0x44
   827f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   827f4:	f101 0343 	add.w	r3, r1, #67	; 0x43
   827f8:	2201      	movs	r2, #1
   827fa:	600b      	str	r3, [r1, #0]
   827fc:	610b      	str	r3, [r1, #16]
   827fe:	614a      	str	r2, [r1, #20]
   82800:	b011      	add	sp, #68	; 0x44
   82802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82804:	4a12      	ldr	r2, [pc, #72]	; (82850 <__smakebuf_r+0xdc>)
   82806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82808:	4293      	cmp	r3, r2
   8280a:	d1ce      	bne.n	827aa <__smakebuf_r+0x36>
   8280c:	89a3      	ldrh	r3, [r4, #12]
   8280e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82812:	4333      	orrs	r3, r6
   82814:	81a3      	strh	r3, [r4, #12]
   82816:	64e6      	str	r6, [r4, #76]	; 0x4c
   82818:	e7da      	b.n	827d0 <__smakebuf_r+0x5c>
   8281a:	4628      	mov	r0, r5
   8281c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82820:	f000 ffaa 	bl	83778 <_isatty_r>
   82824:	2800      	cmp	r0, #0
   82826:	d0e3      	beq.n	827f0 <__smakebuf_r+0x7c>
   82828:	89a3      	ldrh	r3, [r4, #12]
   8282a:	f043 0301 	orr.w	r3, r3, #1
   8282e:	81a3      	strh	r3, [r4, #12]
   82830:	e7de      	b.n	827f0 <__smakebuf_r+0x7c>
   82832:	059a      	lsls	r2, r3, #22
   82834:	d4dc      	bmi.n	827f0 <__smakebuf_r+0x7c>
   82836:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8283a:	f043 0302 	orr.w	r3, r3, #2
   8283e:	2101      	movs	r1, #1
   82840:	81a3      	strh	r3, [r4, #12]
   82842:	6022      	str	r2, [r4, #0]
   82844:	6122      	str	r2, [r4, #16]
   82846:	6161      	str	r1, [r4, #20]
   82848:	e7d2      	b.n	827f0 <__smakebuf_r+0x7c>
   8284a:	bf00      	nop
   8284c:	00081fd5 	.word	0x00081fd5
   82850:	00083431 	.word	0x00083431

00082854 <malloc>:
   82854:	4b02      	ldr	r3, [pc, #8]	; (82860 <malloc+0xc>)
   82856:	4601      	mov	r1, r0
   82858:	6818      	ldr	r0, [r3, #0]
   8285a:	f000 b803 	b.w	82864 <_malloc_r>
   8285e:	bf00      	nop
   82860:	20070568 	.word	0x20070568

00082864 <_malloc_r>:
   82864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82868:	f101 050b 	add.w	r5, r1, #11
   8286c:	2d16      	cmp	r5, #22
   8286e:	b083      	sub	sp, #12
   82870:	4606      	mov	r6, r0
   82872:	d927      	bls.n	828c4 <_malloc_r+0x60>
   82874:	f035 0507 	bics.w	r5, r5, #7
   82878:	d427      	bmi.n	828ca <_malloc_r+0x66>
   8287a:	42a9      	cmp	r1, r5
   8287c:	d825      	bhi.n	828ca <_malloc_r+0x66>
   8287e:	4630      	mov	r0, r6
   82880:	f000 fbb2 	bl	82fe8 <__malloc_lock>
   82884:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82888:	d226      	bcs.n	828d8 <_malloc_r+0x74>
   8288a:	4fc1      	ldr	r7, [pc, #772]	; (82b90 <_malloc_r+0x32c>)
   8288c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82890:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82894:	68dc      	ldr	r4, [r3, #12]
   82896:	429c      	cmp	r4, r3
   82898:	f000 81d2 	beq.w	82c40 <_malloc_r+0x3dc>
   8289c:	6863      	ldr	r3, [r4, #4]
   8289e:	68e2      	ldr	r2, [r4, #12]
   828a0:	f023 0303 	bic.w	r3, r3, #3
   828a4:	4423      	add	r3, r4
   828a6:	6858      	ldr	r0, [r3, #4]
   828a8:	68a1      	ldr	r1, [r4, #8]
   828aa:	f040 0501 	orr.w	r5, r0, #1
   828ae:	60ca      	str	r2, [r1, #12]
   828b0:	4630      	mov	r0, r6
   828b2:	6091      	str	r1, [r2, #8]
   828b4:	605d      	str	r5, [r3, #4]
   828b6:	f000 fb99 	bl	82fec <__malloc_unlock>
   828ba:	3408      	adds	r4, #8
   828bc:	4620      	mov	r0, r4
   828be:	b003      	add	sp, #12
   828c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828c4:	2510      	movs	r5, #16
   828c6:	42a9      	cmp	r1, r5
   828c8:	d9d9      	bls.n	8287e <_malloc_r+0x1a>
   828ca:	2400      	movs	r4, #0
   828cc:	230c      	movs	r3, #12
   828ce:	4620      	mov	r0, r4
   828d0:	6033      	str	r3, [r6, #0]
   828d2:	b003      	add	sp, #12
   828d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828d8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   828dc:	f000 8089 	beq.w	829f2 <_malloc_r+0x18e>
   828e0:	f1bc 0f04 	cmp.w	ip, #4
   828e4:	f200 8160 	bhi.w	82ba8 <_malloc_r+0x344>
   828e8:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   828ec:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   828f0:	ea4f 014c 	mov.w	r1, ip, lsl #1
   828f4:	4fa6      	ldr	r7, [pc, #664]	; (82b90 <_malloc_r+0x32c>)
   828f6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   828fa:	68cc      	ldr	r4, [r1, #12]
   828fc:	42a1      	cmp	r1, r4
   828fe:	d105      	bne.n	8290c <_malloc_r+0xa8>
   82900:	e00c      	b.n	8291c <_malloc_r+0xb8>
   82902:	2b00      	cmp	r3, #0
   82904:	da79      	bge.n	829fa <_malloc_r+0x196>
   82906:	68e4      	ldr	r4, [r4, #12]
   82908:	42a1      	cmp	r1, r4
   8290a:	d007      	beq.n	8291c <_malloc_r+0xb8>
   8290c:	6862      	ldr	r2, [r4, #4]
   8290e:	f022 0203 	bic.w	r2, r2, #3
   82912:	1b53      	subs	r3, r2, r5
   82914:	2b0f      	cmp	r3, #15
   82916:	ddf4      	ble.n	82902 <_malloc_r+0x9e>
   82918:	f10c 3cff 	add.w	ip, ip, #4294967295
   8291c:	f10c 0c01 	add.w	ip, ip, #1
   82920:	4b9b      	ldr	r3, [pc, #620]	; (82b90 <_malloc_r+0x32c>)
   82922:	693c      	ldr	r4, [r7, #16]
   82924:	f103 0e08 	add.w	lr, r3, #8
   82928:	4574      	cmp	r4, lr
   8292a:	f000 817e 	beq.w	82c2a <_malloc_r+0x3c6>
   8292e:	6861      	ldr	r1, [r4, #4]
   82930:	f021 0103 	bic.w	r1, r1, #3
   82934:	1b4a      	subs	r2, r1, r5
   82936:	2a0f      	cmp	r2, #15
   82938:	f300 8164 	bgt.w	82c04 <_malloc_r+0x3a0>
   8293c:	2a00      	cmp	r2, #0
   8293e:	f8c3 e014 	str.w	lr, [r3, #20]
   82942:	f8c3 e010 	str.w	lr, [r3, #16]
   82946:	da69      	bge.n	82a1c <_malloc_r+0x1b8>
   82948:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8294c:	f080 813a 	bcs.w	82bc4 <_malloc_r+0x360>
   82950:	08c9      	lsrs	r1, r1, #3
   82952:	108a      	asrs	r2, r1, #2
   82954:	f04f 0801 	mov.w	r8, #1
   82958:	fa08 f802 	lsl.w	r8, r8, r2
   8295c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82960:	685a      	ldr	r2, [r3, #4]
   82962:	6888      	ldr	r0, [r1, #8]
   82964:	ea48 0202 	orr.w	r2, r8, r2
   82968:	60a0      	str	r0, [r4, #8]
   8296a:	60e1      	str	r1, [r4, #12]
   8296c:	605a      	str	r2, [r3, #4]
   8296e:	608c      	str	r4, [r1, #8]
   82970:	60c4      	str	r4, [r0, #12]
   82972:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82976:	2001      	movs	r0, #1
   82978:	4098      	lsls	r0, r3
   8297a:	4290      	cmp	r0, r2
   8297c:	d85b      	bhi.n	82a36 <_malloc_r+0x1d2>
   8297e:	4202      	tst	r2, r0
   82980:	d106      	bne.n	82990 <_malloc_r+0x12c>
   82982:	f02c 0c03 	bic.w	ip, ip, #3
   82986:	0040      	lsls	r0, r0, #1
   82988:	4202      	tst	r2, r0
   8298a:	f10c 0c04 	add.w	ip, ip, #4
   8298e:	d0fa      	beq.n	82986 <_malloc_r+0x122>
   82990:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82994:	4644      	mov	r4, r8
   82996:	46e1      	mov	r9, ip
   82998:	68e3      	ldr	r3, [r4, #12]
   8299a:	429c      	cmp	r4, r3
   8299c:	d107      	bne.n	829ae <_malloc_r+0x14a>
   8299e:	e146      	b.n	82c2e <_malloc_r+0x3ca>
   829a0:	2a00      	cmp	r2, #0
   829a2:	f280 8157 	bge.w	82c54 <_malloc_r+0x3f0>
   829a6:	68db      	ldr	r3, [r3, #12]
   829a8:	429c      	cmp	r4, r3
   829aa:	f000 8140 	beq.w	82c2e <_malloc_r+0x3ca>
   829ae:	6859      	ldr	r1, [r3, #4]
   829b0:	f021 0103 	bic.w	r1, r1, #3
   829b4:	1b4a      	subs	r2, r1, r5
   829b6:	2a0f      	cmp	r2, #15
   829b8:	ddf2      	ble.n	829a0 <_malloc_r+0x13c>
   829ba:	461c      	mov	r4, r3
   829bc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   829c0:	68d9      	ldr	r1, [r3, #12]
   829c2:	f045 0901 	orr.w	r9, r5, #1
   829c6:	f042 0801 	orr.w	r8, r2, #1
   829ca:	441d      	add	r5, r3
   829cc:	f8c3 9004 	str.w	r9, [r3, #4]
   829d0:	4630      	mov	r0, r6
   829d2:	f8cc 100c 	str.w	r1, [ip, #12]
   829d6:	f8c1 c008 	str.w	ip, [r1, #8]
   829da:	617d      	str	r5, [r7, #20]
   829dc:	613d      	str	r5, [r7, #16]
   829de:	f8c5 e00c 	str.w	lr, [r5, #12]
   829e2:	f8c5 e008 	str.w	lr, [r5, #8]
   829e6:	f8c5 8004 	str.w	r8, [r5, #4]
   829ea:	50aa      	str	r2, [r5, r2]
   829ec:	f000 fafe 	bl	82fec <__malloc_unlock>
   829f0:	e764      	b.n	828bc <_malloc_r+0x58>
   829f2:	217e      	movs	r1, #126	; 0x7e
   829f4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   829f8:	e77c      	b.n	828f4 <_malloc_r+0x90>
   829fa:	4422      	add	r2, r4
   829fc:	6850      	ldr	r0, [r2, #4]
   829fe:	68e3      	ldr	r3, [r4, #12]
   82a00:	68a1      	ldr	r1, [r4, #8]
   82a02:	f040 0501 	orr.w	r5, r0, #1
   82a06:	60cb      	str	r3, [r1, #12]
   82a08:	4630      	mov	r0, r6
   82a0a:	6099      	str	r1, [r3, #8]
   82a0c:	6055      	str	r5, [r2, #4]
   82a0e:	f000 faed 	bl	82fec <__malloc_unlock>
   82a12:	3408      	adds	r4, #8
   82a14:	4620      	mov	r0, r4
   82a16:	b003      	add	sp, #12
   82a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a1c:	4421      	add	r1, r4
   82a1e:	684b      	ldr	r3, [r1, #4]
   82a20:	4630      	mov	r0, r6
   82a22:	f043 0301 	orr.w	r3, r3, #1
   82a26:	604b      	str	r3, [r1, #4]
   82a28:	f000 fae0 	bl	82fec <__malloc_unlock>
   82a2c:	3408      	adds	r4, #8
   82a2e:	4620      	mov	r0, r4
   82a30:	b003      	add	sp, #12
   82a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a36:	68bc      	ldr	r4, [r7, #8]
   82a38:	6863      	ldr	r3, [r4, #4]
   82a3a:	f023 0903 	bic.w	r9, r3, #3
   82a3e:	45a9      	cmp	r9, r5
   82a40:	d304      	bcc.n	82a4c <_malloc_r+0x1e8>
   82a42:	ebc5 0309 	rsb	r3, r5, r9
   82a46:	2b0f      	cmp	r3, #15
   82a48:	f300 8091 	bgt.w	82b6e <_malloc_r+0x30a>
   82a4c:	4b51      	ldr	r3, [pc, #324]	; (82b94 <_malloc_r+0x330>)
   82a4e:	4a52      	ldr	r2, [pc, #328]	; (82b98 <_malloc_r+0x334>)
   82a50:	6819      	ldr	r1, [r3, #0]
   82a52:	6813      	ldr	r3, [r2, #0]
   82a54:	eb05 0a01 	add.w	sl, r5, r1
   82a58:	3301      	adds	r3, #1
   82a5a:	eb04 0b09 	add.w	fp, r4, r9
   82a5e:	f000 8161 	beq.w	82d24 <_malloc_r+0x4c0>
   82a62:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82a66:	f10a 0a0f 	add.w	sl, sl, #15
   82a6a:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82a6e:	f02a 0a0f 	bic.w	sl, sl, #15
   82a72:	4630      	mov	r0, r6
   82a74:	4651      	mov	r1, sl
   82a76:	9201      	str	r2, [sp, #4]
   82a78:	f000 fc9a 	bl	833b0 <_sbrk_r>
   82a7c:	f1b0 3fff 	cmp.w	r0, #4294967295
   82a80:	4680      	mov	r8, r0
   82a82:	9a01      	ldr	r2, [sp, #4]
   82a84:	f000 8101 	beq.w	82c8a <_malloc_r+0x426>
   82a88:	4583      	cmp	fp, r0
   82a8a:	f200 80fb 	bhi.w	82c84 <_malloc_r+0x420>
   82a8e:	f8df c114 	ldr.w	ip, [pc, #276]	; 82ba4 <_malloc_r+0x340>
   82a92:	45c3      	cmp	fp, r8
   82a94:	f8dc 3000 	ldr.w	r3, [ip]
   82a98:	4453      	add	r3, sl
   82a9a:	f8cc 3000 	str.w	r3, [ip]
   82a9e:	f000 814a 	beq.w	82d36 <_malloc_r+0x4d2>
   82aa2:	6812      	ldr	r2, [r2, #0]
   82aa4:	493c      	ldr	r1, [pc, #240]	; (82b98 <_malloc_r+0x334>)
   82aa6:	3201      	adds	r2, #1
   82aa8:	bf1b      	ittet	ne
   82aaa:	ebcb 0b08 	rsbne	fp, fp, r8
   82aae:	445b      	addne	r3, fp
   82ab0:	f8c1 8000 	streq.w	r8, [r1]
   82ab4:	f8cc 3000 	strne.w	r3, [ip]
   82ab8:	f018 0307 	ands.w	r3, r8, #7
   82abc:	f000 8114 	beq.w	82ce8 <_malloc_r+0x484>
   82ac0:	f1c3 0208 	rsb	r2, r3, #8
   82ac4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82ac8:	4490      	add	r8, r2
   82aca:	3308      	adds	r3, #8
   82acc:	44c2      	add	sl, r8
   82ace:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82ad2:	ebca 0a03 	rsb	sl, sl, r3
   82ad6:	4651      	mov	r1, sl
   82ad8:	4630      	mov	r0, r6
   82ada:	f8cd c004 	str.w	ip, [sp, #4]
   82ade:	f000 fc67 	bl	833b0 <_sbrk_r>
   82ae2:	1c43      	adds	r3, r0, #1
   82ae4:	f8dd c004 	ldr.w	ip, [sp, #4]
   82ae8:	f000 8135 	beq.w	82d56 <_malloc_r+0x4f2>
   82aec:	ebc8 0200 	rsb	r2, r8, r0
   82af0:	4452      	add	r2, sl
   82af2:	f042 0201 	orr.w	r2, r2, #1
   82af6:	f8dc 3000 	ldr.w	r3, [ip]
   82afa:	42bc      	cmp	r4, r7
   82afc:	4453      	add	r3, sl
   82afe:	f8c7 8008 	str.w	r8, [r7, #8]
   82b02:	f8cc 3000 	str.w	r3, [ip]
   82b06:	f8c8 2004 	str.w	r2, [r8, #4]
   82b0a:	f8df a098 	ldr.w	sl, [pc, #152]	; 82ba4 <_malloc_r+0x340>
   82b0e:	d015      	beq.n	82b3c <_malloc_r+0x2d8>
   82b10:	f1b9 0f0f 	cmp.w	r9, #15
   82b14:	f240 80eb 	bls.w	82cee <_malloc_r+0x48a>
   82b18:	6861      	ldr	r1, [r4, #4]
   82b1a:	f1a9 020c 	sub.w	r2, r9, #12
   82b1e:	f022 0207 	bic.w	r2, r2, #7
   82b22:	f001 0101 	and.w	r1, r1, #1
   82b26:	ea42 0e01 	orr.w	lr, r2, r1
   82b2a:	2005      	movs	r0, #5
   82b2c:	18a1      	adds	r1, r4, r2
   82b2e:	2a0f      	cmp	r2, #15
   82b30:	f8c4 e004 	str.w	lr, [r4, #4]
   82b34:	6048      	str	r0, [r1, #4]
   82b36:	6088      	str	r0, [r1, #8]
   82b38:	f200 8111 	bhi.w	82d5e <_malloc_r+0x4fa>
   82b3c:	4a17      	ldr	r2, [pc, #92]	; (82b9c <_malloc_r+0x338>)
   82b3e:	68bc      	ldr	r4, [r7, #8]
   82b40:	6811      	ldr	r1, [r2, #0]
   82b42:	428b      	cmp	r3, r1
   82b44:	bf88      	it	hi
   82b46:	6013      	strhi	r3, [r2, #0]
   82b48:	4a15      	ldr	r2, [pc, #84]	; (82ba0 <_malloc_r+0x33c>)
   82b4a:	6811      	ldr	r1, [r2, #0]
   82b4c:	428b      	cmp	r3, r1
   82b4e:	bf88      	it	hi
   82b50:	6013      	strhi	r3, [r2, #0]
   82b52:	6862      	ldr	r2, [r4, #4]
   82b54:	f022 0203 	bic.w	r2, r2, #3
   82b58:	4295      	cmp	r5, r2
   82b5a:	ebc5 0302 	rsb	r3, r5, r2
   82b5e:	d801      	bhi.n	82b64 <_malloc_r+0x300>
   82b60:	2b0f      	cmp	r3, #15
   82b62:	dc04      	bgt.n	82b6e <_malloc_r+0x30a>
   82b64:	4630      	mov	r0, r6
   82b66:	f000 fa41 	bl	82fec <__malloc_unlock>
   82b6a:	2400      	movs	r4, #0
   82b6c:	e6a6      	b.n	828bc <_malloc_r+0x58>
   82b6e:	f045 0201 	orr.w	r2, r5, #1
   82b72:	f043 0301 	orr.w	r3, r3, #1
   82b76:	4425      	add	r5, r4
   82b78:	6062      	str	r2, [r4, #4]
   82b7a:	4630      	mov	r0, r6
   82b7c:	60bd      	str	r5, [r7, #8]
   82b7e:	606b      	str	r3, [r5, #4]
   82b80:	f000 fa34 	bl	82fec <__malloc_unlock>
   82b84:	3408      	adds	r4, #8
   82b86:	4620      	mov	r0, r4
   82b88:	b003      	add	sp, #12
   82b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b8e:	bf00      	nop
   82b90:	20070590 	.word	0x20070590
   82b94:	20070a3c 	.word	0x20070a3c
   82b98:	2007099c 	.word	0x2007099c
   82b9c:	20070a38 	.word	0x20070a38
   82ba0:	20070a34 	.word	0x20070a34
   82ba4:	20070a40 	.word	0x20070a40
   82ba8:	f1bc 0f14 	cmp.w	ip, #20
   82bac:	d961      	bls.n	82c72 <_malloc_r+0x40e>
   82bae:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82bb2:	f200 808f 	bhi.w	82cd4 <_malloc_r+0x470>
   82bb6:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82bba:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82bbe:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82bc2:	e697      	b.n	828f4 <_malloc_r+0x90>
   82bc4:	0a4b      	lsrs	r3, r1, #9
   82bc6:	2b04      	cmp	r3, #4
   82bc8:	d958      	bls.n	82c7c <_malloc_r+0x418>
   82bca:	2b14      	cmp	r3, #20
   82bcc:	f200 80ad 	bhi.w	82d2a <_malloc_r+0x4c6>
   82bd0:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82bd4:	0050      	lsls	r0, r2, #1
   82bd6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82bda:	6883      	ldr	r3, [r0, #8]
   82bdc:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82d98 <_malloc_r+0x534>
   82be0:	4283      	cmp	r3, r0
   82be2:	f000 808a 	beq.w	82cfa <_malloc_r+0x496>
   82be6:	685a      	ldr	r2, [r3, #4]
   82be8:	f022 0203 	bic.w	r2, r2, #3
   82bec:	4291      	cmp	r1, r2
   82bee:	d202      	bcs.n	82bf6 <_malloc_r+0x392>
   82bf0:	689b      	ldr	r3, [r3, #8]
   82bf2:	4298      	cmp	r0, r3
   82bf4:	d1f7      	bne.n	82be6 <_malloc_r+0x382>
   82bf6:	68d9      	ldr	r1, [r3, #12]
   82bf8:	687a      	ldr	r2, [r7, #4]
   82bfa:	60e1      	str	r1, [r4, #12]
   82bfc:	60a3      	str	r3, [r4, #8]
   82bfe:	608c      	str	r4, [r1, #8]
   82c00:	60dc      	str	r4, [r3, #12]
   82c02:	e6b6      	b.n	82972 <_malloc_r+0x10e>
   82c04:	f045 0701 	orr.w	r7, r5, #1
   82c08:	f042 0101 	orr.w	r1, r2, #1
   82c0c:	4425      	add	r5, r4
   82c0e:	6067      	str	r7, [r4, #4]
   82c10:	4630      	mov	r0, r6
   82c12:	615d      	str	r5, [r3, #20]
   82c14:	611d      	str	r5, [r3, #16]
   82c16:	f8c5 e00c 	str.w	lr, [r5, #12]
   82c1a:	f8c5 e008 	str.w	lr, [r5, #8]
   82c1e:	6069      	str	r1, [r5, #4]
   82c20:	50aa      	str	r2, [r5, r2]
   82c22:	3408      	adds	r4, #8
   82c24:	f000 f9e2 	bl	82fec <__malloc_unlock>
   82c28:	e648      	b.n	828bc <_malloc_r+0x58>
   82c2a:	685a      	ldr	r2, [r3, #4]
   82c2c:	e6a1      	b.n	82972 <_malloc_r+0x10e>
   82c2e:	f109 0901 	add.w	r9, r9, #1
   82c32:	f019 0f03 	tst.w	r9, #3
   82c36:	f104 0408 	add.w	r4, r4, #8
   82c3a:	f47f aead 	bne.w	82998 <_malloc_r+0x134>
   82c3e:	e02d      	b.n	82c9c <_malloc_r+0x438>
   82c40:	f104 0308 	add.w	r3, r4, #8
   82c44:	6964      	ldr	r4, [r4, #20]
   82c46:	42a3      	cmp	r3, r4
   82c48:	bf08      	it	eq
   82c4a:	f10c 0c02 	addeq.w	ip, ip, #2
   82c4e:	f43f ae67 	beq.w	82920 <_malloc_r+0xbc>
   82c52:	e623      	b.n	8289c <_malloc_r+0x38>
   82c54:	4419      	add	r1, r3
   82c56:	6848      	ldr	r0, [r1, #4]
   82c58:	461c      	mov	r4, r3
   82c5a:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82c5e:	68db      	ldr	r3, [r3, #12]
   82c60:	f040 0501 	orr.w	r5, r0, #1
   82c64:	604d      	str	r5, [r1, #4]
   82c66:	4630      	mov	r0, r6
   82c68:	60d3      	str	r3, [r2, #12]
   82c6a:	609a      	str	r2, [r3, #8]
   82c6c:	f000 f9be 	bl	82fec <__malloc_unlock>
   82c70:	e624      	b.n	828bc <_malloc_r+0x58>
   82c72:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   82c76:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82c7a:	e63b      	b.n	828f4 <_malloc_r+0x90>
   82c7c:	098a      	lsrs	r2, r1, #6
   82c7e:	3238      	adds	r2, #56	; 0x38
   82c80:	0050      	lsls	r0, r2, #1
   82c82:	e7a8      	b.n	82bd6 <_malloc_r+0x372>
   82c84:	42bc      	cmp	r4, r7
   82c86:	f43f af02 	beq.w	82a8e <_malloc_r+0x22a>
   82c8a:	68bc      	ldr	r4, [r7, #8]
   82c8c:	6862      	ldr	r2, [r4, #4]
   82c8e:	f022 0203 	bic.w	r2, r2, #3
   82c92:	e761      	b.n	82b58 <_malloc_r+0x2f4>
   82c94:	f8d8 8000 	ldr.w	r8, [r8]
   82c98:	4598      	cmp	r8, r3
   82c9a:	d17a      	bne.n	82d92 <_malloc_r+0x52e>
   82c9c:	f01c 0f03 	tst.w	ip, #3
   82ca0:	f1a8 0308 	sub.w	r3, r8, #8
   82ca4:	f10c 3cff 	add.w	ip, ip, #4294967295
   82ca8:	d1f4      	bne.n	82c94 <_malloc_r+0x430>
   82caa:	687b      	ldr	r3, [r7, #4]
   82cac:	ea23 0300 	bic.w	r3, r3, r0
   82cb0:	607b      	str	r3, [r7, #4]
   82cb2:	0040      	lsls	r0, r0, #1
   82cb4:	4298      	cmp	r0, r3
   82cb6:	f63f aebe 	bhi.w	82a36 <_malloc_r+0x1d2>
   82cba:	2800      	cmp	r0, #0
   82cbc:	f43f aebb 	beq.w	82a36 <_malloc_r+0x1d2>
   82cc0:	4203      	tst	r3, r0
   82cc2:	46cc      	mov	ip, r9
   82cc4:	f47f ae64 	bne.w	82990 <_malloc_r+0x12c>
   82cc8:	0040      	lsls	r0, r0, #1
   82cca:	4203      	tst	r3, r0
   82ccc:	f10c 0c04 	add.w	ip, ip, #4
   82cd0:	d0fa      	beq.n	82cc8 <_malloc_r+0x464>
   82cd2:	e65d      	b.n	82990 <_malloc_r+0x12c>
   82cd4:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   82cd8:	d819      	bhi.n	82d0e <_malloc_r+0x4aa>
   82cda:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82cde:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82ce2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ce6:	e605      	b.n	828f4 <_malloc_r+0x90>
   82ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82cec:	e6ee      	b.n	82acc <_malloc_r+0x268>
   82cee:	2301      	movs	r3, #1
   82cf0:	f8c8 3004 	str.w	r3, [r8, #4]
   82cf4:	4644      	mov	r4, r8
   82cf6:	2200      	movs	r2, #0
   82cf8:	e72e      	b.n	82b58 <_malloc_r+0x2f4>
   82cfa:	1092      	asrs	r2, r2, #2
   82cfc:	2001      	movs	r0, #1
   82cfe:	4090      	lsls	r0, r2
   82d00:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82d04:	4619      	mov	r1, r3
   82d06:	4302      	orrs	r2, r0
   82d08:	f8c8 2004 	str.w	r2, [r8, #4]
   82d0c:	e775      	b.n	82bfa <_malloc_r+0x396>
   82d0e:	f240 5354 	movw	r3, #1364	; 0x554
   82d12:	459c      	cmp	ip, r3
   82d14:	d81b      	bhi.n	82d4e <_malloc_r+0x4ea>
   82d16:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   82d1a:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82d1e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82d22:	e5e7      	b.n	828f4 <_malloc_r+0x90>
   82d24:	f10a 0a10 	add.w	sl, sl, #16
   82d28:	e6a3      	b.n	82a72 <_malloc_r+0x20e>
   82d2a:	2b54      	cmp	r3, #84	; 0x54
   82d2c:	d81f      	bhi.n	82d6e <_malloc_r+0x50a>
   82d2e:	0b0a      	lsrs	r2, r1, #12
   82d30:	326e      	adds	r2, #110	; 0x6e
   82d32:	0050      	lsls	r0, r2, #1
   82d34:	e74f      	b.n	82bd6 <_malloc_r+0x372>
   82d36:	f3cb 010b 	ubfx	r1, fp, #0, #12
   82d3a:	2900      	cmp	r1, #0
   82d3c:	f47f aeb1 	bne.w	82aa2 <_malloc_r+0x23e>
   82d40:	eb0a 0109 	add.w	r1, sl, r9
   82d44:	68ba      	ldr	r2, [r7, #8]
   82d46:	f041 0101 	orr.w	r1, r1, #1
   82d4a:	6051      	str	r1, [r2, #4]
   82d4c:	e6f6      	b.n	82b3c <_malloc_r+0x2d8>
   82d4e:	21fc      	movs	r1, #252	; 0xfc
   82d50:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82d54:	e5ce      	b.n	828f4 <_malloc_r+0x90>
   82d56:	2201      	movs	r2, #1
   82d58:	f04f 0a00 	mov.w	sl, #0
   82d5c:	e6cb      	b.n	82af6 <_malloc_r+0x292>
   82d5e:	f104 0108 	add.w	r1, r4, #8
   82d62:	4630      	mov	r0, r6
   82d64:	f7ff fa80 	bl	82268 <_free_r>
   82d68:	f8da 3000 	ldr.w	r3, [sl]
   82d6c:	e6e6      	b.n	82b3c <_malloc_r+0x2d8>
   82d6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82d72:	d803      	bhi.n	82d7c <_malloc_r+0x518>
   82d74:	0bca      	lsrs	r2, r1, #15
   82d76:	3277      	adds	r2, #119	; 0x77
   82d78:	0050      	lsls	r0, r2, #1
   82d7a:	e72c      	b.n	82bd6 <_malloc_r+0x372>
   82d7c:	f240 5254 	movw	r2, #1364	; 0x554
   82d80:	4293      	cmp	r3, r2
   82d82:	d803      	bhi.n	82d8c <_malloc_r+0x528>
   82d84:	0c8a      	lsrs	r2, r1, #18
   82d86:	327c      	adds	r2, #124	; 0x7c
   82d88:	0050      	lsls	r0, r2, #1
   82d8a:	e724      	b.n	82bd6 <_malloc_r+0x372>
   82d8c:	20fc      	movs	r0, #252	; 0xfc
   82d8e:	227e      	movs	r2, #126	; 0x7e
   82d90:	e721      	b.n	82bd6 <_malloc_r+0x372>
   82d92:	687b      	ldr	r3, [r7, #4]
   82d94:	e78d      	b.n	82cb2 <_malloc_r+0x44e>
   82d96:	bf00      	nop
   82d98:	20070590 	.word	0x20070590

00082d9c <memchr>:
   82d9c:	0783      	lsls	r3, r0, #30
   82d9e:	b470      	push	{r4, r5, r6}
   82da0:	b2c9      	uxtb	r1, r1
   82da2:	d040      	beq.n	82e26 <memchr+0x8a>
   82da4:	1e54      	subs	r4, r2, #1
   82da6:	b32a      	cbz	r2, 82df4 <memchr+0x58>
   82da8:	7803      	ldrb	r3, [r0, #0]
   82daa:	428b      	cmp	r3, r1
   82dac:	d023      	beq.n	82df6 <memchr+0x5a>
   82dae:	1c43      	adds	r3, r0, #1
   82db0:	e004      	b.n	82dbc <memchr+0x20>
   82db2:	b1fc      	cbz	r4, 82df4 <memchr+0x58>
   82db4:	7805      	ldrb	r5, [r0, #0]
   82db6:	4614      	mov	r4, r2
   82db8:	428d      	cmp	r5, r1
   82dba:	d01c      	beq.n	82df6 <memchr+0x5a>
   82dbc:	f013 0f03 	tst.w	r3, #3
   82dc0:	4618      	mov	r0, r3
   82dc2:	f104 32ff 	add.w	r2, r4, #4294967295
   82dc6:	f103 0301 	add.w	r3, r3, #1
   82dca:	d1f2      	bne.n	82db2 <memchr+0x16>
   82dcc:	2c03      	cmp	r4, #3
   82dce:	d814      	bhi.n	82dfa <memchr+0x5e>
   82dd0:	1e65      	subs	r5, r4, #1
   82dd2:	b354      	cbz	r4, 82e2a <memchr+0x8e>
   82dd4:	7803      	ldrb	r3, [r0, #0]
   82dd6:	428b      	cmp	r3, r1
   82dd8:	d00d      	beq.n	82df6 <memchr+0x5a>
   82dda:	1c42      	adds	r2, r0, #1
   82ddc:	2300      	movs	r3, #0
   82dde:	e002      	b.n	82de6 <memchr+0x4a>
   82de0:	7804      	ldrb	r4, [r0, #0]
   82de2:	428c      	cmp	r4, r1
   82de4:	d007      	beq.n	82df6 <memchr+0x5a>
   82de6:	42ab      	cmp	r3, r5
   82de8:	4610      	mov	r0, r2
   82dea:	f103 0301 	add.w	r3, r3, #1
   82dee:	f102 0201 	add.w	r2, r2, #1
   82df2:	d1f5      	bne.n	82de0 <memchr+0x44>
   82df4:	2000      	movs	r0, #0
   82df6:	bc70      	pop	{r4, r5, r6}
   82df8:	4770      	bx	lr
   82dfa:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   82dfe:	4603      	mov	r3, r0
   82e00:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82e04:	681a      	ldr	r2, [r3, #0]
   82e06:	4618      	mov	r0, r3
   82e08:	4072      	eors	r2, r6
   82e0a:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   82e0e:	ea25 0202 	bic.w	r2, r5, r2
   82e12:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   82e16:	f103 0304 	add.w	r3, r3, #4
   82e1a:	d1d9      	bne.n	82dd0 <memchr+0x34>
   82e1c:	3c04      	subs	r4, #4
   82e1e:	2c03      	cmp	r4, #3
   82e20:	4618      	mov	r0, r3
   82e22:	d8ef      	bhi.n	82e04 <memchr+0x68>
   82e24:	e7d4      	b.n	82dd0 <memchr+0x34>
   82e26:	4614      	mov	r4, r2
   82e28:	e7d0      	b.n	82dcc <memchr+0x30>
   82e2a:	4620      	mov	r0, r4
   82e2c:	e7e3      	b.n	82df6 <memchr+0x5a>
   82e2e:	bf00      	nop

00082e30 <memcpy>:
   82e30:	4684      	mov	ip, r0
   82e32:	ea41 0300 	orr.w	r3, r1, r0
   82e36:	f013 0303 	ands.w	r3, r3, #3
   82e3a:	d149      	bne.n	82ed0 <memcpy+0xa0>
   82e3c:	3a40      	subs	r2, #64	; 0x40
   82e3e:	d323      	bcc.n	82e88 <memcpy+0x58>
   82e40:	680b      	ldr	r3, [r1, #0]
   82e42:	6003      	str	r3, [r0, #0]
   82e44:	684b      	ldr	r3, [r1, #4]
   82e46:	6043      	str	r3, [r0, #4]
   82e48:	688b      	ldr	r3, [r1, #8]
   82e4a:	6083      	str	r3, [r0, #8]
   82e4c:	68cb      	ldr	r3, [r1, #12]
   82e4e:	60c3      	str	r3, [r0, #12]
   82e50:	690b      	ldr	r3, [r1, #16]
   82e52:	6103      	str	r3, [r0, #16]
   82e54:	694b      	ldr	r3, [r1, #20]
   82e56:	6143      	str	r3, [r0, #20]
   82e58:	698b      	ldr	r3, [r1, #24]
   82e5a:	6183      	str	r3, [r0, #24]
   82e5c:	69cb      	ldr	r3, [r1, #28]
   82e5e:	61c3      	str	r3, [r0, #28]
   82e60:	6a0b      	ldr	r3, [r1, #32]
   82e62:	6203      	str	r3, [r0, #32]
   82e64:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82e66:	6243      	str	r3, [r0, #36]	; 0x24
   82e68:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82e6a:	6283      	str	r3, [r0, #40]	; 0x28
   82e6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82e6e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82e70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82e72:	6303      	str	r3, [r0, #48]	; 0x30
   82e74:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82e76:	6343      	str	r3, [r0, #52]	; 0x34
   82e78:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82e7a:	6383      	str	r3, [r0, #56]	; 0x38
   82e7c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82e7e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82e80:	3040      	adds	r0, #64	; 0x40
   82e82:	3140      	adds	r1, #64	; 0x40
   82e84:	3a40      	subs	r2, #64	; 0x40
   82e86:	d2db      	bcs.n	82e40 <memcpy+0x10>
   82e88:	3230      	adds	r2, #48	; 0x30
   82e8a:	d30b      	bcc.n	82ea4 <memcpy+0x74>
   82e8c:	680b      	ldr	r3, [r1, #0]
   82e8e:	6003      	str	r3, [r0, #0]
   82e90:	684b      	ldr	r3, [r1, #4]
   82e92:	6043      	str	r3, [r0, #4]
   82e94:	688b      	ldr	r3, [r1, #8]
   82e96:	6083      	str	r3, [r0, #8]
   82e98:	68cb      	ldr	r3, [r1, #12]
   82e9a:	60c3      	str	r3, [r0, #12]
   82e9c:	3010      	adds	r0, #16
   82e9e:	3110      	adds	r1, #16
   82ea0:	3a10      	subs	r2, #16
   82ea2:	d2f3      	bcs.n	82e8c <memcpy+0x5c>
   82ea4:	320c      	adds	r2, #12
   82ea6:	d305      	bcc.n	82eb4 <memcpy+0x84>
   82ea8:	f851 3b04 	ldr.w	r3, [r1], #4
   82eac:	f840 3b04 	str.w	r3, [r0], #4
   82eb0:	3a04      	subs	r2, #4
   82eb2:	d2f9      	bcs.n	82ea8 <memcpy+0x78>
   82eb4:	3204      	adds	r2, #4
   82eb6:	d008      	beq.n	82eca <memcpy+0x9a>
   82eb8:	07d2      	lsls	r2, r2, #31
   82eba:	bf1c      	itt	ne
   82ebc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ec0:	f800 3b01 	strbne.w	r3, [r0], #1
   82ec4:	d301      	bcc.n	82eca <memcpy+0x9a>
   82ec6:	880b      	ldrh	r3, [r1, #0]
   82ec8:	8003      	strh	r3, [r0, #0]
   82eca:	4660      	mov	r0, ip
   82ecc:	4770      	bx	lr
   82ece:	bf00      	nop
   82ed0:	2a08      	cmp	r2, #8
   82ed2:	d313      	bcc.n	82efc <memcpy+0xcc>
   82ed4:	078b      	lsls	r3, r1, #30
   82ed6:	d0b1      	beq.n	82e3c <memcpy+0xc>
   82ed8:	f010 0303 	ands.w	r3, r0, #3
   82edc:	d0ae      	beq.n	82e3c <memcpy+0xc>
   82ede:	f1c3 0304 	rsb	r3, r3, #4
   82ee2:	1ad2      	subs	r2, r2, r3
   82ee4:	07db      	lsls	r3, r3, #31
   82ee6:	bf1c      	itt	ne
   82ee8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82eec:	f800 3b01 	strbne.w	r3, [r0], #1
   82ef0:	d3a4      	bcc.n	82e3c <memcpy+0xc>
   82ef2:	f831 3b02 	ldrh.w	r3, [r1], #2
   82ef6:	f820 3b02 	strh.w	r3, [r0], #2
   82efa:	e79f      	b.n	82e3c <memcpy+0xc>
   82efc:	3a04      	subs	r2, #4
   82efe:	d3d9      	bcc.n	82eb4 <memcpy+0x84>
   82f00:	3a01      	subs	r2, #1
   82f02:	f811 3b01 	ldrb.w	r3, [r1], #1
   82f06:	f800 3b01 	strb.w	r3, [r0], #1
   82f0a:	d2f9      	bcs.n	82f00 <memcpy+0xd0>
   82f0c:	780b      	ldrb	r3, [r1, #0]
   82f0e:	7003      	strb	r3, [r0, #0]
   82f10:	784b      	ldrb	r3, [r1, #1]
   82f12:	7043      	strb	r3, [r0, #1]
   82f14:	788b      	ldrb	r3, [r1, #2]
   82f16:	7083      	strb	r3, [r0, #2]
   82f18:	4660      	mov	r0, ip
   82f1a:	4770      	bx	lr

00082f1c <memmove>:
   82f1c:	4288      	cmp	r0, r1
   82f1e:	b4f0      	push	{r4, r5, r6, r7}
   82f20:	d910      	bls.n	82f44 <memmove+0x28>
   82f22:	188c      	adds	r4, r1, r2
   82f24:	42a0      	cmp	r0, r4
   82f26:	d20d      	bcs.n	82f44 <memmove+0x28>
   82f28:	1885      	adds	r5, r0, r2
   82f2a:	1e53      	subs	r3, r2, #1
   82f2c:	b142      	cbz	r2, 82f40 <memmove+0x24>
   82f2e:	4621      	mov	r1, r4
   82f30:	462a      	mov	r2, r5
   82f32:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   82f36:	3b01      	subs	r3, #1
   82f38:	f802 4d01 	strb.w	r4, [r2, #-1]!
   82f3c:	1c5c      	adds	r4, r3, #1
   82f3e:	d1f8      	bne.n	82f32 <memmove+0x16>
   82f40:	bcf0      	pop	{r4, r5, r6, r7}
   82f42:	4770      	bx	lr
   82f44:	2a0f      	cmp	r2, #15
   82f46:	d944      	bls.n	82fd2 <memmove+0xb6>
   82f48:	ea40 0301 	orr.w	r3, r0, r1
   82f4c:	079b      	lsls	r3, r3, #30
   82f4e:	d144      	bne.n	82fda <memmove+0xbe>
   82f50:	f1a2 0710 	sub.w	r7, r2, #16
   82f54:	093f      	lsrs	r7, r7, #4
   82f56:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   82f5a:	3610      	adds	r6, #16
   82f5c:	460c      	mov	r4, r1
   82f5e:	4603      	mov	r3, r0
   82f60:	6825      	ldr	r5, [r4, #0]
   82f62:	3310      	adds	r3, #16
   82f64:	f843 5c10 	str.w	r5, [r3, #-16]
   82f68:	6865      	ldr	r5, [r4, #4]
   82f6a:	3410      	adds	r4, #16
   82f6c:	f843 5c0c 	str.w	r5, [r3, #-12]
   82f70:	f854 5c08 	ldr.w	r5, [r4, #-8]
   82f74:	f843 5c08 	str.w	r5, [r3, #-8]
   82f78:	f854 5c04 	ldr.w	r5, [r4, #-4]
   82f7c:	f843 5c04 	str.w	r5, [r3, #-4]
   82f80:	42b3      	cmp	r3, r6
   82f82:	d1ed      	bne.n	82f60 <memmove+0x44>
   82f84:	1c7b      	adds	r3, r7, #1
   82f86:	f002 0c0f 	and.w	ip, r2, #15
   82f8a:	011b      	lsls	r3, r3, #4
   82f8c:	f1bc 0f03 	cmp.w	ip, #3
   82f90:	4419      	add	r1, r3
   82f92:	4403      	add	r3, r0
   82f94:	d923      	bls.n	82fde <memmove+0xc2>
   82f96:	460e      	mov	r6, r1
   82f98:	461d      	mov	r5, r3
   82f9a:	4664      	mov	r4, ip
   82f9c:	f856 7b04 	ldr.w	r7, [r6], #4
   82fa0:	3c04      	subs	r4, #4
   82fa2:	2c03      	cmp	r4, #3
   82fa4:	f845 7b04 	str.w	r7, [r5], #4
   82fa8:	d8f8      	bhi.n	82f9c <memmove+0x80>
   82faa:	f1ac 0404 	sub.w	r4, ip, #4
   82fae:	f024 0403 	bic.w	r4, r4, #3
   82fb2:	3404      	adds	r4, #4
   82fb4:	f002 0203 	and.w	r2, r2, #3
   82fb8:	4423      	add	r3, r4
   82fba:	4421      	add	r1, r4
   82fbc:	2a00      	cmp	r2, #0
   82fbe:	d0bf      	beq.n	82f40 <memmove+0x24>
   82fc0:	441a      	add	r2, r3
   82fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
   82fc6:	f803 4b01 	strb.w	r4, [r3], #1
   82fca:	4293      	cmp	r3, r2
   82fcc:	d1f9      	bne.n	82fc2 <memmove+0xa6>
   82fce:	bcf0      	pop	{r4, r5, r6, r7}
   82fd0:	4770      	bx	lr
   82fd2:	4603      	mov	r3, r0
   82fd4:	2a00      	cmp	r2, #0
   82fd6:	d1f3      	bne.n	82fc0 <memmove+0xa4>
   82fd8:	e7b2      	b.n	82f40 <memmove+0x24>
   82fda:	4603      	mov	r3, r0
   82fdc:	e7f0      	b.n	82fc0 <memmove+0xa4>
   82fde:	4662      	mov	r2, ip
   82fe0:	2a00      	cmp	r2, #0
   82fe2:	d1ed      	bne.n	82fc0 <memmove+0xa4>
   82fe4:	e7ac      	b.n	82f40 <memmove+0x24>
   82fe6:	bf00      	nop

00082fe8 <__malloc_lock>:
   82fe8:	4770      	bx	lr
   82fea:	bf00      	nop

00082fec <__malloc_unlock>:
   82fec:	4770      	bx	lr
   82fee:	bf00      	nop

00082ff0 <_realloc_r>:
   82ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ff4:	460c      	mov	r4, r1
   82ff6:	b083      	sub	sp, #12
   82ff8:	4690      	mov	r8, r2
   82ffa:	4681      	mov	r9, r0
   82ffc:	2900      	cmp	r1, #0
   82ffe:	f000 80ba 	beq.w	83176 <_realloc_r+0x186>
   83002:	f7ff fff1 	bl	82fe8 <__malloc_lock>
   83006:	f108 060b 	add.w	r6, r8, #11
   8300a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8300e:	2e16      	cmp	r6, #22
   83010:	f023 0503 	bic.w	r5, r3, #3
   83014:	f1a4 0708 	sub.w	r7, r4, #8
   83018:	d84b      	bhi.n	830b2 <_realloc_r+0xc2>
   8301a:	2110      	movs	r1, #16
   8301c:	460e      	mov	r6, r1
   8301e:	45b0      	cmp	r8, r6
   83020:	d84c      	bhi.n	830bc <_realloc_r+0xcc>
   83022:	428d      	cmp	r5, r1
   83024:	da51      	bge.n	830ca <_realloc_r+0xda>
   83026:	f8df b384 	ldr.w	fp, [pc, #900]	; 833ac <_realloc_r+0x3bc>
   8302a:	1978      	adds	r0, r7, r5
   8302c:	f8db e008 	ldr.w	lr, [fp, #8]
   83030:	4586      	cmp	lr, r0
   83032:	f000 80a6 	beq.w	83182 <_realloc_r+0x192>
   83036:	6842      	ldr	r2, [r0, #4]
   83038:	f022 0c01 	bic.w	ip, r2, #1
   8303c:	4484      	add	ip, r0
   8303e:	f8dc c004 	ldr.w	ip, [ip, #4]
   83042:	f01c 0f01 	tst.w	ip, #1
   83046:	d054      	beq.n	830f2 <_realloc_r+0x102>
   83048:	2200      	movs	r2, #0
   8304a:	4610      	mov	r0, r2
   8304c:	07db      	lsls	r3, r3, #31
   8304e:	d46f      	bmi.n	83130 <_realloc_r+0x140>
   83050:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83054:	ebc3 0a07 	rsb	sl, r3, r7
   83058:	f8da 3004 	ldr.w	r3, [sl, #4]
   8305c:	f023 0303 	bic.w	r3, r3, #3
   83060:	442b      	add	r3, r5
   83062:	2800      	cmp	r0, #0
   83064:	d062      	beq.n	8312c <_realloc_r+0x13c>
   83066:	4570      	cmp	r0, lr
   83068:	f000 80e9 	beq.w	8323e <_realloc_r+0x24e>
   8306c:	eb02 0e03 	add.w	lr, r2, r3
   83070:	458e      	cmp	lr, r1
   83072:	db5b      	blt.n	8312c <_realloc_r+0x13c>
   83074:	68c3      	ldr	r3, [r0, #12]
   83076:	6882      	ldr	r2, [r0, #8]
   83078:	46d0      	mov	r8, sl
   8307a:	60d3      	str	r3, [r2, #12]
   8307c:	609a      	str	r2, [r3, #8]
   8307e:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83082:	f8da 300c 	ldr.w	r3, [sl, #12]
   83086:	1f2a      	subs	r2, r5, #4
   83088:	2a24      	cmp	r2, #36	; 0x24
   8308a:	60cb      	str	r3, [r1, #12]
   8308c:	6099      	str	r1, [r3, #8]
   8308e:	f200 8123 	bhi.w	832d8 <_realloc_r+0x2e8>
   83092:	2a13      	cmp	r2, #19
   83094:	f240 80b0 	bls.w	831f8 <_realloc_r+0x208>
   83098:	6823      	ldr	r3, [r4, #0]
   8309a:	2a1b      	cmp	r2, #27
   8309c:	f8ca 3008 	str.w	r3, [sl, #8]
   830a0:	6863      	ldr	r3, [r4, #4]
   830a2:	f8ca 300c 	str.w	r3, [sl, #12]
   830a6:	f200 812b 	bhi.w	83300 <_realloc_r+0x310>
   830aa:	3408      	adds	r4, #8
   830ac:	f10a 0310 	add.w	r3, sl, #16
   830b0:	e0a3      	b.n	831fa <_realloc_r+0x20a>
   830b2:	f026 0607 	bic.w	r6, r6, #7
   830b6:	2e00      	cmp	r6, #0
   830b8:	4631      	mov	r1, r6
   830ba:	dab0      	bge.n	8301e <_realloc_r+0x2e>
   830bc:	230c      	movs	r3, #12
   830be:	2000      	movs	r0, #0
   830c0:	f8c9 3000 	str.w	r3, [r9]
   830c4:	b003      	add	sp, #12
   830c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830ca:	46a0      	mov	r8, r4
   830cc:	1baa      	subs	r2, r5, r6
   830ce:	2a0f      	cmp	r2, #15
   830d0:	f003 0301 	and.w	r3, r3, #1
   830d4:	d81a      	bhi.n	8310c <_realloc_r+0x11c>
   830d6:	432b      	orrs	r3, r5
   830d8:	607b      	str	r3, [r7, #4]
   830da:	443d      	add	r5, r7
   830dc:	686b      	ldr	r3, [r5, #4]
   830de:	f043 0301 	orr.w	r3, r3, #1
   830e2:	606b      	str	r3, [r5, #4]
   830e4:	4648      	mov	r0, r9
   830e6:	f7ff ff81 	bl	82fec <__malloc_unlock>
   830ea:	4640      	mov	r0, r8
   830ec:	b003      	add	sp, #12
   830ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830f2:	f022 0203 	bic.w	r2, r2, #3
   830f6:	eb02 0c05 	add.w	ip, r2, r5
   830fa:	458c      	cmp	ip, r1
   830fc:	dba6      	blt.n	8304c <_realloc_r+0x5c>
   830fe:	68c2      	ldr	r2, [r0, #12]
   83100:	6881      	ldr	r1, [r0, #8]
   83102:	46a0      	mov	r8, r4
   83104:	60ca      	str	r2, [r1, #12]
   83106:	4665      	mov	r5, ip
   83108:	6091      	str	r1, [r2, #8]
   8310a:	e7df      	b.n	830cc <_realloc_r+0xdc>
   8310c:	19b9      	adds	r1, r7, r6
   8310e:	4333      	orrs	r3, r6
   83110:	f042 0001 	orr.w	r0, r2, #1
   83114:	607b      	str	r3, [r7, #4]
   83116:	440a      	add	r2, r1
   83118:	6048      	str	r0, [r1, #4]
   8311a:	6853      	ldr	r3, [r2, #4]
   8311c:	3108      	adds	r1, #8
   8311e:	f043 0301 	orr.w	r3, r3, #1
   83122:	6053      	str	r3, [r2, #4]
   83124:	4648      	mov	r0, r9
   83126:	f7ff f89f 	bl	82268 <_free_r>
   8312a:	e7db      	b.n	830e4 <_realloc_r+0xf4>
   8312c:	428b      	cmp	r3, r1
   8312e:	da33      	bge.n	83198 <_realloc_r+0x1a8>
   83130:	4641      	mov	r1, r8
   83132:	4648      	mov	r0, r9
   83134:	f7ff fb96 	bl	82864 <_malloc_r>
   83138:	4680      	mov	r8, r0
   8313a:	2800      	cmp	r0, #0
   8313c:	d0d2      	beq.n	830e4 <_realloc_r+0xf4>
   8313e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83142:	f1a0 0108 	sub.w	r1, r0, #8
   83146:	f023 0201 	bic.w	r2, r3, #1
   8314a:	443a      	add	r2, r7
   8314c:	4291      	cmp	r1, r2
   8314e:	f000 80bc 	beq.w	832ca <_realloc_r+0x2da>
   83152:	1f2a      	subs	r2, r5, #4
   83154:	2a24      	cmp	r2, #36	; 0x24
   83156:	d86e      	bhi.n	83236 <_realloc_r+0x246>
   83158:	2a13      	cmp	r2, #19
   8315a:	d842      	bhi.n	831e2 <_realloc_r+0x1f2>
   8315c:	4603      	mov	r3, r0
   8315e:	4622      	mov	r2, r4
   83160:	6811      	ldr	r1, [r2, #0]
   83162:	6019      	str	r1, [r3, #0]
   83164:	6851      	ldr	r1, [r2, #4]
   83166:	6059      	str	r1, [r3, #4]
   83168:	6892      	ldr	r2, [r2, #8]
   8316a:	609a      	str	r2, [r3, #8]
   8316c:	4621      	mov	r1, r4
   8316e:	4648      	mov	r0, r9
   83170:	f7ff f87a 	bl	82268 <_free_r>
   83174:	e7b6      	b.n	830e4 <_realloc_r+0xf4>
   83176:	4611      	mov	r1, r2
   83178:	b003      	add	sp, #12
   8317a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8317e:	f7ff bb71 	b.w	82864 <_malloc_r>
   83182:	f8de 2004 	ldr.w	r2, [lr, #4]
   83186:	f106 0c10 	add.w	ip, r6, #16
   8318a:	f022 0203 	bic.w	r2, r2, #3
   8318e:	1950      	adds	r0, r2, r5
   83190:	4560      	cmp	r0, ip
   83192:	da3d      	bge.n	83210 <_realloc_r+0x220>
   83194:	4670      	mov	r0, lr
   83196:	e759      	b.n	8304c <_realloc_r+0x5c>
   83198:	46d0      	mov	r8, sl
   8319a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8319e:	f8da 100c 	ldr.w	r1, [sl, #12]
   831a2:	1f2a      	subs	r2, r5, #4
   831a4:	2a24      	cmp	r2, #36	; 0x24
   831a6:	60c1      	str	r1, [r0, #12]
   831a8:	6088      	str	r0, [r1, #8]
   831aa:	f200 80a0 	bhi.w	832ee <_realloc_r+0x2fe>
   831ae:	2a13      	cmp	r2, #19
   831b0:	f240 809b 	bls.w	832ea <_realloc_r+0x2fa>
   831b4:	6821      	ldr	r1, [r4, #0]
   831b6:	2a1b      	cmp	r2, #27
   831b8:	f8ca 1008 	str.w	r1, [sl, #8]
   831bc:	6861      	ldr	r1, [r4, #4]
   831be:	f8ca 100c 	str.w	r1, [sl, #12]
   831c2:	f200 80b2 	bhi.w	8332a <_realloc_r+0x33a>
   831c6:	3408      	adds	r4, #8
   831c8:	f10a 0210 	add.w	r2, sl, #16
   831cc:	6821      	ldr	r1, [r4, #0]
   831ce:	461d      	mov	r5, r3
   831d0:	6011      	str	r1, [r2, #0]
   831d2:	6861      	ldr	r1, [r4, #4]
   831d4:	4657      	mov	r7, sl
   831d6:	6051      	str	r1, [r2, #4]
   831d8:	68a3      	ldr	r3, [r4, #8]
   831da:	6093      	str	r3, [r2, #8]
   831dc:	f8da 3004 	ldr.w	r3, [sl, #4]
   831e0:	e774      	b.n	830cc <_realloc_r+0xdc>
   831e2:	6823      	ldr	r3, [r4, #0]
   831e4:	2a1b      	cmp	r2, #27
   831e6:	6003      	str	r3, [r0, #0]
   831e8:	6863      	ldr	r3, [r4, #4]
   831ea:	6043      	str	r3, [r0, #4]
   831ec:	d862      	bhi.n	832b4 <_realloc_r+0x2c4>
   831ee:	f100 0308 	add.w	r3, r0, #8
   831f2:	f104 0208 	add.w	r2, r4, #8
   831f6:	e7b3      	b.n	83160 <_realloc_r+0x170>
   831f8:	4643      	mov	r3, r8
   831fa:	6822      	ldr	r2, [r4, #0]
   831fc:	4675      	mov	r5, lr
   831fe:	601a      	str	r2, [r3, #0]
   83200:	6862      	ldr	r2, [r4, #4]
   83202:	4657      	mov	r7, sl
   83204:	605a      	str	r2, [r3, #4]
   83206:	68a2      	ldr	r2, [r4, #8]
   83208:	609a      	str	r2, [r3, #8]
   8320a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8320e:	e75d      	b.n	830cc <_realloc_r+0xdc>
   83210:	1b83      	subs	r3, r0, r6
   83212:	4437      	add	r7, r6
   83214:	f043 0301 	orr.w	r3, r3, #1
   83218:	f8cb 7008 	str.w	r7, [fp, #8]
   8321c:	607b      	str	r3, [r7, #4]
   8321e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83222:	4648      	mov	r0, r9
   83224:	f003 0301 	and.w	r3, r3, #1
   83228:	431e      	orrs	r6, r3
   8322a:	f844 6c04 	str.w	r6, [r4, #-4]
   8322e:	f7ff fedd 	bl	82fec <__malloc_unlock>
   83232:	4620      	mov	r0, r4
   83234:	e75a      	b.n	830ec <_realloc_r+0xfc>
   83236:	4621      	mov	r1, r4
   83238:	f7ff fe70 	bl	82f1c <memmove>
   8323c:	e796      	b.n	8316c <_realloc_r+0x17c>
   8323e:	eb02 0c03 	add.w	ip, r2, r3
   83242:	f106 0210 	add.w	r2, r6, #16
   83246:	4594      	cmp	ip, r2
   83248:	f6ff af70 	blt.w	8312c <_realloc_r+0x13c>
   8324c:	4657      	mov	r7, sl
   8324e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83252:	f8da 300c 	ldr.w	r3, [sl, #12]
   83256:	1f2a      	subs	r2, r5, #4
   83258:	2a24      	cmp	r2, #36	; 0x24
   8325a:	60cb      	str	r3, [r1, #12]
   8325c:	6099      	str	r1, [r3, #8]
   8325e:	f200 8086 	bhi.w	8336e <_realloc_r+0x37e>
   83262:	2a13      	cmp	r2, #19
   83264:	d977      	bls.n	83356 <_realloc_r+0x366>
   83266:	6823      	ldr	r3, [r4, #0]
   83268:	2a1b      	cmp	r2, #27
   8326a:	f8ca 3008 	str.w	r3, [sl, #8]
   8326e:	6863      	ldr	r3, [r4, #4]
   83270:	f8ca 300c 	str.w	r3, [sl, #12]
   83274:	f200 8084 	bhi.w	83380 <_realloc_r+0x390>
   83278:	3408      	adds	r4, #8
   8327a:	f10a 0310 	add.w	r3, sl, #16
   8327e:	6822      	ldr	r2, [r4, #0]
   83280:	601a      	str	r2, [r3, #0]
   83282:	6862      	ldr	r2, [r4, #4]
   83284:	605a      	str	r2, [r3, #4]
   83286:	68a2      	ldr	r2, [r4, #8]
   83288:	609a      	str	r2, [r3, #8]
   8328a:	ebc6 020c 	rsb	r2, r6, ip
   8328e:	eb0a 0306 	add.w	r3, sl, r6
   83292:	f042 0201 	orr.w	r2, r2, #1
   83296:	f8cb 3008 	str.w	r3, [fp, #8]
   8329a:	605a      	str	r2, [r3, #4]
   8329c:	f8da 3004 	ldr.w	r3, [sl, #4]
   832a0:	4648      	mov	r0, r9
   832a2:	f003 0301 	and.w	r3, r3, #1
   832a6:	431e      	orrs	r6, r3
   832a8:	f8ca 6004 	str.w	r6, [sl, #4]
   832ac:	f7ff fe9e 	bl	82fec <__malloc_unlock>
   832b0:	4638      	mov	r0, r7
   832b2:	e71b      	b.n	830ec <_realloc_r+0xfc>
   832b4:	68a3      	ldr	r3, [r4, #8]
   832b6:	2a24      	cmp	r2, #36	; 0x24
   832b8:	6083      	str	r3, [r0, #8]
   832ba:	68e3      	ldr	r3, [r4, #12]
   832bc:	60c3      	str	r3, [r0, #12]
   832be:	d02b      	beq.n	83318 <_realloc_r+0x328>
   832c0:	f100 0310 	add.w	r3, r0, #16
   832c4:	f104 0210 	add.w	r2, r4, #16
   832c8:	e74a      	b.n	83160 <_realloc_r+0x170>
   832ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
   832ce:	46a0      	mov	r8, r4
   832d0:	f022 0203 	bic.w	r2, r2, #3
   832d4:	4415      	add	r5, r2
   832d6:	e6f9      	b.n	830cc <_realloc_r+0xdc>
   832d8:	4621      	mov	r1, r4
   832da:	4640      	mov	r0, r8
   832dc:	4675      	mov	r5, lr
   832de:	4657      	mov	r7, sl
   832e0:	f7ff fe1c 	bl	82f1c <memmove>
   832e4:	f8da 3004 	ldr.w	r3, [sl, #4]
   832e8:	e6f0      	b.n	830cc <_realloc_r+0xdc>
   832ea:	4642      	mov	r2, r8
   832ec:	e76e      	b.n	831cc <_realloc_r+0x1dc>
   832ee:	4621      	mov	r1, r4
   832f0:	4640      	mov	r0, r8
   832f2:	461d      	mov	r5, r3
   832f4:	4657      	mov	r7, sl
   832f6:	f7ff fe11 	bl	82f1c <memmove>
   832fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   832fe:	e6e5      	b.n	830cc <_realloc_r+0xdc>
   83300:	68a3      	ldr	r3, [r4, #8]
   83302:	2a24      	cmp	r2, #36	; 0x24
   83304:	f8ca 3010 	str.w	r3, [sl, #16]
   83308:	68e3      	ldr	r3, [r4, #12]
   8330a:	f8ca 3014 	str.w	r3, [sl, #20]
   8330e:	d018      	beq.n	83342 <_realloc_r+0x352>
   83310:	3410      	adds	r4, #16
   83312:	f10a 0318 	add.w	r3, sl, #24
   83316:	e770      	b.n	831fa <_realloc_r+0x20a>
   83318:	6922      	ldr	r2, [r4, #16]
   8331a:	f100 0318 	add.w	r3, r0, #24
   8331e:	6102      	str	r2, [r0, #16]
   83320:	6961      	ldr	r1, [r4, #20]
   83322:	f104 0218 	add.w	r2, r4, #24
   83326:	6141      	str	r1, [r0, #20]
   83328:	e71a      	b.n	83160 <_realloc_r+0x170>
   8332a:	68a1      	ldr	r1, [r4, #8]
   8332c:	2a24      	cmp	r2, #36	; 0x24
   8332e:	f8ca 1010 	str.w	r1, [sl, #16]
   83332:	68e1      	ldr	r1, [r4, #12]
   83334:	f8ca 1014 	str.w	r1, [sl, #20]
   83338:	d00f      	beq.n	8335a <_realloc_r+0x36a>
   8333a:	3410      	adds	r4, #16
   8333c:	f10a 0218 	add.w	r2, sl, #24
   83340:	e744      	b.n	831cc <_realloc_r+0x1dc>
   83342:	6922      	ldr	r2, [r4, #16]
   83344:	f10a 0320 	add.w	r3, sl, #32
   83348:	f8ca 2018 	str.w	r2, [sl, #24]
   8334c:	6962      	ldr	r2, [r4, #20]
   8334e:	3418      	adds	r4, #24
   83350:	f8ca 201c 	str.w	r2, [sl, #28]
   83354:	e751      	b.n	831fa <_realloc_r+0x20a>
   83356:	463b      	mov	r3, r7
   83358:	e791      	b.n	8327e <_realloc_r+0x28e>
   8335a:	6921      	ldr	r1, [r4, #16]
   8335c:	f10a 0220 	add.w	r2, sl, #32
   83360:	f8ca 1018 	str.w	r1, [sl, #24]
   83364:	6961      	ldr	r1, [r4, #20]
   83366:	3418      	adds	r4, #24
   83368:	f8ca 101c 	str.w	r1, [sl, #28]
   8336c:	e72e      	b.n	831cc <_realloc_r+0x1dc>
   8336e:	4621      	mov	r1, r4
   83370:	4638      	mov	r0, r7
   83372:	f8cd c004 	str.w	ip, [sp, #4]
   83376:	f7ff fdd1 	bl	82f1c <memmove>
   8337a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8337e:	e784      	b.n	8328a <_realloc_r+0x29a>
   83380:	68a3      	ldr	r3, [r4, #8]
   83382:	2a24      	cmp	r2, #36	; 0x24
   83384:	f8ca 3010 	str.w	r3, [sl, #16]
   83388:	68e3      	ldr	r3, [r4, #12]
   8338a:	f8ca 3014 	str.w	r3, [sl, #20]
   8338e:	d003      	beq.n	83398 <_realloc_r+0x3a8>
   83390:	3410      	adds	r4, #16
   83392:	f10a 0318 	add.w	r3, sl, #24
   83396:	e772      	b.n	8327e <_realloc_r+0x28e>
   83398:	6922      	ldr	r2, [r4, #16]
   8339a:	f10a 0320 	add.w	r3, sl, #32
   8339e:	f8ca 2018 	str.w	r2, [sl, #24]
   833a2:	6962      	ldr	r2, [r4, #20]
   833a4:	3418      	adds	r4, #24
   833a6:	f8ca 201c 	str.w	r2, [sl, #28]
   833aa:	e768      	b.n	8327e <_realloc_r+0x28e>
   833ac:	20070590 	.word	0x20070590

000833b0 <_sbrk_r>:
   833b0:	b538      	push	{r3, r4, r5, lr}
   833b2:	4c07      	ldr	r4, [pc, #28]	; (833d0 <_sbrk_r+0x20>)
   833b4:	2300      	movs	r3, #0
   833b6:	4605      	mov	r5, r0
   833b8:	4608      	mov	r0, r1
   833ba:	6023      	str	r3, [r4, #0]
   833bc:	f7fd fba8 	bl	80b10 <_sbrk>
   833c0:	1c43      	adds	r3, r0, #1
   833c2:	d000      	beq.n	833c6 <_sbrk_r+0x16>
   833c4:	bd38      	pop	{r3, r4, r5, pc}
   833c6:	6823      	ldr	r3, [r4, #0]
   833c8:	2b00      	cmp	r3, #0
   833ca:	d0fb      	beq.n	833c4 <_sbrk_r+0x14>
   833cc:	602b      	str	r3, [r5, #0]
   833ce:	bd38      	pop	{r3, r4, r5, pc}
   833d0:	20070a9c 	.word	0x20070a9c

000833d4 <__sread>:
   833d4:	b510      	push	{r4, lr}
   833d6:	460c      	mov	r4, r1
   833d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   833dc:	f000 f9f2 	bl	837c4 <_read_r>
   833e0:	2800      	cmp	r0, #0
   833e2:	db03      	blt.n	833ec <__sread+0x18>
   833e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   833e6:	4403      	add	r3, r0
   833e8:	6523      	str	r3, [r4, #80]	; 0x50
   833ea:	bd10      	pop	{r4, pc}
   833ec:	89a3      	ldrh	r3, [r4, #12]
   833ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   833f2:	81a3      	strh	r3, [r4, #12]
   833f4:	bd10      	pop	{r4, pc}
   833f6:	bf00      	nop

000833f8 <__swrite>:
   833f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   833fc:	460c      	mov	r4, r1
   833fe:	8989      	ldrh	r1, [r1, #12]
   83400:	461d      	mov	r5, r3
   83402:	05cb      	lsls	r3, r1, #23
   83404:	4616      	mov	r6, r2
   83406:	4607      	mov	r7, r0
   83408:	d506      	bpl.n	83418 <__swrite+0x20>
   8340a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8340e:	2200      	movs	r2, #0
   83410:	2302      	movs	r3, #2
   83412:	f000 f9c3 	bl	8379c <_lseek_r>
   83416:	89a1      	ldrh	r1, [r4, #12]
   83418:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8341c:	81a1      	strh	r1, [r4, #12]
   8341e:	4638      	mov	r0, r7
   83420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83424:	4632      	mov	r2, r6
   83426:	462b      	mov	r3, r5
   83428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8342c:	f000 b8ce 	b.w	835cc <_write_r>

00083430 <__sseek>:
   83430:	b510      	push	{r4, lr}
   83432:	460c      	mov	r4, r1
   83434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83438:	f000 f9b0 	bl	8379c <_lseek_r>
   8343c:	89a3      	ldrh	r3, [r4, #12]
   8343e:	1c42      	adds	r2, r0, #1
   83440:	bf0e      	itee	eq
   83442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8344a:	6520      	strne	r0, [r4, #80]	; 0x50
   8344c:	81a3      	strh	r3, [r4, #12]
   8344e:	bd10      	pop	{r4, pc}

00083450 <__sclose>:
   83450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83454:	f000 b922 	b.w	8369c <_close_r>

00083458 <strlen>:
   83458:	f020 0103 	bic.w	r1, r0, #3
   8345c:	f010 0003 	ands.w	r0, r0, #3
   83460:	f1c0 0000 	rsb	r0, r0, #0
   83464:	f851 3b04 	ldr.w	r3, [r1], #4
   83468:	f100 0c04 	add.w	ip, r0, #4
   8346c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83470:	f06f 0200 	mvn.w	r2, #0
   83474:	bf1c      	itt	ne
   83476:	fa22 f20c 	lsrne.w	r2, r2, ip
   8347a:	4313      	orrne	r3, r2
   8347c:	f04f 0c01 	mov.w	ip, #1
   83480:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83484:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83488:	eba3 020c 	sub.w	r2, r3, ip
   8348c:	ea22 0203 	bic.w	r2, r2, r3
   83490:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83494:	bf04      	itt	eq
   83496:	f851 3b04 	ldreq.w	r3, [r1], #4
   8349a:	3004      	addeq	r0, #4
   8349c:	d0f4      	beq.n	83488 <strlen+0x30>
   8349e:	f013 0fff 	tst.w	r3, #255	; 0xff
   834a2:	bf1f      	itttt	ne
   834a4:	3001      	addne	r0, #1
   834a6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   834aa:	3001      	addne	r0, #1
   834ac:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   834b0:	bf18      	it	ne
   834b2:	3001      	addne	r0, #1
   834b4:	4770      	bx	lr
   834b6:	bf00      	nop

000834b8 <__swbuf_r>:
   834b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   834ba:	460d      	mov	r5, r1
   834bc:	4614      	mov	r4, r2
   834be:	4607      	mov	r7, r0
   834c0:	b110      	cbz	r0, 834c8 <__swbuf_r+0x10>
   834c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   834c4:	2b00      	cmp	r3, #0
   834c6:	d048      	beq.n	8355a <__swbuf_r+0xa2>
   834c8:	89a2      	ldrh	r2, [r4, #12]
   834ca:	69a0      	ldr	r0, [r4, #24]
   834cc:	b293      	uxth	r3, r2
   834ce:	60a0      	str	r0, [r4, #8]
   834d0:	0718      	lsls	r0, r3, #28
   834d2:	d538      	bpl.n	83546 <__swbuf_r+0x8e>
   834d4:	6926      	ldr	r6, [r4, #16]
   834d6:	2e00      	cmp	r6, #0
   834d8:	d035      	beq.n	83546 <__swbuf_r+0x8e>
   834da:	0499      	lsls	r1, r3, #18
   834dc:	b2ed      	uxtb	r5, r5
   834de:	d515      	bpl.n	8350c <__swbuf_r+0x54>
   834e0:	6823      	ldr	r3, [r4, #0]
   834e2:	6962      	ldr	r2, [r4, #20]
   834e4:	1b9e      	subs	r6, r3, r6
   834e6:	4296      	cmp	r6, r2
   834e8:	da1c      	bge.n	83524 <__swbuf_r+0x6c>
   834ea:	3601      	adds	r6, #1
   834ec:	68a2      	ldr	r2, [r4, #8]
   834ee:	1c59      	adds	r1, r3, #1
   834f0:	3a01      	subs	r2, #1
   834f2:	60a2      	str	r2, [r4, #8]
   834f4:	6021      	str	r1, [r4, #0]
   834f6:	701d      	strb	r5, [r3, #0]
   834f8:	6963      	ldr	r3, [r4, #20]
   834fa:	42b3      	cmp	r3, r6
   834fc:	d01a      	beq.n	83534 <__swbuf_r+0x7c>
   834fe:	89a3      	ldrh	r3, [r4, #12]
   83500:	07db      	lsls	r3, r3, #31
   83502:	d501      	bpl.n	83508 <__swbuf_r+0x50>
   83504:	2d0a      	cmp	r5, #10
   83506:	d015      	beq.n	83534 <__swbuf_r+0x7c>
   83508:	4628      	mov	r0, r5
   8350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8350c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8350e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83516:	6663      	str	r3, [r4, #100]	; 0x64
   83518:	6823      	ldr	r3, [r4, #0]
   8351a:	81a2      	strh	r2, [r4, #12]
   8351c:	6962      	ldr	r2, [r4, #20]
   8351e:	1b9e      	subs	r6, r3, r6
   83520:	4296      	cmp	r6, r2
   83522:	dbe2      	blt.n	834ea <__swbuf_r+0x32>
   83524:	4638      	mov	r0, r7
   83526:	4621      	mov	r1, r4
   83528:	f7fe fd3e 	bl	81fa8 <_fflush_r>
   8352c:	b940      	cbnz	r0, 83540 <__swbuf_r+0x88>
   8352e:	6823      	ldr	r3, [r4, #0]
   83530:	2601      	movs	r6, #1
   83532:	e7db      	b.n	834ec <__swbuf_r+0x34>
   83534:	4638      	mov	r0, r7
   83536:	4621      	mov	r1, r4
   83538:	f7fe fd36 	bl	81fa8 <_fflush_r>
   8353c:	2800      	cmp	r0, #0
   8353e:	d0e3      	beq.n	83508 <__swbuf_r+0x50>
   83540:	f04f 30ff 	mov.w	r0, #4294967295
   83544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83546:	4638      	mov	r0, r7
   83548:	4621      	mov	r1, r4
   8354a:	f7fe fc17 	bl	81d7c <__swsetup_r>
   8354e:	2800      	cmp	r0, #0
   83550:	d1f6      	bne.n	83540 <__swbuf_r+0x88>
   83552:	89a2      	ldrh	r2, [r4, #12]
   83554:	6926      	ldr	r6, [r4, #16]
   83556:	b293      	uxth	r3, r2
   83558:	e7bf      	b.n	834da <__swbuf_r+0x22>
   8355a:	f7fe fd41 	bl	81fe0 <__sinit>
   8355e:	e7b3      	b.n	834c8 <__swbuf_r+0x10>

00083560 <_wcrtomb_r>:
   83560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83564:	461e      	mov	r6, r3
   83566:	b086      	sub	sp, #24
   83568:	460c      	mov	r4, r1
   8356a:	4605      	mov	r5, r0
   8356c:	4617      	mov	r7, r2
   8356e:	4b0f      	ldr	r3, [pc, #60]	; (835ac <_wcrtomb_r+0x4c>)
   83570:	b191      	cbz	r1, 83598 <_wcrtomb_r+0x38>
   83572:	f8d3 8000 	ldr.w	r8, [r3]
   83576:	f7ff f8f3 	bl	82760 <__locale_charset>
   8357a:	9600      	str	r6, [sp, #0]
   8357c:	4603      	mov	r3, r0
   8357e:	4621      	mov	r1, r4
   83580:	463a      	mov	r2, r7
   83582:	4628      	mov	r0, r5
   83584:	47c0      	blx	r8
   83586:	1c43      	adds	r3, r0, #1
   83588:	d103      	bne.n	83592 <_wcrtomb_r+0x32>
   8358a:	2200      	movs	r2, #0
   8358c:	238a      	movs	r3, #138	; 0x8a
   8358e:	6032      	str	r2, [r6, #0]
   83590:	602b      	str	r3, [r5, #0]
   83592:	b006      	add	sp, #24
   83594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83598:	681f      	ldr	r7, [r3, #0]
   8359a:	f7ff f8e1 	bl	82760 <__locale_charset>
   8359e:	9600      	str	r6, [sp, #0]
   835a0:	4603      	mov	r3, r0
   835a2:	4622      	mov	r2, r4
   835a4:	4628      	mov	r0, r5
   835a6:	a903      	add	r1, sp, #12
   835a8:	47b8      	blx	r7
   835aa:	e7ec      	b.n	83586 <_wcrtomb_r+0x26>
   835ac:	200709a0 	.word	0x200709a0

000835b0 <__ascii_wctomb>:
   835b0:	b121      	cbz	r1, 835bc <__ascii_wctomb+0xc>
   835b2:	2aff      	cmp	r2, #255	; 0xff
   835b4:	d804      	bhi.n	835c0 <__ascii_wctomb+0x10>
   835b6:	700a      	strb	r2, [r1, #0]
   835b8:	2001      	movs	r0, #1
   835ba:	4770      	bx	lr
   835bc:	4608      	mov	r0, r1
   835be:	4770      	bx	lr
   835c0:	238a      	movs	r3, #138	; 0x8a
   835c2:	6003      	str	r3, [r0, #0]
   835c4:	f04f 30ff 	mov.w	r0, #4294967295
   835c8:	4770      	bx	lr
   835ca:	bf00      	nop

000835cc <_write_r>:
   835cc:	b570      	push	{r4, r5, r6, lr}
   835ce:	4c08      	ldr	r4, [pc, #32]	; (835f0 <_write_r+0x24>)
   835d0:	4606      	mov	r6, r0
   835d2:	2500      	movs	r5, #0
   835d4:	4608      	mov	r0, r1
   835d6:	4611      	mov	r1, r2
   835d8:	461a      	mov	r2, r3
   835da:	6025      	str	r5, [r4, #0]
   835dc:	f7fc fe06 	bl	801ec <_write>
   835e0:	1c43      	adds	r3, r0, #1
   835e2:	d000      	beq.n	835e6 <_write_r+0x1a>
   835e4:	bd70      	pop	{r4, r5, r6, pc}
   835e6:	6823      	ldr	r3, [r4, #0]
   835e8:	2b00      	cmp	r3, #0
   835ea:	d0fb      	beq.n	835e4 <_write_r+0x18>
   835ec:	6033      	str	r3, [r6, #0]
   835ee:	bd70      	pop	{r4, r5, r6, pc}
   835f0:	20070a9c 	.word	0x20070a9c

000835f4 <__register_exitproc>:
   835f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   835f6:	4c27      	ldr	r4, [pc, #156]	; (83694 <__register_exitproc+0xa0>)
   835f8:	b085      	sub	sp, #20
   835fa:	6826      	ldr	r6, [r4, #0]
   835fc:	4607      	mov	r7, r0
   835fe:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83602:	2c00      	cmp	r4, #0
   83604:	d040      	beq.n	83688 <__register_exitproc+0x94>
   83606:	6865      	ldr	r5, [r4, #4]
   83608:	2d1f      	cmp	r5, #31
   8360a:	dd1e      	ble.n	8364a <__register_exitproc+0x56>
   8360c:	4822      	ldr	r0, [pc, #136]	; (83698 <__register_exitproc+0xa4>)
   8360e:	b918      	cbnz	r0, 83618 <__register_exitproc+0x24>
   83610:	f04f 30ff 	mov.w	r0, #4294967295
   83614:	b005      	add	sp, #20
   83616:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83618:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8361c:	9103      	str	r1, [sp, #12]
   8361e:	9202      	str	r2, [sp, #8]
   83620:	9301      	str	r3, [sp, #4]
   83622:	f7ff f917 	bl	82854 <malloc>
   83626:	9903      	ldr	r1, [sp, #12]
   83628:	4604      	mov	r4, r0
   8362a:	9a02      	ldr	r2, [sp, #8]
   8362c:	9b01      	ldr	r3, [sp, #4]
   8362e:	2800      	cmp	r0, #0
   83630:	d0ee      	beq.n	83610 <__register_exitproc+0x1c>
   83632:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83636:	2000      	movs	r0, #0
   83638:	6025      	str	r5, [r4, #0]
   8363a:	6060      	str	r0, [r4, #4]
   8363c:	4605      	mov	r5, r0
   8363e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83642:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83646:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8364a:	b93f      	cbnz	r7, 8365c <__register_exitproc+0x68>
   8364c:	1c6b      	adds	r3, r5, #1
   8364e:	2000      	movs	r0, #0
   83650:	3502      	adds	r5, #2
   83652:	6063      	str	r3, [r4, #4]
   83654:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83658:	b005      	add	sp, #20
   8365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8365c:	2601      	movs	r6, #1
   8365e:	40ae      	lsls	r6, r5
   83660:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83664:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83668:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8366c:	2f02      	cmp	r7, #2
   8366e:	ea42 0206 	orr.w	r2, r2, r6
   83672:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83676:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8367a:	d1e7      	bne.n	8364c <__register_exitproc+0x58>
   8367c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83680:	431e      	orrs	r6, r3
   83682:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83686:	e7e1      	b.n	8364c <__register_exitproc+0x58>
   83688:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8368c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83690:	e7b9      	b.n	83606 <__register_exitproc+0x12>
   83692:	bf00      	nop
   83694:	00083df8 	.word	0x00083df8
   83698:	00082855 	.word	0x00082855

0008369c <_close_r>:
   8369c:	b538      	push	{r3, r4, r5, lr}
   8369e:	4c07      	ldr	r4, [pc, #28]	; (836bc <_close_r+0x20>)
   836a0:	2300      	movs	r3, #0
   836a2:	4605      	mov	r5, r0
   836a4:	4608      	mov	r0, r1
   836a6:	6023      	str	r3, [r4, #0]
   836a8:	f7fd fa4c 	bl	80b44 <_close>
   836ac:	1c43      	adds	r3, r0, #1
   836ae:	d000      	beq.n	836b2 <_close_r+0x16>
   836b0:	bd38      	pop	{r3, r4, r5, pc}
   836b2:	6823      	ldr	r3, [r4, #0]
   836b4:	2b00      	cmp	r3, #0
   836b6:	d0fb      	beq.n	836b0 <_close_r+0x14>
   836b8:	602b      	str	r3, [r5, #0]
   836ba:	bd38      	pop	{r3, r4, r5, pc}
   836bc:	20070a9c 	.word	0x20070a9c

000836c0 <_fclose_r>:
   836c0:	b570      	push	{r4, r5, r6, lr}
   836c2:	460c      	mov	r4, r1
   836c4:	4605      	mov	r5, r0
   836c6:	b131      	cbz	r1, 836d6 <_fclose_r+0x16>
   836c8:	b110      	cbz	r0, 836d0 <_fclose_r+0x10>
   836ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836cc:	2b00      	cmp	r3, #0
   836ce:	d02f      	beq.n	83730 <_fclose_r+0x70>
   836d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   836d4:	b90b      	cbnz	r3, 836da <_fclose_r+0x1a>
   836d6:	2000      	movs	r0, #0
   836d8:	bd70      	pop	{r4, r5, r6, pc}
   836da:	4628      	mov	r0, r5
   836dc:	4621      	mov	r1, r4
   836de:	f7fe fc63 	bl	81fa8 <_fflush_r>
   836e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   836e4:	4606      	mov	r6, r0
   836e6:	b133      	cbz	r3, 836f6 <_fclose_r+0x36>
   836e8:	4628      	mov	r0, r5
   836ea:	69e1      	ldr	r1, [r4, #28]
   836ec:	4798      	blx	r3
   836ee:	2800      	cmp	r0, #0
   836f0:	bfb8      	it	lt
   836f2:	f04f 36ff 	movlt.w	r6, #4294967295
   836f6:	89a3      	ldrh	r3, [r4, #12]
   836f8:	061b      	lsls	r3, r3, #24
   836fa:	d41c      	bmi.n	83736 <_fclose_r+0x76>
   836fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   836fe:	b141      	cbz	r1, 83712 <_fclose_r+0x52>
   83700:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83704:	4299      	cmp	r1, r3
   83706:	d002      	beq.n	8370e <_fclose_r+0x4e>
   83708:	4628      	mov	r0, r5
   8370a:	f7fe fdad 	bl	82268 <_free_r>
   8370e:	2300      	movs	r3, #0
   83710:	6323      	str	r3, [r4, #48]	; 0x30
   83712:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83714:	b121      	cbz	r1, 83720 <_fclose_r+0x60>
   83716:	4628      	mov	r0, r5
   83718:	f7fe fda6 	bl	82268 <_free_r>
   8371c:	2300      	movs	r3, #0
   8371e:	6463      	str	r3, [r4, #68]	; 0x44
   83720:	f7fe fcd8 	bl	820d4 <__sfp_lock_acquire>
   83724:	2300      	movs	r3, #0
   83726:	81a3      	strh	r3, [r4, #12]
   83728:	f7fe fcd6 	bl	820d8 <__sfp_lock_release>
   8372c:	4630      	mov	r0, r6
   8372e:	bd70      	pop	{r4, r5, r6, pc}
   83730:	f7fe fc56 	bl	81fe0 <__sinit>
   83734:	e7cc      	b.n	836d0 <_fclose_r+0x10>
   83736:	4628      	mov	r0, r5
   83738:	6921      	ldr	r1, [r4, #16]
   8373a:	f7fe fd95 	bl	82268 <_free_r>
   8373e:	e7dd      	b.n	836fc <_fclose_r+0x3c>

00083740 <fclose>:
   83740:	4b02      	ldr	r3, [pc, #8]	; (8374c <fclose+0xc>)
   83742:	4601      	mov	r1, r0
   83744:	6818      	ldr	r0, [r3, #0]
   83746:	f7ff bfbb 	b.w	836c0 <_fclose_r>
   8374a:	bf00      	nop
   8374c:	20070568 	.word	0x20070568

00083750 <_fstat_r>:
   83750:	b538      	push	{r3, r4, r5, lr}
   83752:	4c08      	ldr	r4, [pc, #32]	; (83774 <_fstat_r+0x24>)
   83754:	2300      	movs	r3, #0
   83756:	4605      	mov	r5, r0
   83758:	4608      	mov	r0, r1
   8375a:	4611      	mov	r1, r2
   8375c:	6023      	str	r3, [r4, #0]
   8375e:	f7fd f9f5 	bl	80b4c <_fstat>
   83762:	1c43      	adds	r3, r0, #1
   83764:	d000      	beq.n	83768 <_fstat_r+0x18>
   83766:	bd38      	pop	{r3, r4, r5, pc}
   83768:	6823      	ldr	r3, [r4, #0]
   8376a:	2b00      	cmp	r3, #0
   8376c:	d0fb      	beq.n	83766 <_fstat_r+0x16>
   8376e:	602b      	str	r3, [r5, #0]
   83770:	bd38      	pop	{r3, r4, r5, pc}
   83772:	bf00      	nop
   83774:	20070a9c 	.word	0x20070a9c

00083778 <_isatty_r>:
   83778:	b538      	push	{r3, r4, r5, lr}
   8377a:	4c07      	ldr	r4, [pc, #28]	; (83798 <_isatty_r+0x20>)
   8377c:	2300      	movs	r3, #0
   8377e:	4605      	mov	r5, r0
   83780:	4608      	mov	r0, r1
   83782:	6023      	str	r3, [r4, #0]
   83784:	f7fd f9e8 	bl	80b58 <_isatty>
   83788:	1c43      	adds	r3, r0, #1
   8378a:	d000      	beq.n	8378e <_isatty_r+0x16>
   8378c:	bd38      	pop	{r3, r4, r5, pc}
   8378e:	6823      	ldr	r3, [r4, #0]
   83790:	2b00      	cmp	r3, #0
   83792:	d0fb      	beq.n	8378c <_isatty_r+0x14>
   83794:	602b      	str	r3, [r5, #0]
   83796:	bd38      	pop	{r3, r4, r5, pc}
   83798:	20070a9c 	.word	0x20070a9c

0008379c <_lseek_r>:
   8379c:	b570      	push	{r4, r5, r6, lr}
   8379e:	4c08      	ldr	r4, [pc, #32]	; (837c0 <_lseek_r+0x24>)
   837a0:	4606      	mov	r6, r0
   837a2:	2500      	movs	r5, #0
   837a4:	4608      	mov	r0, r1
   837a6:	4611      	mov	r1, r2
   837a8:	461a      	mov	r2, r3
   837aa:	6025      	str	r5, [r4, #0]
   837ac:	f7fd f9d6 	bl	80b5c <_lseek>
   837b0:	1c43      	adds	r3, r0, #1
   837b2:	d000      	beq.n	837b6 <_lseek_r+0x1a>
   837b4:	bd70      	pop	{r4, r5, r6, pc}
   837b6:	6823      	ldr	r3, [r4, #0]
   837b8:	2b00      	cmp	r3, #0
   837ba:	d0fb      	beq.n	837b4 <_lseek_r+0x18>
   837bc:	6033      	str	r3, [r6, #0]
   837be:	bd70      	pop	{r4, r5, r6, pc}
   837c0:	20070a9c 	.word	0x20070a9c

000837c4 <_read_r>:
   837c4:	b570      	push	{r4, r5, r6, lr}
   837c6:	4c08      	ldr	r4, [pc, #32]	; (837e8 <_read_r+0x24>)
   837c8:	4606      	mov	r6, r0
   837ca:	2500      	movs	r5, #0
   837cc:	4608      	mov	r0, r1
   837ce:	4611      	mov	r1, r2
   837d0:	461a      	mov	r2, r3
   837d2:	6025      	str	r5, [r4, #0]
   837d4:	f7fc fcea 	bl	801ac <_read>
   837d8:	1c43      	adds	r3, r0, #1
   837da:	d000      	beq.n	837de <_read_r+0x1a>
   837dc:	bd70      	pop	{r4, r5, r6, pc}
   837de:	6823      	ldr	r3, [r4, #0]
   837e0:	2b00      	cmp	r3, #0
   837e2:	d0fb      	beq.n	837dc <_read_r+0x18>
   837e4:	6033      	str	r3, [r6, #0]
   837e6:	bd70      	pop	{r4, r5, r6, pc}
   837e8:	20070a9c 	.word	0x20070a9c

000837ec <__aeabi_uldivmod>:
   837ec:	b94b      	cbnz	r3, 83802 <__aeabi_uldivmod+0x16>
   837ee:	b942      	cbnz	r2, 83802 <__aeabi_uldivmod+0x16>
   837f0:	2900      	cmp	r1, #0
   837f2:	bf08      	it	eq
   837f4:	2800      	cmpeq	r0, #0
   837f6:	d002      	beq.n	837fe <__aeabi_uldivmod+0x12>
   837f8:	f04f 31ff 	mov.w	r1, #4294967295
   837fc:	4608      	mov	r0, r1
   837fe:	f000 b83b 	b.w	83878 <__aeabi_idiv0>
   83802:	b082      	sub	sp, #8
   83804:	46ec      	mov	ip, sp
   83806:	e92d 5000 	stmdb	sp!, {ip, lr}
   8380a:	f000 f81d 	bl	83848 <__gnu_uldivmod_helper>
   8380e:	f8dd e004 	ldr.w	lr, [sp, #4]
   83812:	b002      	add	sp, #8
   83814:	bc0c      	pop	{r2, r3}
   83816:	4770      	bx	lr

00083818 <__gnu_ldivmod_helper>:
   83818:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8381c:	9e08      	ldr	r6, [sp, #32]
   8381e:	4614      	mov	r4, r2
   83820:	461d      	mov	r5, r3
   83822:	4680      	mov	r8, r0
   83824:	4689      	mov	r9, r1
   83826:	f000 f829 	bl	8387c <__divdi3>
   8382a:	fb04 f301 	mul.w	r3, r4, r1
   8382e:	fba4 ab00 	umull	sl, fp, r4, r0
   83832:	fb00 3205 	mla	r2, r0, r5, r3
   83836:	4493      	add	fp, r2
   83838:	ebb8 080a 	subs.w	r8, r8, sl
   8383c:	eb69 090b 	sbc.w	r9, r9, fp
   83840:	e9c6 8900 	strd	r8, r9, [r6]
   83844:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083848 <__gnu_uldivmod_helper>:
   83848:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   8384c:	9e08      	ldr	r6, [sp, #32]
   8384e:	4614      	mov	r4, r2
   83850:	461d      	mov	r5, r3
   83852:	4680      	mov	r8, r0
   83854:	4689      	mov	r9, r1
   83856:	f000 f961 	bl	83b1c <__udivdi3>
   8385a:	fb00 f505 	mul.w	r5, r0, r5
   8385e:	fba0 ab04 	umull	sl, fp, r0, r4
   83862:	fb04 5401 	mla	r4, r4, r1, r5
   83866:	44a3      	add	fp, r4
   83868:	ebb8 080a 	subs.w	r8, r8, sl
   8386c:	eb69 090b 	sbc.w	r9, r9, fp
   83870:	e9c6 8900 	strd	r8, r9, [r6]
   83874:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00083878 <__aeabi_idiv0>:
   83878:	4770      	bx	lr
   8387a:	bf00      	nop

0008387c <__divdi3>:
   8387c:	2900      	cmp	r1, #0
   8387e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83882:	f2c0 80a1 	blt.w	839c8 <__divdi3+0x14c>
   83886:	2400      	movs	r4, #0
   83888:	2b00      	cmp	r3, #0
   8388a:	f2c0 8098 	blt.w	839be <__divdi3+0x142>
   8388e:	4615      	mov	r5, r2
   83890:	4606      	mov	r6, r0
   83892:	460f      	mov	r7, r1
   83894:	2b00      	cmp	r3, #0
   83896:	d13f      	bne.n	83918 <__divdi3+0x9c>
   83898:	428a      	cmp	r2, r1
   8389a:	d958      	bls.n	8394e <__divdi3+0xd2>
   8389c:	fab2 f382 	clz	r3, r2
   838a0:	b14b      	cbz	r3, 838b6 <__divdi3+0x3a>
   838a2:	f1c3 0220 	rsb	r2, r3, #32
   838a6:	fa01 f703 	lsl.w	r7, r1, r3
   838aa:	fa20 f202 	lsr.w	r2, r0, r2
   838ae:	409d      	lsls	r5, r3
   838b0:	fa00 f603 	lsl.w	r6, r0, r3
   838b4:	4317      	orrs	r7, r2
   838b6:	0c29      	lsrs	r1, r5, #16
   838b8:	fbb7 f2f1 	udiv	r2, r7, r1
   838bc:	fb01 7712 	mls	r7, r1, r2, r7
   838c0:	b2a8      	uxth	r0, r5
   838c2:	fb00 f302 	mul.w	r3, r0, r2
   838c6:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   838ca:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   838ce:	42bb      	cmp	r3, r7
   838d0:	d909      	bls.n	838e6 <__divdi3+0x6a>
   838d2:	197f      	adds	r7, r7, r5
   838d4:	f102 3cff 	add.w	ip, r2, #4294967295
   838d8:	f080 8105 	bcs.w	83ae6 <__divdi3+0x26a>
   838dc:	42bb      	cmp	r3, r7
   838de:	f240 8102 	bls.w	83ae6 <__divdi3+0x26a>
   838e2:	3a02      	subs	r2, #2
   838e4:	442f      	add	r7, r5
   838e6:	1aff      	subs	r7, r7, r3
   838e8:	fbb7 f3f1 	udiv	r3, r7, r1
   838ec:	fb01 7113 	mls	r1, r1, r3, r7
   838f0:	fb00 f003 	mul.w	r0, r0, r3
   838f4:	b2b6      	uxth	r6, r6
   838f6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   838fa:	4288      	cmp	r0, r1
   838fc:	d908      	bls.n	83910 <__divdi3+0x94>
   838fe:	1949      	adds	r1, r1, r5
   83900:	f103 37ff 	add.w	r7, r3, #4294967295
   83904:	f080 80f1 	bcs.w	83aea <__divdi3+0x26e>
   83908:	4288      	cmp	r0, r1
   8390a:	f240 80ee 	bls.w	83aea <__divdi3+0x26e>
   8390e:	3b02      	subs	r3, #2
   83910:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83914:	2300      	movs	r3, #0
   83916:	e003      	b.n	83920 <__divdi3+0xa4>
   83918:	428b      	cmp	r3, r1
   8391a:	d90a      	bls.n	83932 <__divdi3+0xb6>
   8391c:	2300      	movs	r3, #0
   8391e:	461a      	mov	r2, r3
   83920:	4610      	mov	r0, r2
   83922:	4619      	mov	r1, r3
   83924:	b114      	cbz	r4, 8392c <__divdi3+0xb0>
   83926:	4240      	negs	r0, r0
   83928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8392c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83930:	4770      	bx	lr
   83932:	fab3 f883 	clz	r8, r3
   83936:	f1b8 0f00 	cmp.w	r8, #0
   8393a:	f040 8088 	bne.w	83a4e <__divdi3+0x1d2>
   8393e:	428b      	cmp	r3, r1
   83940:	d302      	bcc.n	83948 <__divdi3+0xcc>
   83942:	4282      	cmp	r2, r0
   83944:	f200 80e2 	bhi.w	83b0c <__divdi3+0x290>
   83948:	2300      	movs	r3, #0
   8394a:	2201      	movs	r2, #1
   8394c:	e7e8      	b.n	83920 <__divdi3+0xa4>
   8394e:	b912      	cbnz	r2, 83956 <__divdi3+0xda>
   83950:	2301      	movs	r3, #1
   83952:	fbb3 f5f2 	udiv	r5, r3, r2
   83956:	fab5 f285 	clz	r2, r5
   8395a:	2a00      	cmp	r2, #0
   8395c:	d13a      	bne.n	839d4 <__divdi3+0x158>
   8395e:	1b7f      	subs	r7, r7, r5
   83960:	0c28      	lsrs	r0, r5, #16
   83962:	fa1f fc85 	uxth.w	ip, r5
   83966:	2301      	movs	r3, #1
   83968:	fbb7 f1f0 	udiv	r1, r7, r0
   8396c:	fb00 7711 	mls	r7, r0, r1, r7
   83970:	fb0c f201 	mul.w	r2, ip, r1
   83974:	ea4f 4816 	mov.w	r8, r6, lsr #16
   83978:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   8397c:	42ba      	cmp	r2, r7
   8397e:	d907      	bls.n	83990 <__divdi3+0x114>
   83980:	197f      	adds	r7, r7, r5
   83982:	f101 38ff 	add.w	r8, r1, #4294967295
   83986:	d202      	bcs.n	8398e <__divdi3+0x112>
   83988:	42ba      	cmp	r2, r7
   8398a:	f200 80c4 	bhi.w	83b16 <__divdi3+0x29a>
   8398e:	4641      	mov	r1, r8
   83990:	1abf      	subs	r7, r7, r2
   83992:	fbb7 f2f0 	udiv	r2, r7, r0
   83996:	fb00 7012 	mls	r0, r0, r2, r7
   8399a:	fb0c fc02 	mul.w	ip, ip, r2
   8399e:	b2b6      	uxth	r6, r6
   839a0:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   839a4:	4584      	cmp	ip, r0
   839a6:	d907      	bls.n	839b8 <__divdi3+0x13c>
   839a8:	1940      	adds	r0, r0, r5
   839aa:	f102 37ff 	add.w	r7, r2, #4294967295
   839ae:	d202      	bcs.n	839b6 <__divdi3+0x13a>
   839b0:	4584      	cmp	ip, r0
   839b2:	f200 80ae 	bhi.w	83b12 <__divdi3+0x296>
   839b6:	463a      	mov	r2, r7
   839b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   839bc:	e7b0      	b.n	83920 <__divdi3+0xa4>
   839be:	43e4      	mvns	r4, r4
   839c0:	4252      	negs	r2, r2
   839c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   839c6:	e762      	b.n	8388e <__divdi3+0x12>
   839c8:	4240      	negs	r0, r0
   839ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   839ce:	f04f 34ff 	mov.w	r4, #4294967295
   839d2:	e759      	b.n	83888 <__divdi3+0xc>
   839d4:	4095      	lsls	r5, r2
   839d6:	f1c2 0920 	rsb	r9, r2, #32
   839da:	fa27 f109 	lsr.w	r1, r7, r9
   839de:	fa26 f909 	lsr.w	r9, r6, r9
   839e2:	4097      	lsls	r7, r2
   839e4:	0c28      	lsrs	r0, r5, #16
   839e6:	fbb1 f8f0 	udiv	r8, r1, r0
   839ea:	fb00 1118 	mls	r1, r0, r8, r1
   839ee:	fa1f fc85 	uxth.w	ip, r5
   839f2:	fb0c f308 	mul.w	r3, ip, r8
   839f6:	ea49 0907 	orr.w	r9, r9, r7
   839fa:	ea4f 4719 	mov.w	r7, r9, lsr #16
   839fe:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   83a02:	428b      	cmp	r3, r1
   83a04:	fa06 f602 	lsl.w	r6, r6, r2
   83a08:	d908      	bls.n	83a1c <__divdi3+0x1a0>
   83a0a:	1949      	adds	r1, r1, r5
   83a0c:	f108 32ff 	add.w	r2, r8, #4294967295
   83a10:	d27a      	bcs.n	83b08 <__divdi3+0x28c>
   83a12:	428b      	cmp	r3, r1
   83a14:	d978      	bls.n	83b08 <__divdi3+0x28c>
   83a16:	f1a8 0802 	sub.w	r8, r8, #2
   83a1a:	4429      	add	r1, r5
   83a1c:	1ac9      	subs	r1, r1, r3
   83a1e:	fbb1 f3f0 	udiv	r3, r1, r0
   83a22:	fb00 1713 	mls	r7, r0, r3, r1
   83a26:	fb0c f203 	mul.w	r2, ip, r3
   83a2a:	fa1f f989 	uxth.w	r9, r9
   83a2e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   83a32:	42ba      	cmp	r2, r7
   83a34:	d907      	bls.n	83a46 <__divdi3+0x1ca>
   83a36:	197f      	adds	r7, r7, r5
   83a38:	f103 31ff 	add.w	r1, r3, #4294967295
   83a3c:	d260      	bcs.n	83b00 <__divdi3+0x284>
   83a3e:	42ba      	cmp	r2, r7
   83a40:	d95e      	bls.n	83b00 <__divdi3+0x284>
   83a42:	3b02      	subs	r3, #2
   83a44:	442f      	add	r7, r5
   83a46:	1abf      	subs	r7, r7, r2
   83a48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83a4c:	e78c      	b.n	83968 <__divdi3+0xec>
   83a4e:	f1c8 0220 	rsb	r2, r8, #32
   83a52:	fa25 f102 	lsr.w	r1, r5, r2
   83a56:	fa03 fc08 	lsl.w	ip, r3, r8
   83a5a:	fa27 f302 	lsr.w	r3, r7, r2
   83a5e:	fa20 f202 	lsr.w	r2, r0, r2
   83a62:	fa07 f708 	lsl.w	r7, r7, r8
   83a66:	ea41 0c0c 	orr.w	ip, r1, ip
   83a6a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   83a6e:	fbb3 f1f9 	udiv	r1, r3, r9
   83a72:	fb09 3311 	mls	r3, r9, r1, r3
   83a76:	fa1f fa8c 	uxth.w	sl, ip
   83a7a:	fb0a fb01 	mul.w	fp, sl, r1
   83a7e:	4317      	orrs	r7, r2
   83a80:	0c3a      	lsrs	r2, r7, #16
   83a82:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83a86:	459b      	cmp	fp, r3
   83a88:	fa05 f008 	lsl.w	r0, r5, r8
   83a8c:	d908      	bls.n	83aa0 <__divdi3+0x224>
   83a8e:	eb13 030c 	adds.w	r3, r3, ip
   83a92:	f101 32ff 	add.w	r2, r1, #4294967295
   83a96:	d235      	bcs.n	83b04 <__divdi3+0x288>
   83a98:	459b      	cmp	fp, r3
   83a9a:	d933      	bls.n	83b04 <__divdi3+0x288>
   83a9c:	3902      	subs	r1, #2
   83a9e:	4463      	add	r3, ip
   83aa0:	ebcb 0303 	rsb	r3, fp, r3
   83aa4:	fbb3 f2f9 	udiv	r2, r3, r9
   83aa8:	fb09 3312 	mls	r3, r9, r2, r3
   83aac:	fb0a fa02 	mul.w	sl, sl, r2
   83ab0:	b2bf      	uxth	r7, r7
   83ab2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   83ab6:	45ba      	cmp	sl, r7
   83ab8:	d908      	bls.n	83acc <__divdi3+0x250>
   83aba:	eb17 070c 	adds.w	r7, r7, ip
   83abe:	f102 33ff 	add.w	r3, r2, #4294967295
   83ac2:	d21b      	bcs.n	83afc <__divdi3+0x280>
   83ac4:	45ba      	cmp	sl, r7
   83ac6:	d919      	bls.n	83afc <__divdi3+0x280>
   83ac8:	3a02      	subs	r2, #2
   83aca:	4467      	add	r7, ip
   83acc:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   83ad0:	fba5 0100 	umull	r0, r1, r5, r0
   83ad4:	ebca 0707 	rsb	r7, sl, r7
   83ad8:	428f      	cmp	r7, r1
   83ada:	f04f 0300 	mov.w	r3, #0
   83ade:	d30a      	bcc.n	83af6 <__divdi3+0x27a>
   83ae0:	d005      	beq.n	83aee <__divdi3+0x272>
   83ae2:	462a      	mov	r2, r5
   83ae4:	e71c      	b.n	83920 <__divdi3+0xa4>
   83ae6:	4662      	mov	r2, ip
   83ae8:	e6fd      	b.n	838e6 <__divdi3+0x6a>
   83aea:	463b      	mov	r3, r7
   83aec:	e710      	b.n	83910 <__divdi3+0x94>
   83aee:	fa06 f608 	lsl.w	r6, r6, r8
   83af2:	4286      	cmp	r6, r0
   83af4:	d2f5      	bcs.n	83ae2 <__divdi3+0x266>
   83af6:	1e6a      	subs	r2, r5, #1
   83af8:	2300      	movs	r3, #0
   83afa:	e711      	b.n	83920 <__divdi3+0xa4>
   83afc:	461a      	mov	r2, r3
   83afe:	e7e5      	b.n	83acc <__divdi3+0x250>
   83b00:	460b      	mov	r3, r1
   83b02:	e7a0      	b.n	83a46 <__divdi3+0x1ca>
   83b04:	4611      	mov	r1, r2
   83b06:	e7cb      	b.n	83aa0 <__divdi3+0x224>
   83b08:	4690      	mov	r8, r2
   83b0a:	e787      	b.n	83a1c <__divdi3+0x1a0>
   83b0c:	4643      	mov	r3, r8
   83b0e:	4642      	mov	r2, r8
   83b10:	e706      	b.n	83920 <__divdi3+0xa4>
   83b12:	3a02      	subs	r2, #2
   83b14:	e750      	b.n	839b8 <__divdi3+0x13c>
   83b16:	3902      	subs	r1, #2
   83b18:	442f      	add	r7, r5
   83b1a:	e739      	b.n	83990 <__divdi3+0x114>

00083b1c <__udivdi3>:
   83b1c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83b20:	4614      	mov	r4, r2
   83b22:	4605      	mov	r5, r0
   83b24:	460e      	mov	r6, r1
   83b26:	2b00      	cmp	r3, #0
   83b28:	d143      	bne.n	83bb2 <__udivdi3+0x96>
   83b2a:	428a      	cmp	r2, r1
   83b2c:	d953      	bls.n	83bd6 <__udivdi3+0xba>
   83b2e:	fab2 f782 	clz	r7, r2
   83b32:	b157      	cbz	r7, 83b4a <__udivdi3+0x2e>
   83b34:	f1c7 0620 	rsb	r6, r7, #32
   83b38:	fa20 f606 	lsr.w	r6, r0, r6
   83b3c:	fa01 f307 	lsl.w	r3, r1, r7
   83b40:	fa02 f407 	lsl.w	r4, r2, r7
   83b44:	fa00 f507 	lsl.w	r5, r0, r7
   83b48:	431e      	orrs	r6, r3
   83b4a:	0c21      	lsrs	r1, r4, #16
   83b4c:	fbb6 f2f1 	udiv	r2, r6, r1
   83b50:	fb01 6612 	mls	r6, r1, r2, r6
   83b54:	b2a0      	uxth	r0, r4
   83b56:	fb00 f302 	mul.w	r3, r0, r2
   83b5a:	0c2f      	lsrs	r7, r5, #16
   83b5c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   83b60:	42b3      	cmp	r3, r6
   83b62:	d909      	bls.n	83b78 <__udivdi3+0x5c>
   83b64:	1936      	adds	r6, r6, r4
   83b66:	f102 37ff 	add.w	r7, r2, #4294967295
   83b6a:	f080 80fd 	bcs.w	83d68 <__udivdi3+0x24c>
   83b6e:	42b3      	cmp	r3, r6
   83b70:	f240 80fa 	bls.w	83d68 <__udivdi3+0x24c>
   83b74:	3a02      	subs	r2, #2
   83b76:	4426      	add	r6, r4
   83b78:	1af6      	subs	r6, r6, r3
   83b7a:	fbb6 f3f1 	udiv	r3, r6, r1
   83b7e:	fb01 6113 	mls	r1, r1, r3, r6
   83b82:	fb00 f003 	mul.w	r0, r0, r3
   83b86:	b2ad      	uxth	r5, r5
   83b88:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   83b8c:	4288      	cmp	r0, r1
   83b8e:	d908      	bls.n	83ba2 <__udivdi3+0x86>
   83b90:	1909      	adds	r1, r1, r4
   83b92:	f103 36ff 	add.w	r6, r3, #4294967295
   83b96:	f080 80e9 	bcs.w	83d6c <__udivdi3+0x250>
   83b9a:	4288      	cmp	r0, r1
   83b9c:	f240 80e6 	bls.w	83d6c <__udivdi3+0x250>
   83ba0:	3b02      	subs	r3, #2
   83ba2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   83ba6:	2300      	movs	r3, #0
   83ba8:	4610      	mov	r0, r2
   83baa:	4619      	mov	r1, r3
   83bac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bb0:	4770      	bx	lr
   83bb2:	428b      	cmp	r3, r1
   83bb4:	d84c      	bhi.n	83c50 <__udivdi3+0x134>
   83bb6:	fab3 f683 	clz	r6, r3
   83bba:	2e00      	cmp	r6, #0
   83bbc:	d14f      	bne.n	83c5e <__udivdi3+0x142>
   83bbe:	428b      	cmp	r3, r1
   83bc0:	d302      	bcc.n	83bc8 <__udivdi3+0xac>
   83bc2:	4282      	cmp	r2, r0
   83bc4:	f200 80dd 	bhi.w	83d82 <__udivdi3+0x266>
   83bc8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83bcc:	2300      	movs	r3, #0
   83bce:	2201      	movs	r2, #1
   83bd0:	4610      	mov	r0, r2
   83bd2:	4619      	mov	r1, r3
   83bd4:	4770      	bx	lr
   83bd6:	b912      	cbnz	r2, 83bde <__udivdi3+0xc2>
   83bd8:	2401      	movs	r4, #1
   83bda:	fbb4 f4f2 	udiv	r4, r4, r2
   83bde:	fab4 f284 	clz	r2, r4
   83be2:	2a00      	cmp	r2, #0
   83be4:	f040 8082 	bne.w	83cec <__udivdi3+0x1d0>
   83be8:	1b09      	subs	r1, r1, r4
   83bea:	0c26      	lsrs	r6, r4, #16
   83bec:	b2a7      	uxth	r7, r4
   83bee:	2301      	movs	r3, #1
   83bf0:	fbb1 f0f6 	udiv	r0, r1, r6
   83bf4:	fb06 1110 	mls	r1, r6, r0, r1
   83bf8:	fb07 f200 	mul.w	r2, r7, r0
   83bfc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   83c00:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   83c04:	428a      	cmp	r2, r1
   83c06:	d907      	bls.n	83c18 <__udivdi3+0xfc>
   83c08:	1909      	adds	r1, r1, r4
   83c0a:	f100 3cff 	add.w	ip, r0, #4294967295
   83c0e:	d202      	bcs.n	83c16 <__udivdi3+0xfa>
   83c10:	428a      	cmp	r2, r1
   83c12:	f200 80c8 	bhi.w	83da6 <__udivdi3+0x28a>
   83c16:	4660      	mov	r0, ip
   83c18:	1a89      	subs	r1, r1, r2
   83c1a:	fbb1 f2f6 	udiv	r2, r1, r6
   83c1e:	fb06 1112 	mls	r1, r6, r2, r1
   83c22:	fb07 f702 	mul.w	r7, r7, r2
   83c26:	b2ad      	uxth	r5, r5
   83c28:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   83c2c:	42af      	cmp	r7, r5
   83c2e:	d908      	bls.n	83c42 <__udivdi3+0x126>
   83c30:	192c      	adds	r4, r5, r4
   83c32:	f102 31ff 	add.w	r1, r2, #4294967295
   83c36:	f080 809b 	bcs.w	83d70 <__udivdi3+0x254>
   83c3a:	42a7      	cmp	r7, r4
   83c3c:	f240 8098 	bls.w	83d70 <__udivdi3+0x254>
   83c40:	3a02      	subs	r2, #2
   83c42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   83c46:	4610      	mov	r0, r2
   83c48:	4619      	mov	r1, r3
   83c4a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c4e:	4770      	bx	lr
   83c50:	2300      	movs	r3, #0
   83c52:	461a      	mov	r2, r3
   83c54:	4610      	mov	r0, r2
   83c56:	4619      	mov	r1, r3
   83c58:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83c5c:	4770      	bx	lr
   83c5e:	f1c6 0520 	rsb	r5, r6, #32
   83c62:	fa22 f705 	lsr.w	r7, r2, r5
   83c66:	fa03 f406 	lsl.w	r4, r3, r6
   83c6a:	fa21 f305 	lsr.w	r3, r1, r5
   83c6e:	fa01 fb06 	lsl.w	fp, r1, r6
   83c72:	fa20 f505 	lsr.w	r5, r0, r5
   83c76:	433c      	orrs	r4, r7
   83c78:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83c7c:	fbb3 fcf8 	udiv	ip, r3, r8
   83c80:	fb08 331c 	mls	r3, r8, ip, r3
   83c84:	fa1f f984 	uxth.w	r9, r4
   83c88:	fb09 fa0c 	mul.w	sl, r9, ip
   83c8c:	ea45 0b0b 	orr.w	fp, r5, fp
   83c90:	ea4f 451b 	mov.w	r5, fp, lsr #16
   83c94:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   83c98:	459a      	cmp	sl, r3
   83c9a:	fa02 f206 	lsl.w	r2, r2, r6
   83c9e:	d904      	bls.n	83caa <__udivdi3+0x18e>
   83ca0:	191b      	adds	r3, r3, r4
   83ca2:	f10c 35ff 	add.w	r5, ip, #4294967295
   83ca6:	d36f      	bcc.n	83d88 <__udivdi3+0x26c>
   83ca8:	46ac      	mov	ip, r5
   83caa:	ebca 0303 	rsb	r3, sl, r3
   83cae:	fbb3 f5f8 	udiv	r5, r3, r8
   83cb2:	fb08 3315 	mls	r3, r8, r5, r3
   83cb6:	fb09 f905 	mul.w	r9, r9, r5
   83cba:	fa1f fb8b 	uxth.w	fp, fp
   83cbe:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   83cc2:	45b9      	cmp	r9, r7
   83cc4:	d904      	bls.n	83cd0 <__udivdi3+0x1b4>
   83cc6:	193f      	adds	r7, r7, r4
   83cc8:	f105 33ff 	add.w	r3, r5, #4294967295
   83ccc:	d362      	bcc.n	83d94 <__udivdi3+0x278>
   83cce:	461d      	mov	r5, r3
   83cd0:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   83cd4:	fbac 2302 	umull	r2, r3, ip, r2
   83cd8:	ebc9 0707 	rsb	r7, r9, r7
   83cdc:	429f      	cmp	r7, r3
   83cde:	f04f 0500 	mov.w	r5, #0
   83ce2:	d34a      	bcc.n	83d7a <__udivdi3+0x25e>
   83ce4:	d046      	beq.n	83d74 <__udivdi3+0x258>
   83ce6:	4662      	mov	r2, ip
   83ce8:	462b      	mov	r3, r5
   83cea:	e75d      	b.n	83ba8 <__udivdi3+0x8c>
   83cec:	4094      	lsls	r4, r2
   83cee:	f1c2 0920 	rsb	r9, r2, #32
   83cf2:	fa21 fc09 	lsr.w	ip, r1, r9
   83cf6:	4091      	lsls	r1, r2
   83cf8:	fa20 f909 	lsr.w	r9, r0, r9
   83cfc:	0c26      	lsrs	r6, r4, #16
   83cfe:	fbbc f8f6 	udiv	r8, ip, r6
   83d02:	fb06 cc18 	mls	ip, r6, r8, ip
   83d06:	b2a7      	uxth	r7, r4
   83d08:	fb07 f308 	mul.w	r3, r7, r8
   83d0c:	ea49 0901 	orr.w	r9, r9, r1
   83d10:	ea4f 4119 	mov.w	r1, r9, lsr #16
   83d14:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   83d18:	4563      	cmp	r3, ip
   83d1a:	fa00 f502 	lsl.w	r5, r0, r2
   83d1e:	d909      	bls.n	83d34 <__udivdi3+0x218>
   83d20:	eb1c 0c04 	adds.w	ip, ip, r4
   83d24:	f108 32ff 	add.w	r2, r8, #4294967295
   83d28:	d23b      	bcs.n	83da2 <__udivdi3+0x286>
   83d2a:	4563      	cmp	r3, ip
   83d2c:	d939      	bls.n	83da2 <__udivdi3+0x286>
   83d2e:	f1a8 0802 	sub.w	r8, r8, #2
   83d32:	44a4      	add	ip, r4
   83d34:	ebc3 0c0c 	rsb	ip, r3, ip
   83d38:	fbbc f3f6 	udiv	r3, ip, r6
   83d3c:	fb06 c113 	mls	r1, r6, r3, ip
   83d40:	fb07 f203 	mul.w	r2, r7, r3
   83d44:	fa1f f989 	uxth.w	r9, r9
   83d48:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   83d4c:	428a      	cmp	r2, r1
   83d4e:	d907      	bls.n	83d60 <__udivdi3+0x244>
   83d50:	1909      	adds	r1, r1, r4
   83d52:	f103 30ff 	add.w	r0, r3, #4294967295
   83d56:	d222      	bcs.n	83d9e <__udivdi3+0x282>
   83d58:	428a      	cmp	r2, r1
   83d5a:	d920      	bls.n	83d9e <__udivdi3+0x282>
   83d5c:	3b02      	subs	r3, #2
   83d5e:	4421      	add	r1, r4
   83d60:	1a89      	subs	r1, r1, r2
   83d62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   83d66:	e743      	b.n	83bf0 <__udivdi3+0xd4>
   83d68:	463a      	mov	r2, r7
   83d6a:	e705      	b.n	83b78 <__udivdi3+0x5c>
   83d6c:	4633      	mov	r3, r6
   83d6e:	e718      	b.n	83ba2 <__udivdi3+0x86>
   83d70:	460a      	mov	r2, r1
   83d72:	e766      	b.n	83c42 <__udivdi3+0x126>
   83d74:	40b0      	lsls	r0, r6
   83d76:	4290      	cmp	r0, r2
   83d78:	d2b5      	bcs.n	83ce6 <__udivdi3+0x1ca>
   83d7a:	f10c 32ff 	add.w	r2, ip, #4294967295
   83d7e:	2300      	movs	r3, #0
   83d80:	e712      	b.n	83ba8 <__udivdi3+0x8c>
   83d82:	4633      	mov	r3, r6
   83d84:	4632      	mov	r2, r6
   83d86:	e70f      	b.n	83ba8 <__udivdi3+0x8c>
   83d88:	459a      	cmp	sl, r3
   83d8a:	d98d      	bls.n	83ca8 <__udivdi3+0x18c>
   83d8c:	f1ac 0c02 	sub.w	ip, ip, #2
   83d90:	4423      	add	r3, r4
   83d92:	e78a      	b.n	83caa <__udivdi3+0x18e>
   83d94:	45b9      	cmp	r9, r7
   83d96:	d99a      	bls.n	83cce <__udivdi3+0x1b2>
   83d98:	3d02      	subs	r5, #2
   83d9a:	4427      	add	r7, r4
   83d9c:	e798      	b.n	83cd0 <__udivdi3+0x1b4>
   83d9e:	4603      	mov	r3, r0
   83da0:	e7de      	b.n	83d60 <__udivdi3+0x244>
   83da2:	4690      	mov	r8, r2
   83da4:	e7c6      	b.n	83d34 <__udivdi3+0x218>
   83da6:	3802      	subs	r0, #2
   83da8:	4421      	add	r1, r4
   83daa:	e735      	b.n	83c18 <__udivdi3+0xfc>
   83dac:	00000001 	.word	0x00000001
   83db0:	00000002 	.word	0x00000002
   83db4:	00000004 	.word	0x00000004
   83db8:	00000008 	.word	0x00000008
   83dbc:	00000010 	.word	0x00000010
   83dc0:	00000020 	.word	0x00000020
   83dc4:	00000040 	.word	0x00000040
   83dc8:	00000080 	.word	0x00000080
   83dcc:	00000100 	.word	0x00000100
   83dd0:	00000200 	.word	0x00000200
   83dd4:	00000400 	.word	0x00000400
   83dd8:	000186a0 	.word	0x000186a0
   83ddc:	00000000 	.word	0x00000000
   83de0:	0501bd00 	.word	0x0501bd00
   83de4:	00000a30 	.word	0x00000a30
   83de8:	000a3035 	.word	0x000a3035
   83dec:	0a303031 	.word	0x0a303031
   83df0:	00000000 	.word	0x00000000
   83df4:	00000043 	.word	0x00000043

00083df8 <_global_impure_ptr>:
   83df8:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   83e08:	46454443 00000000 33323130 37363534     CDEF....01234567
   83e18:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83e28:	0000296c                                l)..

00083e2c <zeroes.6721>:
   83e2c:	30303030 30303030 30303030 30303030     0000000000000000

00083e3c <blanks.6720>:
   83e3c:	20202020 20202020 20202020 20202020                     

00083e4c <_init>:
   83e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e4e:	bf00      	nop
   83e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83e52:	bc08      	pop	{r3}
   83e54:	469e      	mov	lr, r3
   83e56:	4770      	bx	lr

00083e58 <__init_array_start>:
   83e58:	00081e41 	.word	0x00081e41

00083e5c <__frame_dummy_init_array_entry>:
   83e5c:	00080119                                ....

00083e60 <_fini>:
   83e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e62:	bf00      	nop
   83e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83e66:	bc08      	pop	{r3}
   83e68:	469e      	mov	lr, r3
   83e6a:	4770      	bx	lr

00083e6c <__fini_array_start>:
   83e6c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00083df4 00000000 00000000 00000000     .=..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	000835b1                                .5..
